// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db1.proto

#include "db1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace d5 {
namespace db1 {
class asset_light_styleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<asset_light_style>
      _instance;
} _asset_light_style_default_instance_;
class asset_materialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<asset_material>
      _instance;
} _asset_material_default_instance_;
class asset_material_categoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<asset_material_category>
      _instance;
} _asset_material_category_default_instance_;
class effect_modeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<effect_mode>
      _instance;
} _effect_mode_default_instance_;
class environment_light_templateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<environment_light_template>
      _instance;
} _environment_light_template_default_instance_;
class furniture_colorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<furniture_color>
      _instance;
} _furniture_color_default_instance_;
class furniture_main_materialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<furniture_main_material>
      _instance;
} _furniture_main_material_default_instance_;
class furniture_styleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<furniture_style>
      _instance;
} _furniture_style_default_instance_;
class outdoor_light_styleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<outdoor_light_style>
      _instance;
} _outdoor_light_style_default_instance_;
class plan_design_templateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plan_design_template>
      _instance;
} _plan_design_template_default_instance_;
class plan_districtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plan_district>
      _instance;
} _plan_district_default_instance_;
class plan_property_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plan_property_type>
      _instance;
} _plan_property_type_default_instance_;
class plan_room_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plan_room_type>
      _instance;
} _plan_room_type_default_instance_;
class plan_template_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<plan_template_type>
      _instance;
} _plan_template_type_default_instance_;
class product_brandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<product_brand>
      _instance;
} _product_brand_default_instance_;
class product_category1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<product_category1>
      _instance;
} _product_category1_default_instance_;
class product_category2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<product_category2>
      _instance;
} _product_category2_default_instance_;
class product_category3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<product_category3>
      _instance;
} _product_category3_default_instance_;
class sqlite_sequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sqlite_sequence>
      _instance;
} _sqlite_sequence_default_instance_;
}  // namespace db1
}  // namespace d5
namespace protobuf_db1_2eproto {
void InitDefaultsasset_light_styleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_asset_light_style_default_instance_;
    new (ptr) ::d5::db1::asset_light_style();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::asset_light_style::InitAsDefaultInstance();
}

void InitDefaultsasset_light_style() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsasset_light_styleImpl);
}

void InitDefaultsasset_materialImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_asset_material_default_instance_;
    new (ptr) ::d5::db1::asset_material();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::asset_material::InitAsDefaultInstance();
}

void InitDefaultsasset_material() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsasset_materialImpl);
}

void InitDefaultsasset_material_categoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_asset_material_category_default_instance_;
    new (ptr) ::d5::db1::asset_material_category();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::asset_material_category::InitAsDefaultInstance();
}

void InitDefaultsasset_material_category() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsasset_material_categoryImpl);
}

void InitDefaultseffect_modeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_effect_mode_default_instance_;
    new (ptr) ::d5::db1::effect_mode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::effect_mode::InitAsDefaultInstance();
}

void InitDefaultseffect_mode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultseffect_modeImpl);
}

void InitDefaultsenvironment_light_templateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_environment_light_template_default_instance_;
    new (ptr) ::d5::db1::environment_light_template();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::environment_light_template::InitAsDefaultInstance();
}

void InitDefaultsenvironment_light_template() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsenvironment_light_templateImpl);
}

void InitDefaultsfurniture_colorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_furniture_color_default_instance_;
    new (ptr) ::d5::db1::furniture_color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::furniture_color::InitAsDefaultInstance();
}

void InitDefaultsfurniture_color() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsfurniture_colorImpl);
}

void InitDefaultsfurniture_main_materialImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_furniture_main_material_default_instance_;
    new (ptr) ::d5::db1::furniture_main_material();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::furniture_main_material::InitAsDefaultInstance();
}

void InitDefaultsfurniture_main_material() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsfurniture_main_materialImpl);
}

void InitDefaultsfurniture_styleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_furniture_style_default_instance_;
    new (ptr) ::d5::db1::furniture_style();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::furniture_style::InitAsDefaultInstance();
}

void InitDefaultsfurniture_style() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsfurniture_styleImpl);
}

void InitDefaultsoutdoor_light_styleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_outdoor_light_style_default_instance_;
    new (ptr) ::d5::db1::outdoor_light_style();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::outdoor_light_style::InitAsDefaultInstance();
}

void InitDefaultsoutdoor_light_style() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsoutdoor_light_styleImpl);
}

void InitDefaultsplan_design_templateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_plan_design_template_default_instance_;
    new (ptr) ::d5::db1::plan_design_template();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::plan_design_template::InitAsDefaultInstance();
}

void InitDefaultsplan_design_template() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsplan_design_templateImpl);
}

void InitDefaultsplan_districtImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_plan_district_default_instance_;
    new (ptr) ::d5::db1::plan_district();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::plan_district::InitAsDefaultInstance();
}

void InitDefaultsplan_district() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsplan_districtImpl);
}

void InitDefaultsplan_property_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_plan_property_type_default_instance_;
    new (ptr) ::d5::db1::plan_property_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::plan_property_type::InitAsDefaultInstance();
}

void InitDefaultsplan_property_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsplan_property_typeImpl);
}

void InitDefaultsplan_room_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_plan_room_type_default_instance_;
    new (ptr) ::d5::db1::plan_room_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::plan_room_type::InitAsDefaultInstance();
}

void InitDefaultsplan_room_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsplan_room_typeImpl);
}

void InitDefaultsplan_template_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_plan_template_type_default_instance_;
    new (ptr) ::d5::db1::plan_template_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::plan_template_type::InitAsDefaultInstance();
}

void InitDefaultsplan_template_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsplan_template_typeImpl);
}

void InitDefaultsproduct_brandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_product_brand_default_instance_;
    new (ptr) ::d5::db1::product_brand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::product_brand::InitAsDefaultInstance();
}

void InitDefaultsproduct_brand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsproduct_brandImpl);
}

void InitDefaultsproduct_category1Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_product_category1_default_instance_;
    new (ptr) ::d5::db1::product_category1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::product_category1::InitAsDefaultInstance();
}

void InitDefaultsproduct_category1() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsproduct_category1Impl);
}

void InitDefaultsproduct_category2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_product_category2_default_instance_;
    new (ptr) ::d5::db1::product_category2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::product_category2::InitAsDefaultInstance();
}

void InitDefaultsproduct_category2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsproduct_category2Impl);
}

void InitDefaultsproduct_category3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_product_category3_default_instance_;
    new (ptr) ::d5::db1::product_category3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::product_category3::InitAsDefaultInstance();
}

void InitDefaultsproduct_category3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsproduct_category3Impl);
}

void InitDefaultssqlite_sequenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::d5::db1::_sqlite_sequence_default_instance_;
    new (ptr) ::d5::db1::sqlite_sequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::d5::db1::sqlite_sequence::InitAsDefaultInstance();
}

void InitDefaultssqlite_sequence() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssqlite_sequenceImpl);
}

::google::protobuf::Metadata file_level_metadata[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, folder_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, is_del_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, ue_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, pak_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_light_style, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, ue_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, mat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, is_del_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, is_private_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, company_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, metallic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, roughness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, emissive_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, is_repeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, publish_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, pak_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, folder_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, sync_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material, dependent_file_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material_category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material_category, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material_category, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material_category, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::asset_material_category, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::effect_mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::effect_mode, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::effect_mode, mode_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::effect_mode, mode_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, white_balance_temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_tint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_tint_shadow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_tint_shadow_blend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_tint_shadow_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_saturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_channel_mixer_red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_channel_mixer_green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_channel_mixer_blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_contrast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_crush_shadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, film_crush_highlights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, scene_color_vignette_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, scene_color_grain_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, scene_color_grain_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_size_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_tint_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_tint_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_tint_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_tint_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_tint_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_dirt_mask_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, bloom_dirt_mask_tint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, auto_exposure_exposure_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, global_illumination_indirect_lighting_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, global_illumination_indirect_lighting_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, ambient_occlusion_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, ambient_occlusion_static_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, ambient_occlusion_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, is_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, min_brightness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::environment_light_template, max_brightness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_color, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_color, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_color, hex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_main_material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_main_material, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_main_material, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_style, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::furniture_style, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_light_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_use_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_cast_shadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_shadow_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_lighting_channels0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_lighting_channels1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, directional_light_lighting_channels2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, sky_light_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, sky_light_light_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, ue_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, natural_material_lighting_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, natural_material_lighting_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::outdoor_light_style, environment_light_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, design_file_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, pak_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, floor_edit_file_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, detail_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, district_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, property_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, room_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, template_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, is_published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, floor_ref_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, floor_ref_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_design_template, floor_ref_height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_district, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_district, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_district, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_district, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_district, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_property_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_property_type, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_property_type, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_room_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_room_type, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_room_type, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_template_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_template_type, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::plan_template_type, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_brand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_brand, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_brand, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category1, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category1, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category2, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category2, category1_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category2, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category3, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category3, category1_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category3, category2_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::product_category3, title_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::sqlite_sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::sqlite_sequence, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::d5::db1::sqlite_sequence, seq_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::d5::db1::asset_light_style)},
  { 15, -1, sizeof(::d5::db1::asset_material)},
  { 43, -1, sizeof(::d5::db1::asset_material_category)},
  { 52, -1, sizeof(::d5::db1::effect_mode)},
  { 60, -1, sizeof(::d5::db1::environment_light_template)},
  { 102, -1, sizeof(::d5::db1::furniture_color)},
  { 110, -1, sizeof(::d5::db1::furniture_main_material)},
  { 117, -1, sizeof(::d5::db1::furniture_style)},
  { 124, -1, sizeof(::d5::db1::outdoor_light_style)},
  { 148, -1, sizeof(::d5::db1::plan_design_template)},
  { 171, -1, sizeof(::d5::db1::plan_district)},
  { 180, -1, sizeof(::d5::db1::plan_property_type)},
  { 187, -1, sizeof(::d5::db1::plan_room_type)},
  { 194, -1, sizeof(::d5::db1::plan_template_type)},
  { 201, -1, sizeof(::d5::db1::product_brand)},
  { 208, -1, sizeof(::d5::db1::product_category1)},
  { 215, -1, sizeof(::d5::db1::product_category2)},
  { 223, -1, sizeof(::d5::db1::product_category3)},
  { 232, -1, sizeof(::d5::db1::sqlite_sequence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_asset_light_style_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_asset_material_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_asset_material_category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_effect_mode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_environment_light_template_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_furniture_color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_furniture_main_material_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_furniture_style_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_outdoor_light_style_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_plan_design_template_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_plan_district_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_plan_property_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_plan_room_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_plan_template_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_product_brand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_product_category1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_product_category2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_product_category3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::d5::db1::_sqlite_sequence_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "db1.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tdb1.proto\022\006d5.db1\"\304\001\n\021asset_light_styl"
      "e\022\n\n\002id\030\001 \001(\t\022\023\n\013folder_name\030\002 \001(\t\022\023\n\013cr"
      "eate_time\030\003 \001(\003\022\023\n\013update_time\030\004 \001(\003\022\016\n\006"
      "is_del\030\005 \001(\005\022\017\n\007ue_path\030\006 \001(\t\022\017\n\007pak_url"
      "\030\007 \001(\t\022\014\n\004type\030\010 \001(\005\022\025\n\rthumbnail_url\030\t "
      "\001(\t\022\r\n\005title\030\n \001(\t\"\313\003\n\016asset_material\022\n\n"
      "\002id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\017\n\007ue_path\030\003 \001("
      "\t\022\020\n\010mat_info\030\004 \001(\t\022\025\n\rthumbnail_url\030\005 \001"
      "(\t\022\016\n\006is_del\030\006 \001(\005\022\022\n\nis_private\030\007 \001(\005\022\017"
      "\n\007user_id\030\010 \001(\005\022\022\n\ncompany_id\030\t \001(\005\022\023\n\013c"
      "reate_time\030\n \001(\003\022\023\n\013update_time\030\013 \001(\003\022\023\n"
      "\013category_id\030\014 \001(\005\022\020\n\010metallic\030\021 \001(\005\022\021\n\t"
      "roughness\030\022 \001(\005\022\026\n\016emissive_color\030\023 \001(\005\022"
      "\014\n\004type\030\024 \001(\005\022\021\n\tis_repeat\030\025 \001(\005\022\016\n\006sour"
      "ce\030\026 \001(\005\022\026\n\016publish_status\030\027 \001(\005\022\017\n\007pak_"
      "url\030\030 \001(\t\022\023\n\013folder_name\030\031 \001(\t\022\023\n\013sync_s"
      "tatus\030\032 \001(\005\022\033\n\023dependent_file_list\030\033 \001(\t"
      "\"V\n\027asset_material_category\022\n\n\002id\030\001 \001(\005\022"
      "\r\n\005title\030\002 \001(\t\022\021\n\tparent_id\030\003 \001(\005\022\r\n\005lev"
      "el\030\004 \001(\005\"\?\n\013effect_mode\022\n\n\002id\030\001 \001(\005\022\021\n\tm"
      "ode_name\030\002 \001(\t\022\021\n\tmode_data\030\003 \001(\t\"\326\010\n\032en"
      "vironment_light_template\022\n\n\002id\030\001 \001(\005\022\r\n\005"
      "title\030\002 \001(\t\022\025\n\rthumbnail_url\030\003 \001(\t\022\032\n\022wh"
      "ite_balance_temp\030\004 \001(\001\022\021\n\tfilm_tint\030\005 \001("
      "\t\022\030\n\020film_tint_shadow\030\006 \001(\t\022\036\n\026film_tint"
      "_shadow_blend\030\007 \001(\001\022\037\n\027film_tint_shadow_"
      "amount\030\010 \001(\001\022\027\n\017film_saturation\030\t \001(\001\022\036\n"
      "\026film_channel_mixer_red\030\n \001(\001\022 \n\030film_ch"
      "annel_mixer_green\030\013 \001(\001\022\037\n\027film_channel_"
      "mixer_blue\030\014 \001(\001\022\025\n\rfilm_contrast\030\r \001(\001\022"
      "\032\n\022film_crush_shadows\030\016 \001(\001\022\035\n\025film_crus"
      "h_highlights\030\017 \001(\001\022&\n\036scene_color_vignet"
      "te_intensity\030\020 \001(\001\022 \n\030scene_color_grain_"
      "jitter\030\021 \001(\001\022#\n\033scene_color_grain_intens"
      "ity\030\022 \001(\001\022\027\n\017bloom_intensity\030\023 \001(\001\022\027\n\017bl"
      "oom_threshold\030\024 \001(\001\022\030\n\020bloom_size_scale\030"
      "\025 \001(\001\022\024\n\014bloom_tint_1\030\026 \001(\t\022\024\n\014bloom_tin"
      "t_2\030\027 \001(\t\022\024\n\014bloom_tint_3\030\030 \001(\t\022\024\n\014bloom"
      "_tint_4\030\031 \001(\t\022\024\n\014bloom_tint_5\030\032 \001(\t\022!\n\031b"
      "loom_dirt_mask_intensity\030\033 \001(\001\022\034\n\024bloom_"
      "dirt_mask_tint\030\034 \001(\t\022#\n\033auto_exposure_ex"
      "posure_bias\030\035 \001(\001\0223\n+global_illumination"
      "_indirect_lighting_color\030\036 \001(\t\0227\n/global"
      "_illumination_indirect_lighting_intensit"
      "y\030\037 \001(\001\022#\n\033ambient_occlusion_intensity\030 "
      " \001(\001\022)\n!ambient_occlusion_static_fractio"
      "n\030! \001(\001\022 \n\030ambient_occlusion_radius\030\" \001("
      "\001\022\017\n\007is_show\030# \001(\005\022\026\n\016min_brightness\030$ \001"
      "(\001\022\026\n\016max_brightness\030% \001(\001\"9\n\017furniture_"
      "color\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\013\n\003hex\030"
      "\003 \001(\t\"4\n\027furniture_main_material\022\n\n\002id\030\001"
      " \001(\005\022\r\n\005title\030\002 \001(\t\",\n\017furniture_style\022\n"
      "\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\"\243\005\n\023outdoor_li"
      "ght_style\022\n\n\002id\030\001 \001(\005\022\"\n\032directional_lig"
      "ht_rotation\030\002 \001(\001\022#\n\033directional_light_i"
      "ntensity\030\003 \001(\001\022%\n\035directional_light_ligh"
      "t_color\030\004 \001(\t\022)\n!directional_light_use_t"
      "emperature\030\005 \001(\005\022%\n\035directional_light_te"
      "mperature\030\006 \001(\001\022&\n\036directional_light_cas"
      "t_shadows\030\007 \001(\005\022%\n\035directional_light_sha"
      "dow_bias\030\010 \001(\001\022,\n$directional_light_ligh"
      "ting_channels0\030\t \001(\005\022,\n$directional_ligh"
      "t_lighting_channels1\030\n \001(\005\022,\n$directiona"
      "l_light_lighting_channels2\030\013 \001(\005\022\033\n\023sky_"
      "light_intensity\030\014 \001(\001\022\035\n\025sky_light_light"
      "_color\030\r \001(\t\022\r\n\005title\030\016 \001(\t\022\025\n\rthumbnail"
      "_url\030\017 \001(\t\022\017\n\007ue_path\030\020 \001(\t\022+\n#natural_m"
      "aterial_lighting_intensity\030\021 \001(\001\022\'\n\037natu"
      "ral_material_lighting_color\030\022 \001(\t\022\034\n\024env"
      "ironment_light_id\030\023 \001(\005\"\233\003\n\024plan_design_"
      "template\022\n\n\002id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\027\n\017d"
      "esign_file_url\030\003 \001(\t\022\014\n\004size\030\004 \001(\001\022\017\n\007pa"
      "k_url\030\006 \001(\t\022\025\n\rthumbnail_url\030\007 \001(\t\022\033\n\023fl"
      "oor_edit_file_url\030\010 \001(\t\022\023\n\013detail_info\030\t"
      " \001(\t\022\023\n\013district_id\030\n \001(\005\022\030\n\020property_ty"
      "pe_id\030\013 \001(\005\022\024\n\014room_type_id\030\014 \001(\005\022\030\n\020tem"
      "plate_type_id\030\r \001(\005\022\023\n\013create_time\030\016 \001(\003"
      "\022\023\n\013update_time\030\017 \001(\003\022\024\n\014is_published\030\020 "
      "\001(\005\022\025\n\rfloor_ref_url\030\021 \001(\t\022\027\n\017floor_ref_"
      "width\030\022 \001(\001\022\030\n\020floor_ref_height\030\023 \001(\001\"K\n"
      "\rplan_district\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t"
      "\022\021\n\tparent_id\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\"/\n\022pl"
      "an_property_type\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 "
      "\001(\t\"+\n\016plan_room_type\022\n\n\002id\030\001 \001(\005\022\r\n\005tit"
      "le\030\002 \001(\t\"/\n\022plan_template_type\022\n\n\002id\030\001 \001"
      "(\005\022\r\n\005title\030\002 \001(\t\"*\n\rproduct_brand\022\n\n\002id"
      "\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\".\n\021product_categor"
      "y1\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\"D\n\021product"
      "_category2\022\n\n\002id\030\001 \001(\005\022\024\n\014category1_id\030\002"
      " \001(\005\022\r\n\005title\030\003 \001(\t\"Z\n\021product_category3"
      "\022\n\n\002id\030\001 \001(\005\022\024\n\014category1_id\030\002 \001(\005\022\024\n\014ca"
      "tegory2_id\030\003 \001(\005\022\r\n\005title\030\004 \001(\t\",\n\017sqlit"
      "e_sequence\022\014\n\004name\030\001 \001(\t\022\013\n\003seq\030\002 \001(\tb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db1.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_db1_2eproto
namespace d5 {
namespace db1 {

// ===================================================================

void asset_light_style::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int asset_light_style::kIdFieldNumber;
const int asset_light_style::kFolderNameFieldNumber;
const int asset_light_style::kCreateTimeFieldNumber;
const int asset_light_style::kUpdateTimeFieldNumber;
const int asset_light_style::kIsDelFieldNumber;
const int asset_light_style::kUePathFieldNumber;
const int asset_light_style::kPakUrlFieldNumber;
const int asset_light_style::kTypeFieldNumber;
const int asset_light_style::kThumbnailUrlFieldNumber;
const int asset_light_style::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

asset_light_style::asset_light_style()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsasset_light_style();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.asset_light_style)
}
asset_light_style::asset_light_style(const asset_light_style& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_name().size() > 0) {
    folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
  }
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ue_path().size() > 0) {
    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pak_url().size() > 0) {
    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.asset_light_style)
}

void asset_light_style::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(type_));
  _cached_size_ = 0;
}

asset_light_style::~asset_light_style() {
  // @@protoc_insertion_point(destructor:d5.db1.asset_light_style)
  SharedDtor();
}

void asset_light_style::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void asset_light_style::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* asset_light_style::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const asset_light_style& asset_light_style::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsasset_light_style();
  return *internal_default_instance();
}


void asset_light_style::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.asset_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool asset_light_style::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.asset_light_style)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string folder_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_name().data(), static_cast<int>(this->folder_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.folder_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_del = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_del_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ue_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ue_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ue_path().data(), static_cast<int>(this->ue_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.ue_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pak_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pak_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pak_url().data(), static_cast<int>(this->pak_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.pak_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_light_style.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.asset_light_style)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.asset_light_style)
  return false;
#undef DO_
}

void asset_light_style::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.asset_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string folder_name = 2;
  if (this->folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_name().data(), static_cast<int>(this->folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.folder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->folder_name(), output);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->create_time(), output);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->update_time(), output);
  }

  // int32 is_del = 5;
  if (this->is_del() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_del(), output);
  }

  // string ue_path = 6;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.ue_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ue_path(), output);
  }

  // string pak_url = 7;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.pak_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pak_url(), output);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->thumbnail_url(), output);
  }

  // string title = 10;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.asset_light_style)
}

::google::protobuf::uint8* asset_light_style::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.asset_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string folder_name = 2;
  if (this->folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_name().data(), static_cast<int>(this->folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.folder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->folder_name(), target);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->create_time(), target);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->update_time(), target);
  }

  // int32 is_del = 5;
  if (this->is_del() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_del(), target);
  }

  // string ue_path = 6;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.ue_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ue_path(), target);
  }

  // string pak_url = 7;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.pak_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pak_url(), target);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thumbnail_url(), target);
  }

  // string title = 10;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_light_style.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.asset_light_style)
  return target;
}

size_t asset_light_style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.asset_light_style)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string folder_name = 2;
  if (this->folder_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_name());
  }

  // string ue_path = 6;
  if (this->ue_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ue_path());
  }

  // string pak_url = 7;
  if (this->pak_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pak_url());
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string title = 10;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  // int32 is_del = 5;
  if (this->is_del() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_del());
  }

  // int32 type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void asset_light_style::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.asset_light_style)
  GOOGLE_DCHECK_NE(&from, this);
  const asset_light_style* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const asset_light_style>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.asset_light_style)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.asset_light_style)
    MergeFrom(*source);
  }
}

void asset_light_style::MergeFrom(const asset_light_style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.asset_light_style)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.folder_name().size() > 0) {

    folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
  }
  if (from.ue_path().size() > 0) {

    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  if (from.pak_url().size() > 0) {

    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
  if (from.is_del() != 0) {
    set_is_del(from.is_del());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void asset_light_style::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.asset_light_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void asset_light_style::CopyFrom(const asset_light_style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.asset_light_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool asset_light_style::IsInitialized() const {
  return true;
}

void asset_light_style::Swap(asset_light_style* other) {
  if (other == this) return;
  InternalSwap(other);
}
void asset_light_style::InternalSwap(asset_light_style* other) {
  using std::swap;
  id_.Swap(&other->id_);
  folder_name_.Swap(&other->folder_name_);
  ue_path_.Swap(&other->ue_path_);
  pak_url_.Swap(&other->pak_url_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  title_.Swap(&other->title_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(is_del_, other->is_del_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata asset_light_style::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void asset_material::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int asset_material::kIdFieldNumber;
const int asset_material::kTitleFieldNumber;
const int asset_material::kUePathFieldNumber;
const int asset_material::kMatInfoFieldNumber;
const int asset_material::kThumbnailUrlFieldNumber;
const int asset_material::kIsDelFieldNumber;
const int asset_material::kIsPrivateFieldNumber;
const int asset_material::kUserIdFieldNumber;
const int asset_material::kCompanyIdFieldNumber;
const int asset_material::kCreateTimeFieldNumber;
const int asset_material::kUpdateTimeFieldNumber;
const int asset_material::kCategoryIdFieldNumber;
const int asset_material::kMetallicFieldNumber;
const int asset_material::kRoughnessFieldNumber;
const int asset_material::kEmissiveColorFieldNumber;
const int asset_material::kTypeFieldNumber;
const int asset_material::kIsRepeatFieldNumber;
const int asset_material::kSourceFieldNumber;
const int asset_material::kPublishStatusFieldNumber;
const int asset_material::kPakUrlFieldNumber;
const int asset_material::kFolderNameFieldNumber;
const int asset_material::kSyncStatusFieldNumber;
const int asset_material::kDependentFileListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

asset_material::asset_material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsasset_material();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.asset_material)
}
asset_material::asset_material(const asset_material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ue_path().size() > 0) {
    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  mat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mat_info().size() > 0) {
    mat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mat_info_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pak_url().size() > 0) {
    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_name().size() > 0) {
    folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
  }
  dependent_file_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dependent_file_list().size() > 0) {
    dependent_file_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dependent_file_list_);
  }
  ::memcpy(&is_del_, &from.is_del_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_status_) -
    reinterpret_cast<char*>(&is_del_)) + sizeof(sync_status_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.asset_material)
}

void asset_material::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dependent_file_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_del_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_status_) -
      reinterpret_cast<char*>(&is_del_)) + sizeof(sync_status_));
  _cached_size_ = 0;
}

asset_material::~asset_material() {
  // @@protoc_insertion_point(destructor:d5.db1.asset_material)
  SharedDtor();
}

void asset_material::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dependent_file_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void asset_material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* asset_material::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const asset_material& asset_material::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsasset_material();
  return *internal_default_instance();
}


void asset_material::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.asset_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_del_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_status_) -
      reinterpret_cast<char*>(&is_del_)) + sizeof(sync_status_));
  _internal_metadata_.Clear();
}

bool asset_material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.asset_material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ue_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ue_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ue_path().data(), static_cast<int>(this->ue_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.ue_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mat_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mat_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mat_info().data(), static_cast<int>(this->mat_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.mat_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_del = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_del_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_private = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_private_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 company_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &company_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 category_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 metallic = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metallic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roughness = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roughness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 emissive_color = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emissive_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_repeat = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 publish_status = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pak_url = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pak_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pak_url().data(), static_cast<int>(this->pak_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.pak_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string folder_name = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_name().data(), static_cast<int>(this->folder_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.folder_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sync_status = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dependent_file_list = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dependent_file_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dependent_file_list().data(), static_cast<int>(this->dependent_file_list().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material.dependent_file_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.asset_material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.asset_material)
  return false;
#undef DO_
}

void asset_material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.asset_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string ue_path = 3;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.ue_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ue_path(), output);
  }

  // string mat_info = 4;
  if (this->mat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mat_info().data(), static_cast<int>(this->mat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.mat_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mat_info(), output);
  }

  // string thumbnail_url = 5;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->thumbnail_url(), output);
  }

  // int32 is_del = 6;
  if (this->is_del() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_del(), output);
  }

  // int32 is_private = 7;
  if (this->is_private() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_private(), output);
  }

  // int32 user_id = 8;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->user_id(), output);
  }

  // int32 company_id = 9;
  if (this->company_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->company_id(), output);
  }

  // int64 create_time = 10;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->create_time(), output);
  }

  // int64 update_time = 11;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->update_time(), output);
  }

  // int32 category_id = 12;
  if (this->category_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->category_id(), output);
  }

  // int32 metallic = 17;
  if (this->metallic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->metallic(), output);
  }

  // int32 roughness = 18;
  if (this->roughness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->roughness(), output);
  }

  // int32 emissive_color = 19;
  if (this->emissive_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->emissive_color(), output);
  }

  // int32 type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->type(), output);
  }

  // int32 is_repeat = 21;
  if (this->is_repeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->is_repeat(), output);
  }

  // int32 source = 22;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->source(), output);
  }

  // int32 publish_status = 23;
  if (this->publish_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->publish_status(), output);
  }

  // string pak_url = 24;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.pak_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->pak_url(), output);
  }

  // string folder_name = 25;
  if (this->folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_name().data(), static_cast<int>(this->folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.folder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->folder_name(), output);
  }

  // int32 sync_status = 26;
  if (this->sync_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->sync_status(), output);
  }

  // string dependent_file_list = 27;
  if (this->dependent_file_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dependent_file_list().data(), static_cast<int>(this->dependent_file_list().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.dependent_file_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->dependent_file_list(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.asset_material)
}

::google::protobuf::uint8* asset_material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.asset_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string ue_path = 3;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.ue_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ue_path(), target);
  }

  // string mat_info = 4;
  if (this->mat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mat_info().data(), static_cast<int>(this->mat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.mat_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mat_info(), target);
  }

  // string thumbnail_url = 5;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->thumbnail_url(), target);
  }

  // int32 is_del = 6;
  if (this->is_del() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_del(), target);
  }

  // int32 is_private = 7;
  if (this->is_private() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_private(), target);
  }

  // int32 user_id = 8;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->user_id(), target);
  }

  // int32 company_id = 9;
  if (this->company_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->company_id(), target);
  }

  // int64 create_time = 10;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->create_time(), target);
  }

  // int64 update_time = 11;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->update_time(), target);
  }

  // int32 category_id = 12;
  if (this->category_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->category_id(), target);
  }

  // int32 metallic = 17;
  if (this->metallic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->metallic(), target);
  }

  // int32 roughness = 18;
  if (this->roughness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->roughness(), target);
  }

  // int32 emissive_color = 19;
  if (this->emissive_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->emissive_color(), target);
  }

  // int32 type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->type(), target);
  }

  // int32 is_repeat = 21;
  if (this->is_repeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->is_repeat(), target);
  }

  // int32 source = 22;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->source(), target);
  }

  // int32 publish_status = 23;
  if (this->publish_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->publish_status(), target);
  }

  // string pak_url = 24;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.pak_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->pak_url(), target);
  }

  // string folder_name = 25;
  if (this->folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_name().data(), static_cast<int>(this->folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.folder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->folder_name(), target);
  }

  // int32 sync_status = 26;
  if (this->sync_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->sync_status(), target);
  }

  // string dependent_file_list = 27;
  if (this->dependent_file_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dependent_file_list().data(), static_cast<int>(this->dependent_file_list().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material.dependent_file_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->dependent_file_list(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.asset_material)
  return target;
}

size_t asset_material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.asset_material)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string ue_path = 3;
  if (this->ue_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ue_path());
  }

  // string mat_info = 4;
  if (this->mat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mat_info());
  }

  // string thumbnail_url = 5;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string pak_url = 24;
  if (this->pak_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pak_url());
  }

  // string folder_name = 25;
  if (this->folder_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_name());
  }

  // string dependent_file_list = 27;
  if (this->dependent_file_list().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dependent_file_list());
  }

  // int32 is_del = 6;
  if (this->is_del() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_del());
  }

  // int32 is_private = 7;
  if (this->is_private() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_private());
  }

  // int32 user_id = 8;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  // int32 company_id = 9;
  if (this->company_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->company_id());
  }

  // int64 create_time = 10;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 update_time = 11;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  // int32 category_id = 12;
  if (this->category_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  // int32 metallic = 17;
  if (this->metallic() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->metallic());
  }

  // int32 roughness = 18;
  if (this->roughness() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roughness());
  }

  // int32 emissive_color = 19;
  if (this->emissive_color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emissive_color());
  }

  // int32 type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 is_repeat = 21;
  if (this->is_repeat() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_repeat());
  }

  // int32 source = 22;
  if (this->source() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  // int32 publish_status = 23;
  if (this->publish_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publish_status());
  }

  // int32 sync_status = 26;
  if (this->sync_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sync_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void asset_material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.asset_material)
  GOOGLE_DCHECK_NE(&from, this);
  const asset_material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const asset_material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.asset_material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.asset_material)
    MergeFrom(*source);
  }
}

void asset_material::MergeFrom(const asset_material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.asset_material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.ue_path().size() > 0) {

    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  if (from.mat_info().size() > 0) {

    mat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mat_info_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.pak_url().size() > 0) {

    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  if (from.folder_name().size() > 0) {

    folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
  }
  if (from.dependent_file_list().size() > 0) {

    dependent_file_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dependent_file_list_);
  }
  if (from.is_del() != 0) {
    set_is_del(from.is_del());
  }
  if (from.is_private() != 0) {
    set_is_private(from.is_private());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.company_id() != 0) {
    set_company_id(from.company_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
  if (from.category_id() != 0) {
    set_category_id(from.category_id());
  }
  if (from.metallic() != 0) {
    set_metallic(from.metallic());
  }
  if (from.roughness() != 0) {
    set_roughness(from.roughness());
  }
  if (from.emissive_color() != 0) {
    set_emissive_color(from.emissive_color());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_repeat() != 0) {
    set_is_repeat(from.is_repeat());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.publish_status() != 0) {
    set_publish_status(from.publish_status());
  }
  if (from.sync_status() != 0) {
    set_sync_status(from.sync_status());
  }
}

void asset_material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.asset_material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void asset_material::CopyFrom(const asset_material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.asset_material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool asset_material::IsInitialized() const {
  return true;
}

void asset_material::Swap(asset_material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void asset_material::InternalSwap(asset_material* other) {
  using std::swap;
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  ue_path_.Swap(&other->ue_path_);
  mat_info_.Swap(&other->mat_info_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  pak_url_.Swap(&other->pak_url_);
  folder_name_.Swap(&other->folder_name_);
  dependent_file_list_.Swap(&other->dependent_file_list_);
  swap(is_del_, other->is_del_);
  swap(is_private_, other->is_private_);
  swap(user_id_, other->user_id_);
  swap(company_id_, other->company_id_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(category_id_, other->category_id_);
  swap(metallic_, other->metallic_);
  swap(roughness_, other->roughness_);
  swap(emissive_color_, other->emissive_color_);
  swap(type_, other->type_);
  swap(is_repeat_, other->is_repeat_);
  swap(source_, other->source_);
  swap(publish_status_, other->publish_status_);
  swap(sync_status_, other->sync_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata asset_material::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void asset_material_category::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int asset_material_category::kIdFieldNumber;
const int asset_material_category::kTitleFieldNumber;
const int asset_material_category::kParentIdFieldNumber;
const int asset_material_category::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

asset_material_category::asset_material_category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsasset_material_category();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.asset_material_category)
}
asset_material_category::asset_material_category(const asset_material_category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.asset_material_category)
}

void asset_material_category::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _cached_size_ = 0;
}

asset_material_category::~asset_material_category() {
  // @@protoc_insertion_point(destructor:d5.db1.asset_material_category)
  SharedDtor();
}

void asset_material_category::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void asset_material_category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* asset_material_category::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const asset_material_category& asset_material_category::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsasset_material_category();
  return *internal_default_instance();
}


void asset_material_category::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.asset_material_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool asset_material_category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.asset_material_category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.asset_material_category.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parent_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.asset_material_category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.asset_material_category)
  return false;
#undef DO_
}

void asset_material_category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.asset_material_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material_category.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.asset_material_category)
}

::google::protobuf::uint8* asset_material_category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.asset_material_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.asset_material_category.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.asset_material_category)
  return target;
}

size_t asset_material_category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.asset_material_category)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void asset_material_category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.asset_material_category)
  GOOGLE_DCHECK_NE(&from, this);
  const asset_material_category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const asset_material_category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.asset_material_category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.asset_material_category)
    MergeFrom(*source);
  }
}

void asset_material_category::MergeFrom(const asset_material_category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.asset_material_category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void asset_material_category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.asset_material_category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void asset_material_category::CopyFrom(const asset_material_category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.asset_material_category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool asset_material_category::IsInitialized() const {
  return true;
}

void asset_material_category::Swap(asset_material_category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void asset_material_category::InternalSwap(asset_material_category* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata asset_material_category::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void effect_mode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int effect_mode::kIdFieldNumber;
const int effect_mode::kModeNameFieldNumber;
const int effect_mode::kModeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

effect_mode::effect_mode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultseffect_mode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.effect_mode)
}
effect_mode::effect_mode(const effect_mode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mode_name().size() > 0) {
    mode_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_name_);
  }
  mode_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mode_data().size() > 0) {
    mode_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_data_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.effect_mode)
}

void effect_mode::SharedCtor() {
  mode_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

effect_mode::~effect_mode() {
  // @@protoc_insertion_point(destructor:d5.db1.effect_mode)
  SharedDtor();
}

void effect_mode::SharedDtor() {
  mode_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void effect_mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* effect_mode::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const effect_mode& effect_mode::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultseffect_mode();
  return *internal_default_instance();
}


void effect_mode::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.effect_mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool effect_mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.effect_mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mode_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode_name().data(), static_cast<int>(this->mode_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.effect_mode.mode_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mode_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode_data().data(), static_cast<int>(this->mode_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.effect_mode.mode_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.effect_mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.effect_mode)
  return false;
#undef DO_
}

void effect_mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.effect_mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string mode_name = 2;
  if (this->mode_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_name().data(), static_cast<int>(this->mode_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.effect_mode.mode_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mode_name(), output);
  }

  // string mode_data = 3;
  if (this->mode_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_data().data(), static_cast<int>(this->mode_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.effect_mode.mode_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mode_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.effect_mode)
}

::google::protobuf::uint8* effect_mode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.effect_mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string mode_name = 2;
  if (this->mode_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_name().data(), static_cast<int>(this->mode_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.effect_mode.mode_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mode_name(), target);
  }

  // string mode_data = 3;
  if (this->mode_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode_data().data(), static_cast<int>(this->mode_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.effect_mode.mode_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mode_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.effect_mode)
  return target;
}

size_t effect_mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.effect_mode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mode_name = 2;
  if (this->mode_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode_name());
  }

  // string mode_data = 3;
  if (this->mode_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode_data());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void effect_mode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.effect_mode)
  GOOGLE_DCHECK_NE(&from, this);
  const effect_mode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const effect_mode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.effect_mode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.effect_mode)
    MergeFrom(*source);
  }
}

void effect_mode::MergeFrom(const effect_mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.effect_mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode_name().size() > 0) {

    mode_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_name_);
  }
  if (from.mode_data().size() > 0) {

    mode_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void effect_mode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.effect_mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void effect_mode::CopyFrom(const effect_mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.effect_mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effect_mode::IsInitialized() const {
  return true;
}

void effect_mode::Swap(effect_mode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void effect_mode::InternalSwap(effect_mode* other) {
  using std::swap;
  mode_name_.Swap(&other->mode_name_);
  mode_data_.Swap(&other->mode_data_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata effect_mode::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void environment_light_template::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int environment_light_template::kIdFieldNumber;
const int environment_light_template::kTitleFieldNumber;
const int environment_light_template::kThumbnailUrlFieldNumber;
const int environment_light_template::kWhiteBalanceTempFieldNumber;
const int environment_light_template::kFilmTintFieldNumber;
const int environment_light_template::kFilmTintShadowFieldNumber;
const int environment_light_template::kFilmTintShadowBlendFieldNumber;
const int environment_light_template::kFilmTintShadowAmountFieldNumber;
const int environment_light_template::kFilmSaturationFieldNumber;
const int environment_light_template::kFilmChannelMixerRedFieldNumber;
const int environment_light_template::kFilmChannelMixerGreenFieldNumber;
const int environment_light_template::kFilmChannelMixerBlueFieldNumber;
const int environment_light_template::kFilmContrastFieldNumber;
const int environment_light_template::kFilmCrushShadowsFieldNumber;
const int environment_light_template::kFilmCrushHighlightsFieldNumber;
const int environment_light_template::kSceneColorVignetteIntensityFieldNumber;
const int environment_light_template::kSceneColorGrainJitterFieldNumber;
const int environment_light_template::kSceneColorGrainIntensityFieldNumber;
const int environment_light_template::kBloomIntensityFieldNumber;
const int environment_light_template::kBloomThresholdFieldNumber;
const int environment_light_template::kBloomSizeScaleFieldNumber;
const int environment_light_template::kBloomTint1FieldNumber;
const int environment_light_template::kBloomTint2FieldNumber;
const int environment_light_template::kBloomTint3FieldNumber;
const int environment_light_template::kBloomTint4FieldNumber;
const int environment_light_template::kBloomTint5FieldNumber;
const int environment_light_template::kBloomDirtMaskIntensityFieldNumber;
const int environment_light_template::kBloomDirtMaskTintFieldNumber;
const int environment_light_template::kAutoExposureExposureBiasFieldNumber;
const int environment_light_template::kGlobalIlluminationIndirectLightingColorFieldNumber;
const int environment_light_template::kGlobalIlluminationIndirectLightingIntensityFieldNumber;
const int environment_light_template::kAmbientOcclusionIntensityFieldNumber;
const int environment_light_template::kAmbientOcclusionStaticFractionFieldNumber;
const int environment_light_template::kAmbientOcclusionRadiusFieldNumber;
const int environment_light_template::kIsShowFieldNumber;
const int environment_light_template::kMinBrightnessFieldNumber;
const int environment_light_template::kMaxBrightnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

environment_light_template::environment_light_template()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsenvironment_light_template();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.environment_light_template)
}
environment_light_template::environment_light_template(const environment_light_template& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  film_tint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.film_tint().size() > 0) {
    film_tint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.film_tint_);
  }
  film_tint_shadow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.film_tint_shadow().size() > 0) {
    film_tint_shadow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.film_tint_shadow_);
  }
  bloom_tint_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_tint_1().size() > 0) {
    bloom_tint_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_1_);
  }
  bloom_tint_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_tint_2().size() > 0) {
    bloom_tint_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_2_);
  }
  bloom_tint_3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_tint_3().size() > 0) {
    bloom_tint_3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_3_);
  }
  bloom_tint_4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_tint_4().size() > 0) {
    bloom_tint_4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_4_);
  }
  bloom_tint_5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_tint_5().size() > 0) {
    bloom_tint_5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_5_);
  }
  bloom_dirt_mask_tint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bloom_dirt_mask_tint().size() > 0) {
    bloom_dirt_mask_tint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_dirt_mask_tint_);
  }
  global_illumination_indirect_lighting_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.global_illumination_indirect_lighting_color().size() > 0) {
    global_illumination_indirect_lighting_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_illumination_indirect_lighting_color_);
  }
  ::memcpy(&white_balance_temp_, &from.white_balance_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_brightness_) -
    reinterpret_cast<char*>(&white_balance_temp_)) + sizeof(max_brightness_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.environment_light_template)
}

void environment_light_template::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_shadow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_dirt_mask_tint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_illumination_indirect_lighting_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&white_balance_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_brightness_) -
      reinterpret_cast<char*>(&white_balance_temp_)) + sizeof(max_brightness_));
  _cached_size_ = 0;
}

environment_light_template::~environment_light_template() {
  // @@protoc_insertion_point(destructor:d5.db1.environment_light_template)
  SharedDtor();
}

void environment_light_template::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_shadow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_dirt_mask_tint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_illumination_indirect_lighting_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void environment_light_template::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* environment_light_template::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const environment_light_template& environment_light_template::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsenvironment_light_template();
  return *internal_default_instance();
}


void environment_light_template::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.environment_light_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  film_tint_shadow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_tint_5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bloom_dirt_mask_tint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_illumination_indirect_lighting_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&white_balance_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_brightness_) -
      reinterpret_cast<char*>(&white_balance_temp_)) + sizeof(max_brightness_));
  _internal_metadata_.Clear();
}

bool environment_light_template::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.environment_light_template)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double white_balance_temp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &white_balance_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string film_tint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_film_tint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->film_tint().data(), static_cast<int>(this->film_tint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.film_tint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string film_tint_shadow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_film_tint_shadow()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->film_tint_shadow().data(), static_cast<int>(this->film_tint_shadow().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.film_tint_shadow"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_tint_shadow_blend = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_tint_shadow_blend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_tint_shadow_amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_tint_shadow_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_saturation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_saturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_channel_mixer_red = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_channel_mixer_red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_channel_mixer_green = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_channel_mixer_green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_channel_mixer_blue = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_channel_mixer_blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_contrast = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_contrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_crush_shadows = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_crush_shadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double film_crush_highlights = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &film_crush_highlights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double scene_color_vignette_intensity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scene_color_vignette_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double scene_color_grain_jitter = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scene_color_grain_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double scene_color_grain_intensity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scene_color_grain_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bloom_intensity = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bloom_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bloom_threshold = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bloom_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bloom_size_scale = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bloom_size_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_tint_1 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_tint_1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_tint_1().data(), static_cast<int>(this->bloom_tint_1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_tint_1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_tint_2 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_tint_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_tint_2().data(), static_cast<int>(this->bloom_tint_2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_tint_2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_tint_3 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_tint_3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_tint_3().data(), static_cast<int>(this->bloom_tint_3().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_tint_3"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_tint_4 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_tint_4()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_tint_4().data(), static_cast<int>(this->bloom_tint_4().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_tint_4"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_tint_5 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_tint_5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_tint_5().data(), static_cast<int>(this->bloom_tint_5().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_tint_5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bloom_dirt_mask_intensity = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bloom_dirt_mask_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bloom_dirt_mask_tint = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloom_dirt_mask_tint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bloom_dirt_mask_tint().data(), static_cast<int>(this->bloom_dirt_mask_tint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.bloom_dirt_mask_tint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double auto_exposure_exposure_bias = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &auto_exposure_exposure_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string global_illumination_indirect_lighting_color = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_illumination_indirect_lighting_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->global_illumination_indirect_lighting_color().data(), static_cast<int>(this->global_illumination_indirect_lighting_color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.environment_light_template.global_illumination_indirect_lighting_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_illumination_indirect_lighting_intensity = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_illumination_indirect_lighting_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ambient_occlusion_intensity = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_occlusion_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ambient_occlusion_static_fraction = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_occlusion_static_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ambient_occlusion_radius = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_occlusion_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_show = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_brightness = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_brightness = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.environment_light_template)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.environment_light_template)
  return false;
#undef DO_
}

void environment_light_template::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.environment_light_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string thumbnail_url = 3;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->thumbnail_url(), output);
  }

  // double white_balance_temp = 4;
  if (this->white_balance_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->white_balance_temp(), output);
  }

  // string film_tint = 5;
  if (this->film_tint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->film_tint().data(), static_cast<int>(this->film_tint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.film_tint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->film_tint(), output);
  }

  // string film_tint_shadow = 6;
  if (this->film_tint_shadow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->film_tint_shadow().data(), static_cast<int>(this->film_tint_shadow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.film_tint_shadow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->film_tint_shadow(), output);
  }

  // double film_tint_shadow_blend = 7;
  if (this->film_tint_shadow_blend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->film_tint_shadow_blend(), output);
  }

  // double film_tint_shadow_amount = 8;
  if (this->film_tint_shadow_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->film_tint_shadow_amount(), output);
  }

  // double film_saturation = 9;
  if (this->film_saturation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->film_saturation(), output);
  }

  // double film_channel_mixer_red = 10;
  if (this->film_channel_mixer_red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->film_channel_mixer_red(), output);
  }

  // double film_channel_mixer_green = 11;
  if (this->film_channel_mixer_green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->film_channel_mixer_green(), output);
  }

  // double film_channel_mixer_blue = 12;
  if (this->film_channel_mixer_blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->film_channel_mixer_blue(), output);
  }

  // double film_contrast = 13;
  if (this->film_contrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->film_contrast(), output);
  }

  // double film_crush_shadows = 14;
  if (this->film_crush_shadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->film_crush_shadows(), output);
  }

  // double film_crush_highlights = 15;
  if (this->film_crush_highlights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->film_crush_highlights(), output);
  }

  // double scene_color_vignette_intensity = 16;
  if (this->scene_color_vignette_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->scene_color_vignette_intensity(), output);
  }

  // double scene_color_grain_jitter = 17;
  if (this->scene_color_grain_jitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->scene_color_grain_jitter(), output);
  }

  // double scene_color_grain_intensity = 18;
  if (this->scene_color_grain_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->scene_color_grain_intensity(), output);
  }

  // double bloom_intensity = 19;
  if (this->bloom_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->bloom_intensity(), output);
  }

  // double bloom_threshold = 20;
  if (this->bloom_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->bloom_threshold(), output);
  }

  // double bloom_size_scale = 21;
  if (this->bloom_size_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bloom_size_scale(), output);
  }

  // string bloom_tint_1 = 22;
  if (this->bloom_tint_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_1().data(), static_cast<int>(this->bloom_tint_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bloom_tint_1(), output);
  }

  // string bloom_tint_2 = 23;
  if (this->bloom_tint_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_2().data(), static_cast<int>(this->bloom_tint_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->bloom_tint_2(), output);
  }

  // string bloom_tint_3 = 24;
  if (this->bloom_tint_3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_3().data(), static_cast<int>(this->bloom_tint_3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->bloom_tint_3(), output);
  }

  // string bloom_tint_4 = 25;
  if (this->bloom_tint_4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_4().data(), static_cast<int>(this->bloom_tint_4().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->bloom_tint_4(), output);
  }

  // string bloom_tint_5 = 26;
  if (this->bloom_tint_5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_5().data(), static_cast<int>(this->bloom_tint_5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->bloom_tint_5(), output);
  }

  // double bloom_dirt_mask_intensity = 27;
  if (this->bloom_dirt_mask_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->bloom_dirt_mask_intensity(), output);
  }

  // string bloom_dirt_mask_tint = 28;
  if (this->bloom_dirt_mask_tint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_dirt_mask_tint().data(), static_cast<int>(this->bloom_dirt_mask_tint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_dirt_mask_tint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->bloom_dirt_mask_tint(), output);
  }

  // double auto_exposure_exposure_bias = 29;
  if (this->auto_exposure_exposure_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->auto_exposure_exposure_bias(), output);
  }

  // string global_illumination_indirect_lighting_color = 30;
  if (this->global_illumination_indirect_lighting_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_illumination_indirect_lighting_color().data(), static_cast<int>(this->global_illumination_indirect_lighting_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.global_illumination_indirect_lighting_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->global_illumination_indirect_lighting_color(), output);
  }

  // double global_illumination_indirect_lighting_intensity = 31;
  if (this->global_illumination_indirect_lighting_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->global_illumination_indirect_lighting_intensity(), output);
  }

  // double ambient_occlusion_intensity = 32;
  if (this->ambient_occlusion_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->ambient_occlusion_intensity(), output);
  }

  // double ambient_occlusion_static_fraction = 33;
  if (this->ambient_occlusion_static_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->ambient_occlusion_static_fraction(), output);
  }

  // double ambient_occlusion_radius = 34;
  if (this->ambient_occlusion_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->ambient_occlusion_radius(), output);
  }

  // int32 is_show = 35;
  if (this->is_show() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->is_show(), output);
  }

  // double min_brightness = 36;
  if (this->min_brightness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->min_brightness(), output);
  }

  // double max_brightness = 37;
  if (this->max_brightness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->max_brightness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.environment_light_template)
}

::google::protobuf::uint8* environment_light_template::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.environment_light_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string thumbnail_url = 3;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail_url(), target);
  }

  // double white_balance_temp = 4;
  if (this->white_balance_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->white_balance_temp(), target);
  }

  // string film_tint = 5;
  if (this->film_tint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->film_tint().data(), static_cast<int>(this->film_tint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.film_tint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->film_tint(), target);
  }

  // string film_tint_shadow = 6;
  if (this->film_tint_shadow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->film_tint_shadow().data(), static_cast<int>(this->film_tint_shadow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.film_tint_shadow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->film_tint_shadow(), target);
  }

  // double film_tint_shadow_blend = 7;
  if (this->film_tint_shadow_blend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->film_tint_shadow_blend(), target);
  }

  // double film_tint_shadow_amount = 8;
  if (this->film_tint_shadow_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->film_tint_shadow_amount(), target);
  }

  // double film_saturation = 9;
  if (this->film_saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->film_saturation(), target);
  }

  // double film_channel_mixer_red = 10;
  if (this->film_channel_mixer_red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->film_channel_mixer_red(), target);
  }

  // double film_channel_mixer_green = 11;
  if (this->film_channel_mixer_green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->film_channel_mixer_green(), target);
  }

  // double film_channel_mixer_blue = 12;
  if (this->film_channel_mixer_blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->film_channel_mixer_blue(), target);
  }

  // double film_contrast = 13;
  if (this->film_contrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->film_contrast(), target);
  }

  // double film_crush_shadows = 14;
  if (this->film_crush_shadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->film_crush_shadows(), target);
  }

  // double film_crush_highlights = 15;
  if (this->film_crush_highlights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->film_crush_highlights(), target);
  }

  // double scene_color_vignette_intensity = 16;
  if (this->scene_color_vignette_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->scene_color_vignette_intensity(), target);
  }

  // double scene_color_grain_jitter = 17;
  if (this->scene_color_grain_jitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->scene_color_grain_jitter(), target);
  }

  // double scene_color_grain_intensity = 18;
  if (this->scene_color_grain_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->scene_color_grain_intensity(), target);
  }

  // double bloom_intensity = 19;
  if (this->bloom_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->bloom_intensity(), target);
  }

  // double bloom_threshold = 20;
  if (this->bloom_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->bloom_threshold(), target);
  }

  // double bloom_size_scale = 21;
  if (this->bloom_size_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bloom_size_scale(), target);
  }

  // string bloom_tint_1 = 22;
  if (this->bloom_tint_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_1().data(), static_cast<int>(this->bloom_tint_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->bloom_tint_1(), target);
  }

  // string bloom_tint_2 = 23;
  if (this->bloom_tint_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_2().data(), static_cast<int>(this->bloom_tint_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->bloom_tint_2(), target);
  }

  // string bloom_tint_3 = 24;
  if (this->bloom_tint_3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_3().data(), static_cast<int>(this->bloom_tint_3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bloom_tint_3(), target);
  }

  // string bloom_tint_4 = 25;
  if (this->bloom_tint_4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_4().data(), static_cast<int>(this->bloom_tint_4().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->bloom_tint_4(), target);
  }

  // string bloom_tint_5 = 26;
  if (this->bloom_tint_5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_tint_5().data(), static_cast<int>(this->bloom_tint_5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_tint_5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->bloom_tint_5(), target);
  }

  // double bloom_dirt_mask_intensity = 27;
  if (this->bloom_dirt_mask_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->bloom_dirt_mask_intensity(), target);
  }

  // string bloom_dirt_mask_tint = 28;
  if (this->bloom_dirt_mask_tint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bloom_dirt_mask_tint().data(), static_cast<int>(this->bloom_dirt_mask_tint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.bloom_dirt_mask_tint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->bloom_dirt_mask_tint(), target);
  }

  // double auto_exposure_exposure_bias = 29;
  if (this->auto_exposure_exposure_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->auto_exposure_exposure_bias(), target);
  }

  // string global_illumination_indirect_lighting_color = 30;
  if (this->global_illumination_indirect_lighting_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_illumination_indirect_lighting_color().data(), static_cast<int>(this->global_illumination_indirect_lighting_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.environment_light_template.global_illumination_indirect_lighting_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->global_illumination_indirect_lighting_color(), target);
  }

  // double global_illumination_indirect_lighting_intensity = 31;
  if (this->global_illumination_indirect_lighting_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->global_illumination_indirect_lighting_intensity(), target);
  }

  // double ambient_occlusion_intensity = 32;
  if (this->ambient_occlusion_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->ambient_occlusion_intensity(), target);
  }

  // double ambient_occlusion_static_fraction = 33;
  if (this->ambient_occlusion_static_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->ambient_occlusion_static_fraction(), target);
  }

  // double ambient_occlusion_radius = 34;
  if (this->ambient_occlusion_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->ambient_occlusion_radius(), target);
  }

  // int32 is_show = 35;
  if (this->is_show() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->is_show(), target);
  }

  // double min_brightness = 36;
  if (this->min_brightness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->min_brightness(), target);
  }

  // double max_brightness = 37;
  if (this->max_brightness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->max_brightness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.environment_light_template)
  return target;
}

size_t environment_light_template::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.environment_light_template)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string thumbnail_url = 3;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string film_tint = 5;
  if (this->film_tint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->film_tint());
  }

  // string film_tint_shadow = 6;
  if (this->film_tint_shadow().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->film_tint_shadow());
  }

  // string bloom_tint_1 = 22;
  if (this->bloom_tint_1().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_tint_1());
  }

  // string bloom_tint_2 = 23;
  if (this->bloom_tint_2().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_tint_2());
  }

  // string bloom_tint_3 = 24;
  if (this->bloom_tint_3().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_tint_3());
  }

  // string bloom_tint_4 = 25;
  if (this->bloom_tint_4().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_tint_4());
  }

  // string bloom_tint_5 = 26;
  if (this->bloom_tint_5().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_tint_5());
  }

  // string bloom_dirt_mask_tint = 28;
  if (this->bloom_dirt_mask_tint().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bloom_dirt_mask_tint());
  }

  // string global_illumination_indirect_lighting_color = 30;
  if (this->global_illumination_indirect_lighting_color().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->global_illumination_indirect_lighting_color());
  }

  // double white_balance_temp = 4;
  if (this->white_balance_temp() != 0) {
    total_size += 1 + 8;
  }

  // double film_tint_shadow_blend = 7;
  if (this->film_tint_shadow_blend() != 0) {
    total_size += 1 + 8;
  }

  // double film_tint_shadow_amount = 8;
  if (this->film_tint_shadow_amount() != 0) {
    total_size += 1 + 8;
  }

  // double film_saturation = 9;
  if (this->film_saturation() != 0) {
    total_size += 1 + 8;
  }

  // double film_channel_mixer_red = 10;
  if (this->film_channel_mixer_red() != 0) {
    total_size += 1 + 8;
  }

  // double film_channel_mixer_green = 11;
  if (this->film_channel_mixer_green() != 0) {
    total_size += 1 + 8;
  }

  // double film_channel_mixer_blue = 12;
  if (this->film_channel_mixer_blue() != 0) {
    total_size += 1 + 8;
  }

  // double film_contrast = 13;
  if (this->film_contrast() != 0) {
    total_size += 1 + 8;
  }

  // double film_crush_shadows = 14;
  if (this->film_crush_shadows() != 0) {
    total_size += 1 + 8;
  }

  // double film_crush_highlights = 15;
  if (this->film_crush_highlights() != 0) {
    total_size += 1 + 8;
  }

  // double scene_color_vignette_intensity = 16;
  if (this->scene_color_vignette_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double scene_color_grain_jitter = 17;
  if (this->scene_color_grain_jitter() != 0) {
    total_size += 2 + 8;
  }

  // double scene_color_grain_intensity = 18;
  if (this->scene_color_grain_intensity() != 0) {
    total_size += 2 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 is_show = 35;
  if (this->is_show() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_show());
  }

  // double bloom_intensity = 19;
  if (this->bloom_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double bloom_threshold = 20;
  if (this->bloom_threshold() != 0) {
    total_size += 2 + 8;
  }

  // double bloom_size_scale = 21;
  if (this->bloom_size_scale() != 0) {
    total_size += 2 + 8;
  }

  // double bloom_dirt_mask_intensity = 27;
  if (this->bloom_dirt_mask_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double auto_exposure_exposure_bias = 29;
  if (this->auto_exposure_exposure_bias() != 0) {
    total_size += 2 + 8;
  }

  // double global_illumination_indirect_lighting_intensity = 31;
  if (this->global_illumination_indirect_lighting_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double ambient_occlusion_intensity = 32;
  if (this->ambient_occlusion_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double ambient_occlusion_static_fraction = 33;
  if (this->ambient_occlusion_static_fraction() != 0) {
    total_size += 2 + 8;
  }

  // double ambient_occlusion_radius = 34;
  if (this->ambient_occlusion_radius() != 0) {
    total_size += 2 + 8;
  }

  // double min_brightness = 36;
  if (this->min_brightness() != 0) {
    total_size += 2 + 8;
  }

  // double max_brightness = 37;
  if (this->max_brightness() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void environment_light_template::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.environment_light_template)
  GOOGLE_DCHECK_NE(&from, this);
  const environment_light_template* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const environment_light_template>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.environment_light_template)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.environment_light_template)
    MergeFrom(*source);
  }
}

void environment_light_template::MergeFrom(const environment_light_template& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.environment_light_template)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.film_tint().size() > 0) {

    film_tint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.film_tint_);
  }
  if (from.film_tint_shadow().size() > 0) {

    film_tint_shadow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.film_tint_shadow_);
  }
  if (from.bloom_tint_1().size() > 0) {

    bloom_tint_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_1_);
  }
  if (from.bloom_tint_2().size() > 0) {

    bloom_tint_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_2_);
  }
  if (from.bloom_tint_3().size() > 0) {

    bloom_tint_3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_3_);
  }
  if (from.bloom_tint_4().size() > 0) {

    bloom_tint_4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_4_);
  }
  if (from.bloom_tint_5().size() > 0) {

    bloom_tint_5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_tint_5_);
  }
  if (from.bloom_dirt_mask_tint().size() > 0) {

    bloom_dirt_mask_tint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bloom_dirt_mask_tint_);
  }
  if (from.global_illumination_indirect_lighting_color().size() > 0) {

    global_illumination_indirect_lighting_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_illumination_indirect_lighting_color_);
  }
  if (from.white_balance_temp() != 0) {
    set_white_balance_temp(from.white_balance_temp());
  }
  if (from.film_tint_shadow_blend() != 0) {
    set_film_tint_shadow_blend(from.film_tint_shadow_blend());
  }
  if (from.film_tint_shadow_amount() != 0) {
    set_film_tint_shadow_amount(from.film_tint_shadow_amount());
  }
  if (from.film_saturation() != 0) {
    set_film_saturation(from.film_saturation());
  }
  if (from.film_channel_mixer_red() != 0) {
    set_film_channel_mixer_red(from.film_channel_mixer_red());
  }
  if (from.film_channel_mixer_green() != 0) {
    set_film_channel_mixer_green(from.film_channel_mixer_green());
  }
  if (from.film_channel_mixer_blue() != 0) {
    set_film_channel_mixer_blue(from.film_channel_mixer_blue());
  }
  if (from.film_contrast() != 0) {
    set_film_contrast(from.film_contrast());
  }
  if (from.film_crush_shadows() != 0) {
    set_film_crush_shadows(from.film_crush_shadows());
  }
  if (from.film_crush_highlights() != 0) {
    set_film_crush_highlights(from.film_crush_highlights());
  }
  if (from.scene_color_vignette_intensity() != 0) {
    set_scene_color_vignette_intensity(from.scene_color_vignette_intensity());
  }
  if (from.scene_color_grain_jitter() != 0) {
    set_scene_color_grain_jitter(from.scene_color_grain_jitter());
  }
  if (from.scene_color_grain_intensity() != 0) {
    set_scene_color_grain_intensity(from.scene_color_grain_intensity());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_show() != 0) {
    set_is_show(from.is_show());
  }
  if (from.bloom_intensity() != 0) {
    set_bloom_intensity(from.bloom_intensity());
  }
  if (from.bloom_threshold() != 0) {
    set_bloom_threshold(from.bloom_threshold());
  }
  if (from.bloom_size_scale() != 0) {
    set_bloom_size_scale(from.bloom_size_scale());
  }
  if (from.bloom_dirt_mask_intensity() != 0) {
    set_bloom_dirt_mask_intensity(from.bloom_dirt_mask_intensity());
  }
  if (from.auto_exposure_exposure_bias() != 0) {
    set_auto_exposure_exposure_bias(from.auto_exposure_exposure_bias());
  }
  if (from.global_illumination_indirect_lighting_intensity() != 0) {
    set_global_illumination_indirect_lighting_intensity(from.global_illumination_indirect_lighting_intensity());
  }
  if (from.ambient_occlusion_intensity() != 0) {
    set_ambient_occlusion_intensity(from.ambient_occlusion_intensity());
  }
  if (from.ambient_occlusion_static_fraction() != 0) {
    set_ambient_occlusion_static_fraction(from.ambient_occlusion_static_fraction());
  }
  if (from.ambient_occlusion_radius() != 0) {
    set_ambient_occlusion_radius(from.ambient_occlusion_radius());
  }
  if (from.min_brightness() != 0) {
    set_min_brightness(from.min_brightness());
  }
  if (from.max_brightness() != 0) {
    set_max_brightness(from.max_brightness());
  }
}

void environment_light_template::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.environment_light_template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void environment_light_template::CopyFrom(const environment_light_template& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.environment_light_template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool environment_light_template::IsInitialized() const {
  return true;
}

void environment_light_template::Swap(environment_light_template* other) {
  if (other == this) return;
  InternalSwap(other);
}
void environment_light_template::InternalSwap(environment_light_template* other) {
  using std::swap;
  title_.Swap(&other->title_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  film_tint_.Swap(&other->film_tint_);
  film_tint_shadow_.Swap(&other->film_tint_shadow_);
  bloom_tint_1_.Swap(&other->bloom_tint_1_);
  bloom_tint_2_.Swap(&other->bloom_tint_2_);
  bloom_tint_3_.Swap(&other->bloom_tint_3_);
  bloom_tint_4_.Swap(&other->bloom_tint_4_);
  bloom_tint_5_.Swap(&other->bloom_tint_5_);
  bloom_dirt_mask_tint_.Swap(&other->bloom_dirt_mask_tint_);
  global_illumination_indirect_lighting_color_.Swap(&other->global_illumination_indirect_lighting_color_);
  swap(white_balance_temp_, other->white_balance_temp_);
  swap(film_tint_shadow_blend_, other->film_tint_shadow_blend_);
  swap(film_tint_shadow_amount_, other->film_tint_shadow_amount_);
  swap(film_saturation_, other->film_saturation_);
  swap(film_channel_mixer_red_, other->film_channel_mixer_red_);
  swap(film_channel_mixer_green_, other->film_channel_mixer_green_);
  swap(film_channel_mixer_blue_, other->film_channel_mixer_blue_);
  swap(film_contrast_, other->film_contrast_);
  swap(film_crush_shadows_, other->film_crush_shadows_);
  swap(film_crush_highlights_, other->film_crush_highlights_);
  swap(scene_color_vignette_intensity_, other->scene_color_vignette_intensity_);
  swap(scene_color_grain_jitter_, other->scene_color_grain_jitter_);
  swap(scene_color_grain_intensity_, other->scene_color_grain_intensity_);
  swap(id_, other->id_);
  swap(is_show_, other->is_show_);
  swap(bloom_intensity_, other->bloom_intensity_);
  swap(bloom_threshold_, other->bloom_threshold_);
  swap(bloom_size_scale_, other->bloom_size_scale_);
  swap(bloom_dirt_mask_intensity_, other->bloom_dirt_mask_intensity_);
  swap(auto_exposure_exposure_bias_, other->auto_exposure_exposure_bias_);
  swap(global_illumination_indirect_lighting_intensity_, other->global_illumination_indirect_lighting_intensity_);
  swap(ambient_occlusion_intensity_, other->ambient_occlusion_intensity_);
  swap(ambient_occlusion_static_fraction_, other->ambient_occlusion_static_fraction_);
  swap(ambient_occlusion_radius_, other->ambient_occlusion_radius_);
  swap(min_brightness_, other->min_brightness_);
  swap(max_brightness_, other->max_brightness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata environment_light_template::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void furniture_color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int furniture_color::kIdFieldNumber;
const int furniture_color::kTitleFieldNumber;
const int furniture_color::kHexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

furniture_color::furniture_color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsfurniture_color();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.furniture_color)
}
furniture_color::furniture_color(const furniture_color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  hex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hex().size() > 0) {
    hex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.furniture_color)
}

void furniture_color::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

furniture_color::~furniture_color() {
  // @@protoc_insertion_point(destructor:d5.db1.furniture_color)
  SharedDtor();
}

void furniture_color::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void furniture_color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* furniture_color::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const furniture_color& furniture_color::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsfurniture_color();
  return *internal_default_instance();
}


void furniture_color::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.furniture_color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool furniture_color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.furniture_color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.furniture_color.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hex().data(), static_cast<int>(this->hex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.furniture_color.hex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.furniture_color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.furniture_color)
  return false;
#undef DO_
}

void furniture_color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.furniture_color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_color.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string hex = 3;
  if (this->hex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex().data(), static_cast<int>(this->hex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_color.hex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.furniture_color)
}

::google::protobuf::uint8* furniture_color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.furniture_color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_color.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string hex = 3;
  if (this->hex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex().data(), static_cast<int>(this->hex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_color.hex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.furniture_color)
  return target;
}

size_t furniture_color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.furniture_color)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string hex = 3;
  if (this->hex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hex());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void furniture_color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.furniture_color)
  GOOGLE_DCHECK_NE(&from, this);
  const furniture_color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const furniture_color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.furniture_color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.furniture_color)
    MergeFrom(*source);
  }
}

void furniture_color::MergeFrom(const furniture_color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.furniture_color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.hex().size() > 0) {

    hex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void furniture_color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.furniture_color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void furniture_color::CopyFrom(const furniture_color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.furniture_color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool furniture_color::IsInitialized() const {
  return true;
}

void furniture_color::Swap(furniture_color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void furniture_color::InternalSwap(furniture_color* other) {
  using std::swap;
  title_.Swap(&other->title_);
  hex_.Swap(&other->hex_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata furniture_color::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void furniture_main_material::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int furniture_main_material::kIdFieldNumber;
const int furniture_main_material::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

furniture_main_material::furniture_main_material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsfurniture_main_material();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.furniture_main_material)
}
furniture_main_material::furniture_main_material(const furniture_main_material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.furniture_main_material)
}

void furniture_main_material::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

furniture_main_material::~furniture_main_material() {
  // @@protoc_insertion_point(destructor:d5.db1.furniture_main_material)
  SharedDtor();
}

void furniture_main_material::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void furniture_main_material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* furniture_main_material::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const furniture_main_material& furniture_main_material::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsfurniture_main_material();
  return *internal_default_instance();
}


void furniture_main_material::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.furniture_main_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool furniture_main_material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.furniture_main_material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.furniture_main_material.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.furniture_main_material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.furniture_main_material)
  return false;
#undef DO_
}

void furniture_main_material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.furniture_main_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_main_material.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.furniture_main_material)
}

::google::protobuf::uint8* furniture_main_material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.furniture_main_material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_main_material.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.furniture_main_material)
  return target;
}

size_t furniture_main_material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.furniture_main_material)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void furniture_main_material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.furniture_main_material)
  GOOGLE_DCHECK_NE(&from, this);
  const furniture_main_material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const furniture_main_material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.furniture_main_material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.furniture_main_material)
    MergeFrom(*source);
  }
}

void furniture_main_material::MergeFrom(const furniture_main_material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.furniture_main_material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void furniture_main_material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.furniture_main_material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void furniture_main_material::CopyFrom(const furniture_main_material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.furniture_main_material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool furniture_main_material::IsInitialized() const {
  return true;
}

void furniture_main_material::Swap(furniture_main_material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void furniture_main_material::InternalSwap(furniture_main_material* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata furniture_main_material::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void furniture_style::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int furniture_style::kIdFieldNumber;
const int furniture_style::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

furniture_style::furniture_style()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsfurniture_style();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.furniture_style)
}
furniture_style::furniture_style(const furniture_style& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.furniture_style)
}

void furniture_style::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

furniture_style::~furniture_style() {
  // @@protoc_insertion_point(destructor:d5.db1.furniture_style)
  SharedDtor();
}

void furniture_style::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void furniture_style::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* furniture_style::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const furniture_style& furniture_style::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsfurniture_style();
  return *internal_default_instance();
}


void furniture_style::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.furniture_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool furniture_style::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.furniture_style)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.furniture_style.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.furniture_style)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.furniture_style)
  return false;
#undef DO_
}

void furniture_style::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.furniture_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_style.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.furniture_style)
}

::google::protobuf::uint8* furniture_style::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.furniture_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.furniture_style.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.furniture_style)
  return target;
}

size_t furniture_style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.furniture_style)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void furniture_style::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.furniture_style)
  GOOGLE_DCHECK_NE(&from, this);
  const furniture_style* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const furniture_style>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.furniture_style)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.furniture_style)
    MergeFrom(*source);
  }
}

void furniture_style::MergeFrom(const furniture_style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.furniture_style)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void furniture_style::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.furniture_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void furniture_style::CopyFrom(const furniture_style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.furniture_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool furniture_style::IsInitialized() const {
  return true;
}

void furniture_style::Swap(furniture_style* other) {
  if (other == this) return;
  InternalSwap(other);
}
void furniture_style::InternalSwap(furniture_style* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata furniture_style::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void outdoor_light_style::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int outdoor_light_style::kIdFieldNumber;
const int outdoor_light_style::kDirectionalLightRotationFieldNumber;
const int outdoor_light_style::kDirectionalLightIntensityFieldNumber;
const int outdoor_light_style::kDirectionalLightLightColorFieldNumber;
const int outdoor_light_style::kDirectionalLightUseTemperatureFieldNumber;
const int outdoor_light_style::kDirectionalLightTemperatureFieldNumber;
const int outdoor_light_style::kDirectionalLightCastShadowsFieldNumber;
const int outdoor_light_style::kDirectionalLightShadowBiasFieldNumber;
const int outdoor_light_style::kDirectionalLightLightingChannels0FieldNumber;
const int outdoor_light_style::kDirectionalLightLightingChannels1FieldNumber;
const int outdoor_light_style::kDirectionalLightLightingChannels2FieldNumber;
const int outdoor_light_style::kSkyLightIntensityFieldNumber;
const int outdoor_light_style::kSkyLightLightColorFieldNumber;
const int outdoor_light_style::kTitleFieldNumber;
const int outdoor_light_style::kThumbnailUrlFieldNumber;
const int outdoor_light_style::kUePathFieldNumber;
const int outdoor_light_style::kNaturalMaterialLightingIntensityFieldNumber;
const int outdoor_light_style::kNaturalMaterialLightingColorFieldNumber;
const int outdoor_light_style::kEnvironmentLightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

outdoor_light_style::outdoor_light_style()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsoutdoor_light_style();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.outdoor_light_style)
}
outdoor_light_style::outdoor_light_style(const outdoor_light_style& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directional_light_light_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directional_light_light_color().size() > 0) {
    directional_light_light_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directional_light_light_color_);
  }
  sky_light_light_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sky_light_light_color().size() > 0) {
    sky_light_light_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_light_light_color_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ue_path().size() > 0) {
    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  natural_material_lighting_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.natural_material_lighting_color().size() > 0) {
    natural_material_lighting_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.natural_material_lighting_color_);
  }
  ::memcpy(&directional_light_rotation_, &from.directional_light_rotation_,
    static_cast<size_t>(reinterpret_cast<char*>(&environment_light_id_) -
    reinterpret_cast<char*>(&directional_light_rotation_)) + sizeof(environment_light_id_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.outdoor_light_style)
}

void outdoor_light_style::SharedCtor() {
  directional_light_light_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_light_light_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  natural_material_lighting_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&directional_light_rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environment_light_id_) -
      reinterpret_cast<char*>(&directional_light_rotation_)) + sizeof(environment_light_id_));
  _cached_size_ = 0;
}

outdoor_light_style::~outdoor_light_style() {
  // @@protoc_insertion_point(destructor:d5.db1.outdoor_light_style)
  SharedDtor();
}

void outdoor_light_style::SharedDtor() {
  directional_light_light_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_light_light_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  natural_material_lighting_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void outdoor_light_style::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* outdoor_light_style::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const outdoor_light_style& outdoor_light_style::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsoutdoor_light_style();
  return *internal_default_instance();
}


void outdoor_light_style::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.outdoor_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directional_light_light_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_light_light_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  natural_material_lighting_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&directional_light_rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environment_light_id_) -
      reinterpret_cast<char*>(&directional_light_rotation_)) + sizeof(environment_light_id_));
  _internal_metadata_.Clear();
}

bool outdoor_light_style::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.outdoor_light_style)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double directional_light_rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &directional_light_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double directional_light_intensity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &directional_light_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string directional_light_light_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directional_light_light_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directional_light_light_color().data(), static_cast<int>(this->directional_light_light_color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.directional_light_light_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 directional_light_use_temperature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directional_light_use_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double directional_light_temperature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &directional_light_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 directional_light_cast_shadows = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directional_light_cast_shadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double directional_light_shadow_bias = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &directional_light_shadow_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 directional_light_lighting_channels0 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directional_light_lighting_channels0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 directional_light_lighting_channels1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directional_light_lighting_channels1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 directional_light_lighting_channels2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directional_light_lighting_channels2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sky_light_intensity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sky_light_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sky_light_light_color = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sky_light_light_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sky_light_light_color().data(), static_cast<int>(this->sky_light_light_color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.sky_light_light_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ue_path = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ue_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ue_path().data(), static_cast<int>(this->ue_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.ue_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double natural_material_lighting_intensity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &natural_material_lighting_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string natural_material_lighting_color = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_natural_material_lighting_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->natural_material_lighting_color().data(), static_cast<int>(this->natural_material_lighting_color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.outdoor_light_style.natural_material_lighting_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 environment_light_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &environment_light_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.outdoor_light_style)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.outdoor_light_style)
  return false;
#undef DO_
}

void outdoor_light_style::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.outdoor_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double directional_light_rotation = 2;
  if (this->directional_light_rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->directional_light_rotation(), output);
  }

  // double directional_light_intensity = 3;
  if (this->directional_light_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->directional_light_intensity(), output);
  }

  // string directional_light_light_color = 4;
  if (this->directional_light_light_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directional_light_light_color().data(), static_cast<int>(this->directional_light_light_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.directional_light_light_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->directional_light_light_color(), output);
  }

  // int32 directional_light_use_temperature = 5;
  if (this->directional_light_use_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->directional_light_use_temperature(), output);
  }

  // double directional_light_temperature = 6;
  if (this->directional_light_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->directional_light_temperature(), output);
  }

  // int32 directional_light_cast_shadows = 7;
  if (this->directional_light_cast_shadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->directional_light_cast_shadows(), output);
  }

  // double directional_light_shadow_bias = 8;
  if (this->directional_light_shadow_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->directional_light_shadow_bias(), output);
  }

  // int32 directional_light_lighting_channels0 = 9;
  if (this->directional_light_lighting_channels0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->directional_light_lighting_channels0(), output);
  }

  // int32 directional_light_lighting_channels1 = 10;
  if (this->directional_light_lighting_channels1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->directional_light_lighting_channels1(), output);
  }

  // int32 directional_light_lighting_channels2 = 11;
  if (this->directional_light_lighting_channels2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->directional_light_lighting_channels2(), output);
  }

  // double sky_light_intensity = 12;
  if (this->sky_light_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sky_light_intensity(), output);
  }

  // string sky_light_light_color = 13;
  if (this->sky_light_light_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sky_light_light_color().data(), static_cast<int>(this->sky_light_light_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.sky_light_light_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sky_light_light_color(), output);
  }

  // string title = 14;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->title(), output);
  }

  // string thumbnail_url = 15;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->thumbnail_url(), output);
  }

  // string ue_path = 16;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.ue_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->ue_path(), output);
  }

  // double natural_material_lighting_intensity = 17;
  if (this->natural_material_lighting_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->natural_material_lighting_intensity(), output);
  }

  // string natural_material_lighting_color = 18;
  if (this->natural_material_lighting_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->natural_material_lighting_color().data(), static_cast<int>(this->natural_material_lighting_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.natural_material_lighting_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->natural_material_lighting_color(), output);
  }

  // int32 environment_light_id = 19;
  if (this->environment_light_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->environment_light_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.outdoor_light_style)
}

::google::protobuf::uint8* outdoor_light_style::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.outdoor_light_style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double directional_light_rotation = 2;
  if (this->directional_light_rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->directional_light_rotation(), target);
  }

  // double directional_light_intensity = 3;
  if (this->directional_light_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->directional_light_intensity(), target);
  }

  // string directional_light_light_color = 4;
  if (this->directional_light_light_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directional_light_light_color().data(), static_cast<int>(this->directional_light_light_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.directional_light_light_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->directional_light_light_color(), target);
  }

  // int32 directional_light_use_temperature = 5;
  if (this->directional_light_use_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->directional_light_use_temperature(), target);
  }

  // double directional_light_temperature = 6;
  if (this->directional_light_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->directional_light_temperature(), target);
  }

  // int32 directional_light_cast_shadows = 7;
  if (this->directional_light_cast_shadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->directional_light_cast_shadows(), target);
  }

  // double directional_light_shadow_bias = 8;
  if (this->directional_light_shadow_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->directional_light_shadow_bias(), target);
  }

  // int32 directional_light_lighting_channels0 = 9;
  if (this->directional_light_lighting_channels0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->directional_light_lighting_channels0(), target);
  }

  // int32 directional_light_lighting_channels1 = 10;
  if (this->directional_light_lighting_channels1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->directional_light_lighting_channels1(), target);
  }

  // int32 directional_light_lighting_channels2 = 11;
  if (this->directional_light_lighting_channels2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->directional_light_lighting_channels2(), target);
  }

  // double sky_light_intensity = 12;
  if (this->sky_light_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sky_light_intensity(), target);
  }

  // string sky_light_light_color = 13;
  if (this->sky_light_light_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sky_light_light_color().data(), static_cast<int>(this->sky_light_light_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.sky_light_light_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sky_light_light_color(), target);
  }

  // string title = 14;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->title(), target);
  }

  // string thumbnail_url = 15;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->thumbnail_url(), target);
  }

  // string ue_path = 16;
  if (this->ue_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_path().data(), static_cast<int>(this->ue_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.ue_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->ue_path(), target);
  }

  // double natural_material_lighting_intensity = 17;
  if (this->natural_material_lighting_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->natural_material_lighting_intensity(), target);
  }

  // string natural_material_lighting_color = 18;
  if (this->natural_material_lighting_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->natural_material_lighting_color().data(), static_cast<int>(this->natural_material_lighting_color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.outdoor_light_style.natural_material_lighting_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->natural_material_lighting_color(), target);
  }

  // int32 environment_light_id = 19;
  if (this->environment_light_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->environment_light_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.outdoor_light_style)
  return target;
}

size_t outdoor_light_style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.outdoor_light_style)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string directional_light_light_color = 4;
  if (this->directional_light_light_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directional_light_light_color());
  }

  // string sky_light_light_color = 13;
  if (this->sky_light_light_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sky_light_light_color());
  }

  // string title = 14;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string thumbnail_url = 15;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string ue_path = 16;
  if (this->ue_path().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ue_path());
  }

  // string natural_material_lighting_color = 18;
  if (this->natural_material_lighting_color().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->natural_material_lighting_color());
  }

  // double directional_light_rotation = 2;
  if (this->directional_light_rotation() != 0) {
    total_size += 1 + 8;
  }

  // double directional_light_intensity = 3;
  if (this->directional_light_intensity() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 directional_light_use_temperature = 5;
  if (this->directional_light_use_temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->directional_light_use_temperature());
  }

  // double directional_light_temperature = 6;
  if (this->directional_light_temperature() != 0) {
    total_size += 1 + 8;
  }

  // double directional_light_shadow_bias = 8;
  if (this->directional_light_shadow_bias() != 0) {
    total_size += 1 + 8;
  }

  // int32 directional_light_cast_shadows = 7;
  if (this->directional_light_cast_shadows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->directional_light_cast_shadows());
  }

  // int32 directional_light_lighting_channels0 = 9;
  if (this->directional_light_lighting_channels0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->directional_light_lighting_channels0());
  }

  // int32 directional_light_lighting_channels1 = 10;
  if (this->directional_light_lighting_channels1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->directional_light_lighting_channels1());
  }

  // int32 directional_light_lighting_channels2 = 11;
  if (this->directional_light_lighting_channels2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->directional_light_lighting_channels2());
  }

  // double sky_light_intensity = 12;
  if (this->sky_light_intensity() != 0) {
    total_size += 1 + 8;
  }

  // double natural_material_lighting_intensity = 17;
  if (this->natural_material_lighting_intensity() != 0) {
    total_size += 2 + 8;
  }

  // int32 environment_light_id = 19;
  if (this->environment_light_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->environment_light_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void outdoor_light_style::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.outdoor_light_style)
  GOOGLE_DCHECK_NE(&from, this);
  const outdoor_light_style* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const outdoor_light_style>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.outdoor_light_style)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.outdoor_light_style)
    MergeFrom(*source);
  }
}

void outdoor_light_style::MergeFrom(const outdoor_light_style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.outdoor_light_style)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directional_light_light_color().size() > 0) {

    directional_light_light_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directional_light_light_color_);
  }
  if (from.sky_light_light_color().size() > 0) {

    sky_light_light_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_light_light_color_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.ue_path().size() > 0) {

    ue_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_path_);
  }
  if (from.natural_material_lighting_color().size() > 0) {

    natural_material_lighting_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.natural_material_lighting_color_);
  }
  if (from.directional_light_rotation() != 0) {
    set_directional_light_rotation(from.directional_light_rotation());
  }
  if (from.directional_light_intensity() != 0) {
    set_directional_light_intensity(from.directional_light_intensity());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.directional_light_use_temperature() != 0) {
    set_directional_light_use_temperature(from.directional_light_use_temperature());
  }
  if (from.directional_light_temperature() != 0) {
    set_directional_light_temperature(from.directional_light_temperature());
  }
  if (from.directional_light_shadow_bias() != 0) {
    set_directional_light_shadow_bias(from.directional_light_shadow_bias());
  }
  if (from.directional_light_cast_shadows() != 0) {
    set_directional_light_cast_shadows(from.directional_light_cast_shadows());
  }
  if (from.directional_light_lighting_channels0() != 0) {
    set_directional_light_lighting_channels0(from.directional_light_lighting_channels0());
  }
  if (from.directional_light_lighting_channels1() != 0) {
    set_directional_light_lighting_channels1(from.directional_light_lighting_channels1());
  }
  if (from.directional_light_lighting_channels2() != 0) {
    set_directional_light_lighting_channels2(from.directional_light_lighting_channels2());
  }
  if (from.sky_light_intensity() != 0) {
    set_sky_light_intensity(from.sky_light_intensity());
  }
  if (from.natural_material_lighting_intensity() != 0) {
    set_natural_material_lighting_intensity(from.natural_material_lighting_intensity());
  }
  if (from.environment_light_id() != 0) {
    set_environment_light_id(from.environment_light_id());
  }
}

void outdoor_light_style::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.outdoor_light_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void outdoor_light_style::CopyFrom(const outdoor_light_style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.outdoor_light_style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool outdoor_light_style::IsInitialized() const {
  return true;
}

void outdoor_light_style::Swap(outdoor_light_style* other) {
  if (other == this) return;
  InternalSwap(other);
}
void outdoor_light_style::InternalSwap(outdoor_light_style* other) {
  using std::swap;
  directional_light_light_color_.Swap(&other->directional_light_light_color_);
  sky_light_light_color_.Swap(&other->sky_light_light_color_);
  title_.Swap(&other->title_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  ue_path_.Swap(&other->ue_path_);
  natural_material_lighting_color_.Swap(&other->natural_material_lighting_color_);
  swap(directional_light_rotation_, other->directional_light_rotation_);
  swap(directional_light_intensity_, other->directional_light_intensity_);
  swap(id_, other->id_);
  swap(directional_light_use_temperature_, other->directional_light_use_temperature_);
  swap(directional_light_temperature_, other->directional_light_temperature_);
  swap(directional_light_shadow_bias_, other->directional_light_shadow_bias_);
  swap(directional_light_cast_shadows_, other->directional_light_cast_shadows_);
  swap(directional_light_lighting_channels0_, other->directional_light_lighting_channels0_);
  swap(directional_light_lighting_channels1_, other->directional_light_lighting_channels1_);
  swap(directional_light_lighting_channels2_, other->directional_light_lighting_channels2_);
  swap(sky_light_intensity_, other->sky_light_intensity_);
  swap(natural_material_lighting_intensity_, other->natural_material_lighting_intensity_);
  swap(environment_light_id_, other->environment_light_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata outdoor_light_style::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plan_design_template::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plan_design_template::kIdFieldNumber;
const int plan_design_template::kTitleFieldNumber;
const int plan_design_template::kDesignFileUrlFieldNumber;
const int plan_design_template::kSizeFieldNumber;
const int plan_design_template::kPakUrlFieldNumber;
const int plan_design_template::kThumbnailUrlFieldNumber;
const int plan_design_template::kFloorEditFileUrlFieldNumber;
const int plan_design_template::kDetailInfoFieldNumber;
const int plan_design_template::kDistrictIdFieldNumber;
const int plan_design_template::kPropertyTypeIdFieldNumber;
const int plan_design_template::kRoomTypeIdFieldNumber;
const int plan_design_template::kTemplateTypeIdFieldNumber;
const int plan_design_template::kCreateTimeFieldNumber;
const int plan_design_template::kUpdateTimeFieldNumber;
const int plan_design_template::kIsPublishedFieldNumber;
const int plan_design_template::kFloorRefUrlFieldNumber;
const int plan_design_template::kFloorRefWidthFieldNumber;
const int plan_design_template::kFloorRefHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plan_design_template::plan_design_template()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsplan_design_template();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.plan_design_template)
}
plan_design_template::plan_design_template(const plan_design_template& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  design_file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.design_file_url().size() > 0) {
    design_file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.design_file_url_);
  }
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pak_url().size() > 0) {
    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  floor_edit_file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.floor_edit_file_url().size() > 0) {
    floor_edit_file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_edit_file_url_);
  }
  detail_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail_info().size() > 0) {
    detail_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_info_);
  }
  floor_ref_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.floor_ref_url().size() > 0) {
    floor_ref_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_ref_url_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_published_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_published_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.plan_design_template)
}

void plan_design_template::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  design_file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_edit_file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_ref_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_published_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_published_));
  _cached_size_ = 0;
}

plan_design_template::~plan_design_template() {
  // @@protoc_insertion_point(destructor:d5.db1.plan_design_template)
  SharedDtor();
}

void plan_design_template::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  design_file_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_edit_file_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_ref_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plan_design_template::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_design_template::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plan_design_template& plan_design_template::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsplan_design_template();
  return *internal_default_instance();
}


void plan_design_template::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.plan_design_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  design_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_edit_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_ref_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_published_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_published_));
  _internal_metadata_.Clear();
}

bool plan_design_template::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.plan_design_template)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string design_file_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_design_file_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->design_file_url().data(), static_cast<int>(this->design_file_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.design_file_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pak_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pak_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pak_url().data(), static_cast<int>(this->pak_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.pak_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string floor_edit_file_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_edit_file_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->floor_edit_file_url().data(), static_cast<int>(this->floor_edit_file_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.floor_edit_file_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail_info().data(), static_cast<int>(this->detail_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.detail_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 district_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &district_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 property_type_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 room_type_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_type_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_published = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string floor_ref_url = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_ref_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->floor_ref_url().data(), static_cast<int>(this->floor_ref_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_design_template.floor_ref_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double floor_ref_width = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floor_ref_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double floor_ref_height = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floor_ref_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.plan_design_template)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.plan_design_template)
  return false;
#undef DO_
}

void plan_design_template::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.plan_design_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string design_file_url = 3;
  if (this->design_file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->design_file_url().data(), static_cast<int>(this->design_file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.design_file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->design_file_url(), output);
  }

  // double size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->size(), output);
  }

  // string pak_url = 6;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.pak_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pak_url(), output);
  }

  // string thumbnail_url = 7;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->thumbnail_url(), output);
  }

  // string floor_edit_file_url = 8;
  if (this->floor_edit_file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_edit_file_url().data(), static_cast<int>(this->floor_edit_file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.floor_edit_file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->floor_edit_file_url(), output);
  }

  // string detail_info = 9;
  if (this->detail_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail_info().data(), static_cast<int>(this->detail_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.detail_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->detail_info(), output);
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->district_id(), output);
  }

  // int32 property_type_id = 11;
  if (this->property_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->property_type_id(), output);
  }

  // int32 room_type_id = 12;
  if (this->room_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->room_type_id(), output);
  }

  // int32 template_type_id = 13;
  if (this->template_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->template_type_id(), output);
  }

  // int64 create_time = 14;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->create_time(), output);
  }

  // int64 update_time = 15;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->update_time(), output);
  }

  // int32 is_published = 16;
  if (this->is_published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->is_published(), output);
  }

  // string floor_ref_url = 17;
  if (this->floor_ref_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_ref_url().data(), static_cast<int>(this->floor_ref_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.floor_ref_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->floor_ref_url(), output);
  }

  // double floor_ref_width = 18;
  if (this->floor_ref_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->floor_ref_width(), output);
  }

  // double floor_ref_height = 19;
  if (this->floor_ref_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->floor_ref_height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.plan_design_template)
}

::google::protobuf::uint8* plan_design_template::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.plan_design_template)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string design_file_url = 3;
  if (this->design_file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->design_file_url().data(), static_cast<int>(this->design_file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.design_file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->design_file_url(), target);
  }

  // double size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->size(), target);
  }

  // string pak_url = 6;
  if (this->pak_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pak_url().data(), static_cast<int>(this->pak_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.pak_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pak_url(), target);
  }

  // string thumbnail_url = 7;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->thumbnail_url(), target);
  }

  // string floor_edit_file_url = 8;
  if (this->floor_edit_file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_edit_file_url().data(), static_cast<int>(this->floor_edit_file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.floor_edit_file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->floor_edit_file_url(), target);
  }

  // string detail_info = 9;
  if (this->detail_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail_info().data(), static_cast<int>(this->detail_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.detail_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->detail_info(), target);
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->district_id(), target);
  }

  // int32 property_type_id = 11;
  if (this->property_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->property_type_id(), target);
  }

  // int32 room_type_id = 12;
  if (this->room_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->room_type_id(), target);
  }

  // int32 template_type_id = 13;
  if (this->template_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->template_type_id(), target);
  }

  // int64 create_time = 14;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->create_time(), target);
  }

  // int64 update_time = 15;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->update_time(), target);
  }

  // int32 is_published = 16;
  if (this->is_published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->is_published(), target);
  }

  // string floor_ref_url = 17;
  if (this->floor_ref_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_ref_url().data(), static_cast<int>(this->floor_ref_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_design_template.floor_ref_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->floor_ref_url(), target);
  }

  // double floor_ref_width = 18;
  if (this->floor_ref_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->floor_ref_width(), target);
  }

  // double floor_ref_height = 19;
  if (this->floor_ref_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->floor_ref_height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.plan_design_template)
  return target;
}

size_t plan_design_template::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.plan_design_template)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string design_file_url = 3;
  if (this->design_file_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->design_file_url());
  }

  // string pak_url = 6;
  if (this->pak_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pak_url());
  }

  // string thumbnail_url = 7;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string floor_edit_file_url = 8;
  if (this->floor_edit_file_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->floor_edit_file_url());
  }

  // string detail_info = 9;
  if (this->detail_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail_info());
  }

  // string floor_ref_url = 17;
  if (this->floor_ref_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->floor_ref_url());
  }

  // double size = 4;
  if (this->size() != 0) {
    total_size += 1 + 8;
  }

  // int32 district_id = 10;
  if (this->district_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->district_id());
  }

  // int32 property_type_id = 11;
  if (this->property_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_type_id());
  }

  // int32 room_type_id = 12;
  if (this->room_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_type_id());
  }

  // int32 template_type_id = 13;
  if (this->template_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->template_type_id());
  }

  // int64 create_time = 14;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 update_time = 15;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  // double floor_ref_width = 18;
  if (this->floor_ref_width() != 0) {
    total_size += 2 + 8;
  }

  // double floor_ref_height = 19;
  if (this->floor_ref_height() != 0) {
    total_size += 2 + 8;
  }

  // int32 is_published = 16;
  if (this->is_published() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_published());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_design_template::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.plan_design_template)
  GOOGLE_DCHECK_NE(&from, this);
  const plan_design_template* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plan_design_template>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.plan_design_template)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.plan_design_template)
    MergeFrom(*source);
  }
}

void plan_design_template::MergeFrom(const plan_design_template& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.plan_design_template)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.design_file_url().size() > 0) {

    design_file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.design_file_url_);
  }
  if (from.pak_url().size() > 0) {

    pak_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pak_url_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.floor_edit_file_url().size() > 0) {

    floor_edit_file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_edit_file_url_);
  }
  if (from.detail_info().size() > 0) {

    detail_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_info_);
  }
  if (from.floor_ref_url().size() > 0) {

    floor_ref_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_ref_url_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.district_id() != 0) {
    set_district_id(from.district_id());
  }
  if (from.property_type_id() != 0) {
    set_property_type_id(from.property_type_id());
  }
  if (from.room_type_id() != 0) {
    set_room_type_id(from.room_type_id());
  }
  if (from.template_type_id() != 0) {
    set_template_type_id(from.template_type_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
  if (from.floor_ref_width() != 0) {
    set_floor_ref_width(from.floor_ref_width());
  }
  if (from.floor_ref_height() != 0) {
    set_floor_ref_height(from.floor_ref_height());
  }
  if (from.is_published() != 0) {
    set_is_published(from.is_published());
  }
}

void plan_design_template::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.plan_design_template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_design_template::CopyFrom(const plan_design_template& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.plan_design_template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_design_template::IsInitialized() const {
  return true;
}

void plan_design_template::Swap(plan_design_template* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plan_design_template::InternalSwap(plan_design_template* other) {
  using std::swap;
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  design_file_url_.Swap(&other->design_file_url_);
  pak_url_.Swap(&other->pak_url_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  floor_edit_file_url_.Swap(&other->floor_edit_file_url_);
  detail_info_.Swap(&other->detail_info_);
  floor_ref_url_.Swap(&other->floor_ref_url_);
  swap(size_, other->size_);
  swap(district_id_, other->district_id_);
  swap(property_type_id_, other->property_type_id_);
  swap(room_type_id_, other->room_type_id_);
  swap(template_type_id_, other->template_type_id_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(floor_ref_width_, other->floor_ref_width_);
  swap(floor_ref_height_, other->floor_ref_height_);
  swap(is_published_, other->is_published_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata plan_design_template::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plan_district::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plan_district::kIdFieldNumber;
const int plan_district::kNameFieldNumber;
const int plan_district::kParentIdFieldNumber;
const int plan_district::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plan_district::plan_district()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsplan_district();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.plan_district)
}
plan_district::plan_district(const plan_district& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.plan_district)
}

void plan_district::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _cached_size_ = 0;
}

plan_district::~plan_district() {
  // @@protoc_insertion_point(destructor:d5.db1.plan_district)
  SharedDtor();
}

void plan_district::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plan_district::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_district::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plan_district& plan_district::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsplan_district();
  return *internal_default_instance();
}


void plan_district::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.plan_district)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool plan_district::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.plan_district)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_district.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parent_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.plan_district)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.plan_district)
  return false;
#undef DO_
}

void plan_district::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.plan_district)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_district.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.plan_district)
}

::google::protobuf::uint8* plan_district::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.plan_district)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_district.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.plan_district)
  return target;
}

size_t plan_district::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.plan_district)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 parent_id = 3;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_district::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.plan_district)
  GOOGLE_DCHECK_NE(&from, this);
  const plan_district* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plan_district>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.plan_district)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.plan_district)
    MergeFrom(*source);
  }
}

void plan_district::MergeFrom(const plan_district& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.plan_district)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void plan_district::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.plan_district)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_district::CopyFrom(const plan_district& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.plan_district)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_district::IsInitialized() const {
  return true;
}

void plan_district::Swap(plan_district* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plan_district::InternalSwap(plan_district* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata plan_district::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plan_property_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plan_property_type::kIdFieldNumber;
const int plan_property_type::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plan_property_type::plan_property_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsplan_property_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.plan_property_type)
}
plan_property_type::plan_property_type(const plan_property_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.plan_property_type)
}

void plan_property_type::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

plan_property_type::~plan_property_type() {
  // @@protoc_insertion_point(destructor:d5.db1.plan_property_type)
  SharedDtor();
}

void plan_property_type::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plan_property_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_property_type::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plan_property_type& plan_property_type::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsplan_property_type();
  return *internal_default_instance();
}


void plan_property_type::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.plan_property_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool plan_property_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.plan_property_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_property_type.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.plan_property_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.plan_property_type)
  return false;
#undef DO_
}

void plan_property_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.plan_property_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_property_type.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.plan_property_type)
}

::google::protobuf::uint8* plan_property_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.plan_property_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_property_type.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.plan_property_type)
  return target;
}

size_t plan_property_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.plan_property_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_property_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.plan_property_type)
  GOOGLE_DCHECK_NE(&from, this);
  const plan_property_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plan_property_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.plan_property_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.plan_property_type)
    MergeFrom(*source);
  }
}

void plan_property_type::MergeFrom(const plan_property_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.plan_property_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void plan_property_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.plan_property_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_property_type::CopyFrom(const plan_property_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.plan_property_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_property_type::IsInitialized() const {
  return true;
}

void plan_property_type::Swap(plan_property_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plan_property_type::InternalSwap(plan_property_type* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata plan_property_type::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plan_room_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plan_room_type::kIdFieldNumber;
const int plan_room_type::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plan_room_type::plan_room_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsplan_room_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.plan_room_type)
}
plan_room_type::plan_room_type(const plan_room_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.plan_room_type)
}

void plan_room_type::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

plan_room_type::~plan_room_type() {
  // @@protoc_insertion_point(destructor:d5.db1.plan_room_type)
  SharedDtor();
}

void plan_room_type::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plan_room_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_room_type::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plan_room_type& plan_room_type::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsplan_room_type();
  return *internal_default_instance();
}


void plan_room_type::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.plan_room_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool plan_room_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.plan_room_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_room_type.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.plan_room_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.plan_room_type)
  return false;
#undef DO_
}

void plan_room_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.plan_room_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_room_type.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.plan_room_type)
}

::google::protobuf::uint8* plan_room_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.plan_room_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_room_type.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.plan_room_type)
  return target;
}

size_t plan_room_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.plan_room_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_room_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.plan_room_type)
  GOOGLE_DCHECK_NE(&from, this);
  const plan_room_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plan_room_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.plan_room_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.plan_room_type)
    MergeFrom(*source);
  }
}

void plan_room_type::MergeFrom(const plan_room_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.plan_room_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void plan_room_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.plan_room_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_room_type::CopyFrom(const plan_room_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.plan_room_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_room_type::IsInitialized() const {
  return true;
}

void plan_room_type::Swap(plan_room_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plan_room_type::InternalSwap(plan_room_type* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata plan_room_type::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void plan_template_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int plan_template_type::kIdFieldNumber;
const int plan_template_type::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

plan_template_type::plan_template_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsplan_template_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.plan_template_type)
}
plan_template_type::plan_template_type(const plan_template_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.plan_template_type)
}

void plan_template_type::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

plan_template_type::~plan_template_type() {
  // @@protoc_insertion_point(destructor:d5.db1.plan_template_type)
  SharedDtor();
}

void plan_template_type::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void plan_template_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_template_type::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const plan_template_type& plan_template_type::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsplan_template_type();
  return *internal_default_instance();
}


void plan_template_type::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.plan_template_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool plan_template_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.plan_template_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.plan_template_type.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.plan_template_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.plan_template_type)
  return false;
#undef DO_
}

void plan_template_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.plan_template_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_template_type.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.plan_template_type)
}

::google::protobuf::uint8* plan_template_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.plan_template_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.plan_template_type.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.plan_template_type)
  return target;
}

size_t plan_template_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.plan_template_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_template_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.plan_template_type)
  GOOGLE_DCHECK_NE(&from, this);
  const plan_template_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const plan_template_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.plan_template_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.plan_template_type)
    MergeFrom(*source);
  }
}

void plan_template_type::MergeFrom(const plan_template_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.plan_template_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void plan_template_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.plan_template_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_template_type::CopyFrom(const plan_template_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.plan_template_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_template_type::IsInitialized() const {
  return true;
}

void plan_template_type::Swap(plan_template_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void plan_template_type::InternalSwap(plan_template_type* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata plan_template_type::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void product_brand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int product_brand::kIdFieldNumber;
const int product_brand::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

product_brand::product_brand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsproduct_brand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.product_brand)
}
product_brand::product_brand(const product_brand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.product_brand)
}

void product_brand::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

product_brand::~product_brand() {
  // @@protoc_insertion_point(destructor:d5.db1.product_brand)
  SharedDtor();
}

void product_brand::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void product_brand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* product_brand::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const product_brand& product_brand::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsproduct_brand();
  return *internal_default_instance();
}


void product_brand::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.product_brand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool product_brand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.product_brand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.product_brand.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.product_brand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.product_brand)
  return false;
#undef DO_
}

void product_brand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.product_brand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_brand.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.product_brand)
}

::google::protobuf::uint8* product_brand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.product_brand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_brand.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.product_brand)
  return target;
}

size_t product_brand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.product_brand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void product_brand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.product_brand)
  GOOGLE_DCHECK_NE(&from, this);
  const product_brand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const product_brand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.product_brand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.product_brand)
    MergeFrom(*source);
  }
}

void product_brand::MergeFrom(const product_brand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.product_brand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void product_brand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.product_brand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void product_brand::CopyFrom(const product_brand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.product_brand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool product_brand::IsInitialized() const {
  return true;
}

void product_brand::Swap(product_brand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void product_brand::InternalSwap(product_brand* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata product_brand::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void product_category1::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int product_category1::kIdFieldNumber;
const int product_category1::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

product_category1::product_category1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsproduct_category1();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.product_category1)
}
product_category1::product_category1(const product_category1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:d5.db1.product_category1)
}

void product_category1::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

product_category1::~product_category1() {
  // @@protoc_insertion_point(destructor:d5.db1.product_category1)
  SharedDtor();
}

void product_category1::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void product_category1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* product_category1::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const product_category1& product_category1::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsproduct_category1();
  return *internal_default_instance();
}


void product_category1::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.product_category1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool product_category1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.product_category1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.product_category1.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.product_category1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.product_category1)
  return false;
#undef DO_
}

void product_category1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.product_category1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category1.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.product_category1)
}

::google::protobuf::uint8* product_category1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.product_category1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category1.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.product_category1)
  return target;
}

size_t product_category1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.product_category1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void product_category1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.product_category1)
  GOOGLE_DCHECK_NE(&from, this);
  const product_category1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const product_category1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.product_category1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.product_category1)
    MergeFrom(*source);
  }
}

void product_category1::MergeFrom(const product_category1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.product_category1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void product_category1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.product_category1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void product_category1::CopyFrom(const product_category1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.product_category1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool product_category1::IsInitialized() const {
  return true;
}

void product_category1::Swap(product_category1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void product_category1::InternalSwap(product_category1* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata product_category1::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void product_category2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int product_category2::kIdFieldNumber;
const int product_category2::kCategory1IdFieldNumber;
const int product_category2::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

product_category2::product_category2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsproduct_category2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.product_category2)
}
product_category2::product_category2(const product_category2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category1_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category1_id_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.product_category2)
}

void product_category2::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category1_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category1_id_));
  _cached_size_ = 0;
}

product_category2::~product_category2() {
  // @@protoc_insertion_point(destructor:d5.db1.product_category2)
  SharedDtor();
}

void product_category2::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void product_category2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* product_category2::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const product_category2& product_category2::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsproduct_category2();
  return *internal_default_instance();
}


void product_category2::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.product_category2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category1_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category1_id_));
  _internal_metadata_.Clear();
}

bool product_category2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.product_category2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 category1_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.product_category2.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.product_category2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.product_category2)
  return false;
#undef DO_
}

void product_category2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.product_category2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category1_id(), output);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category2.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.product_category2)
}

::google::protobuf::uint8* product_category2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.product_category2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category1_id(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category2.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.product_category2)
  return target;
}

size_t product_category2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.product_category2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category1_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void product_category2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.product_category2)
  GOOGLE_DCHECK_NE(&from, this);
  const product_category2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const product_category2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.product_category2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.product_category2)
    MergeFrom(*source);
  }
}

void product_category2::MergeFrom(const product_category2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.product_category2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category1_id() != 0) {
    set_category1_id(from.category1_id());
  }
}

void product_category2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.product_category2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void product_category2::CopyFrom(const product_category2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.product_category2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool product_category2::IsInitialized() const {
  return true;
}

void product_category2::Swap(product_category2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void product_category2::InternalSwap(product_category2* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  swap(category1_id_, other->category1_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata product_category2::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void product_category3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int product_category3::kIdFieldNumber;
const int product_category3::kCategory1IdFieldNumber;
const int product_category3::kCategory2IdFieldNumber;
const int product_category3::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

product_category3::product_category3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultsproduct_category3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.product_category3)
}
product_category3::product_category3(const product_category3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category2_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category2_id_));
  // @@protoc_insertion_point(copy_constructor:d5.db1.product_category3)
}

void product_category3::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category2_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category2_id_));
  _cached_size_ = 0;
}

product_category3::~product_category3() {
  // @@protoc_insertion_point(destructor:d5.db1.product_category3)
  SharedDtor();
}

void product_category3::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void product_category3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* product_category3::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const product_category3& product_category3::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultsproduct_category3();
  return *internal_default_instance();
}


void product_category3::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.product_category3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category2_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category2_id_));
  _internal_metadata_.Clear();
}

bool product_category3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.product_category3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 category1_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 category2_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category2_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.product_category3.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.product_category3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.product_category3)
  return false;
#undef DO_
}

void product_category3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.product_category3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category1_id(), output);
  }

  // int32 category2_id = 3;
  if (this->category2_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->category2_id(), output);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category3.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.product_category3)
}

::google::protobuf::uint8* product_category3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.product_category3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category1_id(), target);
  }

  // int32 category2_id = 3;
  if (this->category2_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->category2_id(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.product_category3.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.product_category3)
  return target;
}

size_t product_category3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.product_category3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 category1_id = 2;
  if (this->category1_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category1_id());
  }

  // int32 category2_id = 3;
  if (this->category2_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category2_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void product_category3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.product_category3)
  GOOGLE_DCHECK_NE(&from, this);
  const product_category3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const product_category3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.product_category3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.product_category3)
    MergeFrom(*source);
  }
}

void product_category3::MergeFrom(const product_category3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.product_category3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category1_id() != 0) {
    set_category1_id(from.category1_id());
  }
  if (from.category2_id() != 0) {
    set_category2_id(from.category2_id());
  }
}

void product_category3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.product_category3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void product_category3::CopyFrom(const product_category3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.product_category3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool product_category3::IsInitialized() const {
  return true;
}

void product_category3::Swap(product_category3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void product_category3::InternalSwap(product_category3* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  swap(category1_id_, other->category1_id_);
  swap(category2_id_, other->category2_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata product_category3::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void sqlite_sequence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sqlite_sequence::kNameFieldNumber;
const int sqlite_sequence::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sqlite_sequence::sqlite_sequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_db1_2eproto::InitDefaultssqlite_sequence();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:d5.db1.sqlite_sequence)
}
sqlite_sequence::sqlite_sequence(const sqlite_sequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  // @@protoc_insertion_point(copy_constructor:d5.db1.sqlite_sequence)
}

void sqlite_sequence::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

sqlite_sequence::~sqlite_sequence() {
  // @@protoc_insertion_point(destructor:d5.db1.sqlite_sequence)
  SharedDtor();
}

void sqlite_sequence::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sqlite_sequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sqlite_sequence::descriptor() {
  ::protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sqlite_sequence& sqlite_sequence::default_instance() {
  ::protobuf_db1_2eproto::InitDefaultssqlite_sequence();
  return *internal_default_instance();
}


void sqlite_sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:d5.db1.sqlite_sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool sqlite_sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:d5.db1.sqlite_sequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.sqlite_sequence.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), static_cast<int>(this->seq().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "d5.db1.sqlite_sequence.seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:d5.db1.sqlite_sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:d5.db1.sqlite_sequence)
  return false;
#undef DO_
}

void sqlite_sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:d5.db1.sqlite_sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.sqlite_sequence.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), static_cast<int>(this->seq().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.sqlite_sequence.seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:d5.db1.sqlite_sequence)
}

::google::protobuf::uint8* sqlite_sequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:d5.db1.sqlite_sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.sqlite_sequence.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), static_cast<int>(this->seq().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "d5.db1.sqlite_sequence.seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d5.db1.sqlite_sequence)
  return target;
}

size_t sqlite_sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d5.db1.sqlite_sequence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string seq = 2;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sqlite_sequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d5.db1.sqlite_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const sqlite_sequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sqlite_sequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d5.db1.sqlite_sequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d5.db1.sqlite_sequence)
    MergeFrom(*source);
  }
}

void sqlite_sequence::MergeFrom(const sqlite_sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d5.db1.sqlite_sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.seq().size() > 0) {

    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
}

void sqlite_sequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d5.db1.sqlite_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sqlite_sequence::CopyFrom(const sqlite_sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d5.db1.sqlite_sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sqlite_sequence::IsInitialized() const {
  return true;
}

void sqlite_sequence::Swap(sqlite_sequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sqlite_sequence::InternalSwap(sqlite_sequence* other) {
  using std::swap;
  name_.Swap(&other->name_);
  seq_.Swap(&other->seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sqlite_sequence::GetMetadata() const {
  protobuf_db1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db1
}  // namespace d5
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::asset_light_style* Arena::Create< ::d5::db1::asset_light_style >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::asset_light_style >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::asset_material* Arena::Create< ::d5::db1::asset_material >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::asset_material >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::asset_material_category* Arena::Create< ::d5::db1::asset_material_category >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::asset_material_category >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::effect_mode* Arena::Create< ::d5::db1::effect_mode >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::effect_mode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::environment_light_template* Arena::Create< ::d5::db1::environment_light_template >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::environment_light_template >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::furniture_color* Arena::Create< ::d5::db1::furniture_color >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::furniture_color >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::furniture_main_material* Arena::Create< ::d5::db1::furniture_main_material >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::furniture_main_material >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::furniture_style* Arena::Create< ::d5::db1::furniture_style >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::furniture_style >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::outdoor_light_style* Arena::Create< ::d5::db1::outdoor_light_style >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::outdoor_light_style >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::plan_design_template* Arena::Create< ::d5::db1::plan_design_template >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::plan_design_template >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::plan_district* Arena::Create< ::d5::db1::plan_district >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::plan_district >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::plan_property_type* Arena::Create< ::d5::db1::plan_property_type >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::plan_property_type >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::plan_room_type* Arena::Create< ::d5::db1::plan_room_type >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::plan_room_type >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::plan_template_type* Arena::Create< ::d5::db1::plan_template_type >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::plan_template_type >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::product_brand* Arena::Create< ::d5::db1::product_brand >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::product_brand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::product_category1* Arena::Create< ::d5::db1::product_category1 >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::product_category1 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::product_category2* Arena::Create< ::d5::db1::product_category2 >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::product_category2 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::product_category3* Arena::Create< ::d5::db1::product_category3 >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::product_category3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::d5::db1::sqlite_sequence* Arena::Create< ::d5::db1::sqlite_sequence >(Arena* arena) {
  return Arena::CreateInternal< ::d5::db1::sqlite_sequence >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
