// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_furniture_color_map.proto

#ifndef PROTOBUF_message_5ffurniture_5fcolor_5fmap_2eproto_INCLUDED
#define PROTOBUF_message_5ffurniture_5fcolor_5fmap_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "db2.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_message_5ffurniture_5fcolor_5fmap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCMessageFurnitureColorMapRequestImpl();
void InitDefaultsCMessageFurnitureColorMapRequest();
void InitDefaultsCMessageFurnitureColorMapResponseImpl();
void InitDefaultsCMessageFurnitureColorMapResponse();
void InitDefaultsCMessageAddFurnitureColorMapRequestImpl();
void InitDefaultsCMessageAddFurnitureColorMapRequest();
void InitDefaultsCMessageAddFurnitureColorMapResponseImpl();
void InitDefaultsCMessageAddFurnitureColorMapResponse();
inline void InitDefaults() {
  InitDefaultsCMessageFurnitureColorMapRequest();
  InitDefaultsCMessageFurnitureColorMapResponse();
  InitDefaultsCMessageAddFurnitureColorMapRequest();
  InitDefaultsCMessageAddFurnitureColorMapResponse();
}
}  // namespace protobuf_message_5ffurniture_5fcolor_5fmap_2eproto
namespace d5 {
namespace db2 {
class CMessageAddFurnitureColorMapRequest;
class CMessageAddFurnitureColorMapRequestDefaultTypeInternal;
extern CMessageAddFurnitureColorMapRequestDefaultTypeInternal _CMessageAddFurnitureColorMapRequest_default_instance_;
class CMessageAddFurnitureColorMapResponse;
class CMessageAddFurnitureColorMapResponseDefaultTypeInternal;
extern CMessageAddFurnitureColorMapResponseDefaultTypeInternal _CMessageAddFurnitureColorMapResponse_default_instance_;
class CMessageFurnitureColorMapRequest;
class CMessageFurnitureColorMapRequestDefaultTypeInternal;
extern CMessageFurnitureColorMapRequestDefaultTypeInternal _CMessageFurnitureColorMapRequest_default_instance_;
class CMessageFurnitureColorMapResponse;
class CMessageFurnitureColorMapResponseDefaultTypeInternal;
extern CMessageFurnitureColorMapResponseDefaultTypeInternal _CMessageFurnitureColorMapResponse_default_instance_;
}  // namespace db2
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::db2::CMessageAddFurnitureColorMapRequest* Arena::Create< ::d5::db2::CMessageAddFurnitureColorMapRequest>(Arena*);
template<> ::d5::db2::CMessageAddFurnitureColorMapResponse* Arena::Create< ::d5::db2::CMessageAddFurnitureColorMapResponse>(Arena*);
template<> ::d5::db2::CMessageFurnitureColorMapRequest* Arena::Create< ::d5::db2::CMessageFurnitureColorMapRequest>(Arena*);
template<> ::d5::db2::CMessageFurnitureColorMapResponse* Arena::Create< ::d5::db2::CMessageFurnitureColorMapResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {
namespace db2 {

// ===================================================================

class CMessageFurnitureColorMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.CMessageFurnitureColorMapRequest) */ {
 public:
  CMessageFurnitureColorMapRequest();
  virtual ~CMessageFurnitureColorMapRequest();

  CMessageFurnitureColorMapRequest(const CMessageFurnitureColorMapRequest& from);

  inline CMessageFurnitureColorMapRequest& operator=(const CMessageFurnitureColorMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageFurnitureColorMapRequest(CMessageFurnitureColorMapRequest&& from) noexcept
    : CMessageFurnitureColorMapRequest() {
    *this = ::std::move(from);
  }

  inline CMessageFurnitureColorMapRequest& operator=(CMessageFurnitureColorMapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFurnitureColorMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageFurnitureColorMapRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageFurnitureColorMapRequest*>(
               &_CMessageFurnitureColorMapRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMessageFurnitureColorMapRequest* other);
  friend void swap(CMessageFurnitureColorMapRequest& a, CMessageFurnitureColorMapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageFurnitureColorMapRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFurnitureColorMapRequest>(NULL);
  }

  CMessageFurnitureColorMapRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFurnitureColorMapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageFurnitureColorMapRequest& from);
  void MergeFrom(const CMessageFurnitureColorMapRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageFurnitureColorMapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string productId = 3;
  void clear_productid();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  #if LANG_CXX11
  void set_productid(::std::string&& value);
  #endif
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.CMessageFurnitureColorMapRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::TableStruct;
  friend void ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::InitDefaultsCMessageFurnitureColorMapRequestImpl();
};
// -------------------------------------------------------------------

class CMessageFurnitureColorMapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.CMessageFurnitureColorMapResponse) */ {
 public:
  CMessageFurnitureColorMapResponse();
  virtual ~CMessageFurnitureColorMapResponse();

  CMessageFurnitureColorMapResponse(const CMessageFurnitureColorMapResponse& from);

  inline CMessageFurnitureColorMapResponse& operator=(const CMessageFurnitureColorMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageFurnitureColorMapResponse(CMessageFurnitureColorMapResponse&& from) noexcept
    : CMessageFurnitureColorMapResponse() {
    *this = ::std::move(from);
  }

  inline CMessageFurnitureColorMapResponse& operator=(CMessageFurnitureColorMapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFurnitureColorMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageFurnitureColorMapResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageFurnitureColorMapResponse*>(
               &_CMessageFurnitureColorMapResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMessageFurnitureColorMapResponse* other);
  friend void swap(CMessageFurnitureColorMapResponse& a, CMessageFurnitureColorMapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageFurnitureColorMapResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFurnitureColorMapResponse>(NULL);
  }

  CMessageFurnitureColorMapResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFurnitureColorMapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageFurnitureColorMapResponse& from);
  void MergeFrom(const CMessageFurnitureColorMapResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageFurnitureColorMapResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.furniture_color_map list = 4;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 4;
  ::d5::db2::furniture_color_map* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >*
      mutable_list();
  const ::d5::db2::furniture_color_map& list(int index) const;
  ::d5::db2::furniture_color_map* add_list();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >&
      list() const;

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.CMessageFurnitureColorMapResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map > list_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::TableStruct;
  friend void ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::InitDefaultsCMessageFurnitureColorMapResponseImpl();
};
// -------------------------------------------------------------------

class CMessageAddFurnitureColorMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.CMessageAddFurnitureColorMapRequest) */ {
 public:
  CMessageAddFurnitureColorMapRequest();
  virtual ~CMessageAddFurnitureColorMapRequest();

  CMessageAddFurnitureColorMapRequest(const CMessageAddFurnitureColorMapRequest& from);

  inline CMessageAddFurnitureColorMapRequest& operator=(const CMessageAddFurnitureColorMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageAddFurnitureColorMapRequest(CMessageAddFurnitureColorMapRequest&& from) noexcept
    : CMessageAddFurnitureColorMapRequest() {
    *this = ::std::move(from);
  }

  inline CMessageAddFurnitureColorMapRequest& operator=(CMessageAddFurnitureColorMapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAddFurnitureColorMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageAddFurnitureColorMapRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageAddFurnitureColorMapRequest*>(
               &_CMessageAddFurnitureColorMapRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMessageAddFurnitureColorMapRequest* other);
  friend void swap(CMessageAddFurnitureColorMapRequest& a, CMessageAddFurnitureColorMapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageAddFurnitureColorMapRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageAddFurnitureColorMapRequest>(NULL);
  }

  CMessageAddFurnitureColorMapRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageAddFurnitureColorMapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageAddFurnitureColorMapRequest& from);
  void MergeFrom(const CMessageAddFurnitureColorMapRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageAddFurnitureColorMapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .d5.db2.furniture_color_map data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::d5::db2::furniture_color_map& data() const;
  ::d5::db2::furniture_color_map* release_data();
  ::d5::db2::furniture_color_map* mutable_data();
  void set_allocated_data(::d5::db2::furniture_color_map* data);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.CMessageAddFurnitureColorMapRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::d5::db2::furniture_color_map* data_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::TableStruct;
  friend void ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::InitDefaultsCMessageAddFurnitureColorMapRequestImpl();
};
// -------------------------------------------------------------------

class CMessageAddFurnitureColorMapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.CMessageAddFurnitureColorMapResponse) */ {
 public:
  CMessageAddFurnitureColorMapResponse();
  virtual ~CMessageAddFurnitureColorMapResponse();

  CMessageAddFurnitureColorMapResponse(const CMessageAddFurnitureColorMapResponse& from);

  inline CMessageAddFurnitureColorMapResponse& operator=(const CMessageAddFurnitureColorMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageAddFurnitureColorMapResponse(CMessageAddFurnitureColorMapResponse&& from) noexcept
    : CMessageAddFurnitureColorMapResponse() {
    *this = ::std::move(from);
  }

  inline CMessageAddFurnitureColorMapResponse& operator=(CMessageAddFurnitureColorMapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAddFurnitureColorMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageAddFurnitureColorMapResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageAddFurnitureColorMapResponse*>(
               &_CMessageAddFurnitureColorMapResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMessageAddFurnitureColorMapResponse* other);
  friend void swap(CMessageAddFurnitureColorMapResponse& a, CMessageAddFurnitureColorMapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageAddFurnitureColorMapResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageAddFurnitureColorMapResponse>(NULL);
  }

  CMessageAddFurnitureColorMapResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageAddFurnitureColorMapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageAddFurnitureColorMapResponse& from);
  void MergeFrom(const CMessageAddFurnitureColorMapResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageAddFurnitureColorMapResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.CMessageAddFurnitureColorMapResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::TableStruct;
  friend void ::protobuf_message_5ffurniture_5fcolor_5fmap_2eproto::InitDefaultsCMessageAddFurnitureColorMapResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMessageFurnitureColorMapRequest

// int32 type = 1;
inline void CMessageFurnitureColorMapRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageFurnitureColorMapRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapRequest.type)
  return type_;
}
inline void CMessageFurnitureColorMapRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapRequest.type)
}

// string uuid = 2;
inline void CMessageFurnitureColorMapRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFurnitureColorMapRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageFurnitureColorMapRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapRequest.uuid)
}
#if LANG_CXX11
inline void CMessageFurnitureColorMapRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.CMessageFurnitureColorMapRequest.uuid)
}
#endif
inline void CMessageFurnitureColorMapRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.CMessageFurnitureColorMapRequest.uuid)
}
inline void CMessageFurnitureColorMapRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.CMessageFurnitureColorMapRequest.uuid)
}
inline ::std::string* CMessageFurnitureColorMapRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageFurnitureColorMapRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFurnitureColorMapRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageFurnitureColorMapRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFurnitureColorMapRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageFurnitureColorMapRequest.uuid)
}

// string productId = 3;
inline void CMessageFurnitureColorMapRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFurnitureColorMapRequest::productid() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapRequest.productId)
  return productid_.GetNoArena();
}
inline void CMessageFurnitureColorMapRequest::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapRequest.productId)
}
#if LANG_CXX11
inline void CMessageFurnitureColorMapRequest::set_productid(::std::string&& value) {
  
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.CMessageFurnitureColorMapRequest.productId)
}
#endif
inline void CMessageFurnitureColorMapRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.CMessageFurnitureColorMapRequest.productId)
}
inline void CMessageFurnitureColorMapRequest::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.CMessageFurnitureColorMapRequest.productId)
}
inline ::std::string* CMessageFurnitureColorMapRequest::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageFurnitureColorMapRequest.productId)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFurnitureColorMapRequest::release_productid() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageFurnitureColorMapRequest.productId)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFurnitureColorMapRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageFurnitureColorMapRequest.productId)
}

// -------------------------------------------------------------------

// CMessageFurnitureColorMapResponse

// int32 type = 1;
inline void CMessageFurnitureColorMapResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageFurnitureColorMapResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapResponse.type)
  return type_;
}
inline void CMessageFurnitureColorMapResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapResponse.type)
}

// string uuid = 2;
inline void CMessageFurnitureColorMapResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFurnitureColorMapResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageFurnitureColorMapResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapResponse.uuid)
}
#if LANG_CXX11
inline void CMessageFurnitureColorMapResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.CMessageFurnitureColorMapResponse.uuid)
}
#endif
inline void CMessageFurnitureColorMapResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.CMessageFurnitureColorMapResponse.uuid)
}
inline void CMessageFurnitureColorMapResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.CMessageFurnitureColorMapResponse.uuid)
}
inline ::std::string* CMessageFurnitureColorMapResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageFurnitureColorMapResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFurnitureColorMapResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageFurnitureColorMapResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFurnitureColorMapResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageFurnitureColorMapResponse.uuid)
}

// int32 state = 3;
inline void CMessageFurnitureColorMapResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageFurnitureColorMapResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapResponse.state)
  return state_;
}
inline void CMessageFurnitureColorMapResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageFurnitureColorMapResponse.state)
}

// repeated .d5.db2.furniture_color_map list = 4;
inline int CMessageFurnitureColorMapResponse::list_size() const {
  return list_.size();
}
inline ::d5::db2::furniture_color_map* CMessageFurnitureColorMapResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageFurnitureColorMapResponse.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >*
CMessageFurnitureColorMapResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.CMessageFurnitureColorMapResponse.list)
  return &list_;
}
inline const ::d5::db2::furniture_color_map& CMessageFurnitureColorMapResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageFurnitureColorMapResponse.list)
  return list_.Get(index);
}
inline ::d5::db2::furniture_color_map* CMessageFurnitureColorMapResponse::add_list() {
  // @@protoc_insertion_point(field_add:d5.db2.CMessageFurnitureColorMapResponse.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >&
CMessageFurnitureColorMapResponse::list() const {
  // @@protoc_insertion_point(field_list:d5.db2.CMessageFurnitureColorMapResponse.list)
  return list_;
}

// -------------------------------------------------------------------

// CMessageAddFurnitureColorMapRequest

// int32 type = 1;
inline void CMessageAddFurnitureColorMapRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageAddFurnitureColorMapRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapRequest.type)
  return type_;
}
inline void CMessageAddFurnitureColorMapRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageAddFurnitureColorMapRequest.type)
}

// string uuid = 2;
inline void CMessageAddFurnitureColorMapRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageAddFurnitureColorMapRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageAddFurnitureColorMapRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
}
#if LANG_CXX11
inline void CMessageAddFurnitureColorMapRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
}
#endif
inline void CMessageAddFurnitureColorMapRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
}
inline void CMessageAddFurnitureColorMapRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
}
inline ::std::string* CMessageAddFurnitureColorMapRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageAddFurnitureColorMapRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageAddFurnitureColorMapRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageAddFurnitureColorMapRequest.uuid)
}

// .d5.db2.furniture_color_map data = 3;
inline bool CMessageAddFurnitureColorMapRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::d5::db2::furniture_color_map& CMessageAddFurnitureColorMapRequest::data() const {
  const ::d5::db2::furniture_color_map* p = data_;
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapRequest.data)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::furniture_color_map*>(
      &::d5::db2::_furniture_color_map_default_instance_);
}
inline ::d5::db2::furniture_color_map* CMessageAddFurnitureColorMapRequest::release_data() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageAddFurnitureColorMapRequest.data)
  
  ::d5::db2::furniture_color_map* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::d5::db2::furniture_color_map* CMessageAddFurnitureColorMapRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = ::google::protobuf::Arena::Create< ::d5::db2::furniture_color_map >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageAddFurnitureColorMapRequest.data)
  return data_;
}
inline void CMessageAddFurnitureColorMapRequest::set_allocated_data(::d5::db2::furniture_color_map* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageAddFurnitureColorMapRequest.data)
}

// -------------------------------------------------------------------

// CMessageAddFurnitureColorMapResponse

// int32 type = 1;
inline void CMessageAddFurnitureColorMapResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageAddFurnitureColorMapResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapResponse.type)
  return type_;
}
inline void CMessageAddFurnitureColorMapResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageAddFurnitureColorMapResponse.type)
}

// string uuid = 2;
inline void CMessageAddFurnitureColorMapResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageAddFurnitureColorMapResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageAddFurnitureColorMapResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
}
#if LANG_CXX11
inline void CMessageAddFurnitureColorMapResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
}
#endif
inline void CMessageAddFurnitureColorMapResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
}
inline void CMessageAddFurnitureColorMapResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
}
inline ::std::string* CMessageAddFurnitureColorMapResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageAddFurnitureColorMapResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageAddFurnitureColorMapResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.CMessageAddFurnitureColorMapResponse.uuid)
}

// int32 state = 3;
inline void CMessageAddFurnitureColorMapResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageAddFurnitureColorMapResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.db2.CMessageAddFurnitureColorMapResponse.state)
  return state_;
}
inline void CMessageAddFurnitureColorMapResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.CMessageAddFurnitureColorMapResponse.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db2
}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5ffurniture_5fcolor_5fmap_2eproto_INCLUDED
