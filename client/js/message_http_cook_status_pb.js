/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.d5.CMessageDesignHttpCookStatus', null, global);
goog.exportSymbol('proto.d5.CMessageHttpCookStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.CMessageHttpCookStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.CMessageHttpCookStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.CMessageHttpCookStatus.displayName = 'proto.d5.CMessageHttpCookStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.CMessageHttpCookStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.CMessageHttpCookStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.CMessageHttpCookStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.CMessageHttpCookStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    designid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    layoutid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    outputurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cookstage: jspb.Message.getFieldWithDefault(msg, 6, 0),
    submittime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    finishtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    trycount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    errorinfo: jspb.Message.getFieldWithDefault(msg, 11, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    hostname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    paksize: jspb.Message.getFieldWithDefault(msg, 14, 0),
    expectedfinishtime: jspb.Message.getFieldWithDefault(msg, 15, 0),
    currenttime: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.CMessageHttpCookStatus}
 */
proto.d5.CMessageHttpCookStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.CMessageHttpCookStatus;
  return proto.d5.CMessageHttpCookStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.CMessageHttpCookStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.CMessageHttpCookStatus}
 */
proto.d5.CMessageHttpCookStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayoutid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputurl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCookstage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSubmittime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFinishtime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrycount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorinfo(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaksize(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpectedfinishtime(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrenttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.CMessageHttpCookStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.CMessageHttpCookStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.CMessageHttpCookStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.CMessageHttpCookStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesignid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLayoutid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOutputurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCookstage();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSubmittime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getFinishtime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTrycount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getErrorinfo();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPaksize();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getExpectedfinishtime();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getCurrenttime();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string designId = 2;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getDesignid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setDesignid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string layoutId = 3;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getLayoutid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setLayoutid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inputUrl = 4;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getInputurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setInputurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string outputUrl = 5;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getOutputurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setOutputurl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 cookStage = 6;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getCookstage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setCookstage = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 submitTime = 7;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getSubmittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setSubmittime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 startTime = 8;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setStarttime = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 finishTime = 9;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getFinishtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setFinishtime = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 tryCount = 10;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getTrycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setTrycount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string errorInfo = 11;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getErrorinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setErrorinfo = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 userId = 12;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string hostName = 13;
 * @return {string}
 */
proto.d5.CMessageHttpCookStatus.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.d5.CMessageHttpCookStatus.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 pakSize = 14;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getPaksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setPaksize = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 expectedFinishTime = 15;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getExpectedfinishtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setExpectedfinishtime = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 currentTime = 16;
 * @return {number}
 */
proto.d5.CMessageHttpCookStatus.prototype.getCurrenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.d5.CMessageHttpCookStatus.prototype.setCurrenttime = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.CMessageDesignHttpCookStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.CMessageDesignHttpCookStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.CMessageDesignHttpCookStatus.displayName = 'proto.d5.CMessageDesignHttpCookStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.CMessageDesignHttpCookStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.CMessageDesignHttpCookStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.CMessageDesignHttpCookStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    designid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    layoutid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    outputurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cookstage: jspb.Message.getFieldWithDefault(msg, 6, 0),
    submittime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    finishtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    trycount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    errorinfo: jspb.Message.getFieldWithDefault(msg, 11, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    hostname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    paksize: jspb.Message.getFieldWithDefault(msg, 14, 0),
    designfileurl: jspb.Message.getFieldWithDefault(msg, 15, ""),
    expectedfinishtime: jspb.Message.getFieldWithDefault(msg, 16, 0),
    currenttime: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.CMessageDesignHttpCookStatus}
 */
proto.d5.CMessageDesignHttpCookStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.CMessageDesignHttpCookStatus;
  return proto.d5.CMessageDesignHttpCookStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.CMessageDesignHttpCookStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.CMessageDesignHttpCookStatus}
 */
proto.d5.CMessageDesignHttpCookStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayoutid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputurl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCookstage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSubmittime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFinishtime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrycount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorinfo(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaksize(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignfileurl(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpectedfinishtime(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrenttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.CMessageDesignHttpCookStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.CMessageDesignHttpCookStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.CMessageDesignHttpCookStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesignid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLayoutid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOutputurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCookstage();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSubmittime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getFinishtime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTrycount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getErrorinfo();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPaksize();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getDesignfileurl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getExpectedfinishtime();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getCurrenttime();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string designId = 2;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getDesignid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setDesignid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string layoutId = 3;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getLayoutid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setLayoutid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inputUrl = 4;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getInputurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setInputurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string outputUrl = 5;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getOutputurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setOutputurl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 cookStage = 6;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getCookstage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setCookstage = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 submitTime = 7;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getSubmittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setSubmittime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 startTime = 8;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setStarttime = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 finishTime = 9;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getFinishtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setFinishtime = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 tryCount = 10;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getTrycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setTrycount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string errorInfo = 11;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getErrorinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setErrorinfo = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 userId = 12;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string hostName = 13;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 pakSize = 14;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getPaksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setPaksize = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string designFileUrl = 15;
 * @return {string}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getDesignfileurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setDesignfileurl = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 expectedFinishTime = 16;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getExpectedfinishtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setExpectedfinishtime = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 currentTime = 17;
 * @return {number}
 */
proto.d5.CMessageDesignHttpCookStatus.prototype.getCurrenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.d5.CMessageDesignHttpCookStatus.prototype.setCurrenttime = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


goog.object.extend(exports, proto.d5);
