/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var db2_pb = require('./db2_pb.js');
var message_common_pb = require('./message_common_pb.js');
goog.exportSymbol('proto.d5.db2.CMessageAddAssetMaterialProcessResponse', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAddAssetMaterialRequest', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAddAssetMaterialResponse', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialDownloadRequest', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialDownloadResponse', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialRequest', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialRequest.Order', null, global);
goog.exportSymbol('proto.d5.db2.CMessageAssetMaterialResponse', null, global);
goog.exportSymbol('proto.d5.db2.CMessageDelAssetMaterialRequest', null, global);
goog.exportSymbol('proto.d5.db2.CMessageDelAssetMaterialResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAssetMaterialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAssetMaterialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAssetMaterialRequest.displayName = 'proto.d5.db2.CMessageAssetMaterialRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAssetMaterialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAssetMaterialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idvalid: jspb.Message.getFieldWithDefault(msg, 4, false),
    companyid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    companyidvalid: jspb.Message.getFieldWithDefault(msg, 6, false),
    categoryid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    categoryidvalid: jspb.Message.getFieldWithDefault(msg, 8, false),
    materialtype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    materialtypevalid: jspb.Message.getFieldWithDefault(msg, 10, false),
    isprivate: jspb.Message.getFieldWithDefault(msg, 11, false),
    updatetime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    pagenum: jspb.Message.getFieldWithDefault(msg, 13, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 14, 0),
    uepath: jspb.Message.getFieldWithDefault(msg, 15, ""),
    uepathvalid: jspb.Message.getFieldWithDefault(msg, 16, false),
    userid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    useridvalid: jspb.Message.getFieldWithDefault(msg, 18, false),
    title: jspb.Message.getFieldWithDefault(msg, 19, ""),
    titlevalid: jspb.Message.getFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAssetMaterialRequest}
 */
proto.d5.db2.CMessageAssetMaterialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAssetMaterialRequest;
  return proto.d5.db2.CMessageAssetMaterialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAssetMaterialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAssetMaterialRequest}
 */
proto.d5.db2.CMessageAssetMaterialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdvalid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompanyid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompanyidvalid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCategoryid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCategoryidvalid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialtype(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaterialtypevalid(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsprivate(value);
      break;
    case 12:
      var value = /** @type {!proto.d5.db2.CMessageAssetMaterialRequest.Order} */ (reader.readEnum());
      msg.setUpdatetime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUepath(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUepathvalid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseridvalid(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTitlevalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAssetMaterialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAssetMaterialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdvalid();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCompanyid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCompanyidvalid();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCategoryid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCategoryidvalid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMaterialtype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMaterialtypevalid();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsprivate();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getUpdatetime();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getPagenum();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getUepath();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getUepathvalid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getUseridvalid();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getTitlevalid();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.Order = {
  NORMAL: 0,
  ASC: 1,
  DESC: 2
};

/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool idValid = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getIdvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setIdvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 companyId = 5;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getCompanyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setCompanyid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool companyIdValid = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getCompanyidvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setCompanyidvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 categoryId = 7;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getCategoryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setCategoryid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool categoryIdValid = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getCategoryidvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setCategoryidvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 materialType = 9;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getMaterialtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setMaterialtype = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool materialTypeValid = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getMaterialtypevalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setMaterialtypevalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isPrivate = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getIsprivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setIsprivate = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional Order updateTime = 12;
 * @return {!proto.d5.db2.CMessageAssetMaterialRequest.Order}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUpdatetime = function() {
  return /** @type {!proto.d5.db2.CMessageAssetMaterialRequest.Order} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.d5.db2.CMessageAssetMaterialRequest.Order} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUpdatetime = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional int32 pageNum = 13;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getPagenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setPagenum = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 pageSize = 14;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string uePath = 15;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUepath = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional bool uePathValid = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUepathvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUepathvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional int32 userId = 17;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool userIdValid = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getUseridvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setUseridvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional string title = 19;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional bool titleValid = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.getTitlevalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.d5.db2.CMessageAssetMaterialRequest.prototype.setTitlevalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAssetMaterialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.d5.db2.CMessageAssetMaterialResponse.repeatedFields_, null);
};
goog.inherits(proto.d5.db2.CMessageAssetMaterialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAssetMaterialResponse.displayName = 'proto.d5.db2.CMessageAssetMaterialResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.d5.db2.CMessageAssetMaterialResponse.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAssetMaterialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAssetMaterialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    listList: jspb.Message.toObjectList(msg.getListList(),
    db2_pb.asset_material.toObject, includeInstance),
    filelistList: jspb.Message.toObjectList(msg.getFilelistList(),
    message_common_pb.CMessageDependentPakList.toObject, includeInstance),
    pagenum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pagetotal: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAssetMaterialResponse}
 */
proto.d5.db2.CMessageAssetMaterialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAssetMaterialResponse;
  return proto.d5.db2.CMessageAssetMaterialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAssetMaterialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAssetMaterialResponse}
 */
proto.d5.db2.CMessageAssetMaterialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 4:
      var value = new db2_pb.asset_material;
      reader.readMessage(value,db2_pb.asset_material.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 5:
      var value = new message_common_pb.CMessageDependentPakList;
      reader.readMessage(value,message_common_pb.CMessageDependentPakList.deserializeBinaryFromReader);
      msg.addFilelist(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagetotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAssetMaterialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAssetMaterialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      db2_pb.asset_material.serializeBinaryToWriter
    );
  }
  f = message.getFilelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      message_common_pb.CMessageDependentPakList.serializeBinaryToWriter
    );
  }
  f = message.getPagenum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPagetotal();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated asset_material list = 4;
 * @return {!Array<!proto.d5.db2.asset_material>}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getListList = function() {
  return /** @type{!Array<!proto.d5.db2.asset_material>} */ (
    jspb.Message.getRepeatedWrapperField(this, db2_pb.asset_material, 4));
};


/** @param {!Array<!proto.d5.db2.asset_material>} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.d5.db2.asset_material=} opt_value
 * @param {number=} opt_index
 * @return {!proto.d5.db2.asset_material}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.d5.db2.asset_material, opt_index);
};


proto.d5.db2.CMessageAssetMaterialResponse.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * repeated d5.CMessageDependentPakList fileList = 5;
 * @return {!Array<!proto.d5.CMessageDependentPakList>}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getFilelistList = function() {
  return /** @type{!Array<!proto.d5.CMessageDependentPakList>} */ (
    jspb.Message.getRepeatedWrapperField(this, message_common_pb.CMessageDependentPakList, 5));
};


/** @param {!Array<!proto.d5.CMessageDependentPakList>} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setFilelistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.d5.CMessageDependentPakList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.d5.CMessageDependentPakList}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.addFilelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.d5.CMessageDependentPakList, opt_index);
};


proto.d5.db2.CMessageAssetMaterialResponse.prototype.clearFilelistList = function() {
  this.setFilelistList([]);
};


/**
 * optional int32 pageNum = 6;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getPagenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setPagenum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 pageTotal = 7;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.getPagetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialResponse.prototype.setPagetotal = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAddAssetMaterialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAddAssetMaterialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAddAssetMaterialRequest.displayName = 'proto.d5.db2.CMessageAddAssetMaterialRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAddAssetMaterialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAddAssetMaterialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && db2_pb.asset_material.toObject(includeInstance, f),
    filelist: (f = msg.getFilelist()) && message_common_pb.CMessageDependentPakList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialRequest}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAddAssetMaterialRequest;
  return proto.d5.db2.CMessageAddAssetMaterialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialRequest}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = new db2_pb.asset_material;
      reader.readMessage(value,db2_pb.asset_material.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new message_common_pb.CMessageDependentPakList;
      reader.readMessage(value,message_common_pb.CMessageDependentPakList.deserializeBinaryFromReader);
      msg.setFilelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAddAssetMaterialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      db2_pb.asset_material.serializeBinaryToWriter
    );
  }
  f = message.getFilelist();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      message_common_pb.CMessageDependentPakList.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional asset_material data = 3;
 * @return {?proto.d5.db2.asset_material}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.getData = function() {
  return /** @type{?proto.d5.db2.asset_material} */ (
    jspb.Message.getWrapperField(this, db2_pb.asset_material, 3));
};


/** @param {?proto.d5.db2.asset_material|undefined} value */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional d5.CMessageDependentPakList fileList = 4;
 * @return {?proto.d5.CMessageDependentPakList}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.getFilelist = function() {
  return /** @type{?proto.d5.CMessageDependentPakList} */ (
    jspb.Message.getWrapperField(this, message_common_pb.CMessageDependentPakList, 4));
};


/** @param {?proto.d5.CMessageDependentPakList|undefined} value */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.setFilelist = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.clearFilelist = function() {
  this.setFilelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.d5.db2.CMessageAddAssetMaterialRequest.prototype.hasFilelist = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAddAssetMaterialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAddAssetMaterialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAddAssetMaterialResponse.displayName = 'proto.d5.db2.CMessageAddAssetMaterialResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAddAssetMaterialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAddAssetMaterialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialResponse}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAddAssetMaterialResponse;
  return proto.d5.db2.CMessageAddAssetMaterialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialResponse}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAddAssetMaterialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAddAssetMaterialResponse.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAddAssetMaterialProcessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAddAssetMaterialProcessResponse.displayName = 'proto.d5.db2.CMessageAddAssetMaterialProcessResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAddAssetMaterialProcessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAddAssetMaterialProcessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    percent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialProcessResponse}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAddAssetMaterialProcessResponse;
  return proto.d5.db2.CMessageAddAssetMaterialProcessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialProcessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAddAssetMaterialProcessResponse}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAddAssetMaterialProcessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAddAssetMaterialProcessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 percent = 3;
 * @return {number}
 */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAddAssetMaterialProcessResponse.prototype.setPercent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageDelAssetMaterialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageDelAssetMaterialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageDelAssetMaterialRequest.displayName = 'proto.d5.db2.CMessageDelAssetMaterialRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageDelAssetMaterialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageDelAssetMaterialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageDelAssetMaterialRequest}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageDelAssetMaterialRequest;
  return proto.d5.db2.CMessageDelAssetMaterialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageDelAssetMaterialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageDelAssetMaterialRequest}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageDelAssetMaterialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageDelAssetMaterialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageDelAssetMaterialRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageDelAssetMaterialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageDelAssetMaterialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageDelAssetMaterialResponse.displayName = 'proto.d5.db2.CMessageDelAssetMaterialResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageDelAssetMaterialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageDelAssetMaterialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageDelAssetMaterialResponse}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageDelAssetMaterialResponse;
  return proto.d5.db2.CMessageDelAssetMaterialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageDelAssetMaterialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageDelAssetMaterialResponse}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageDelAssetMaterialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageDelAssetMaterialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageDelAssetMaterialResponse.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAssetMaterialDownloadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAssetMaterialDownloadRequest.displayName = 'proto.d5.db2.CMessageAssetMaterialDownloadRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAssetMaterialDownloadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadRequest}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAssetMaterialDownloadRequest;
  return proto.d5.db2.CMessageAssetMaterialDownloadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadRequest}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAssetMaterialDownloadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialDownloadRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAssetMaterialDownloadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAssetMaterialDownloadResponse.displayName = 'proto.d5.db2.CMessageAssetMaterialDownloadResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAssetMaterialDownloadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filelist: (f = msg.getFilelist()) && message_common_pb.CMessageDependentPakList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadResponse}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAssetMaterialDownloadResponse;
  return proto.d5.db2.CMessageAssetMaterialDownloadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadResponse}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 4:
      var value = new message_common_pb.CMessageDependentPakList;
      reader.readMessage(value,message_common_pb.CMessageDependentPakList.deserializeBinaryFromReader);
      msg.setFilelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAssetMaterialDownloadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFilelist();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      message_common_pb.CMessageDependentPakList.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional d5.CMessageDependentPakList fileList = 4;
 * @return {?proto.d5.CMessageDependentPakList}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.getFilelist = function() {
  return /** @type{?proto.d5.CMessageDependentPakList} */ (
    jspb.Message.getWrapperField(this, message_common_pb.CMessageDependentPakList, 4));
};


/** @param {?proto.d5.CMessageDependentPakList|undefined} value */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.setFilelist = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.clearFilelist = function() {
  this.setFilelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.d5.db2.CMessageAssetMaterialDownloadResponse.prototype.hasFilelist = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.displayName = 'proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    percent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse;
  return proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 percent = 3;
 * @return {number}
 */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.d5.db2.CMessageAssetMaterialDownloadProcessResponse.prototype.setPercent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.d5.db2);
