// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_feed_back.proto

#ifndef PROTOBUF_message_5ffeed_5fback_2eproto_INCLUDED
#define PROTOBUF_message_5ffeed_5fback_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_5ffeed_5fback_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCMessageFeedBackRequestImpl();
void InitDefaultsCMessageFeedBackRequest();
void InitDefaultsCMessageFeedBackReponseImpl();
void InitDefaultsCMessageFeedBackReponse();
void InitDefaultsCMessageEventTrackingRequestImpl();
void InitDefaultsCMessageEventTrackingRequest();
void InitDefaultsCMessageEventTrackingResponseImpl();
void InitDefaultsCMessageEventTrackingResponse();
void InitDefaultsCMessageImpressionsRequestImpl();
void InitDefaultsCMessageImpressionsRequest();
void InitDefaultsCMessageImpressionsResponseImpl();
void InitDefaultsCMessageImpressionsResponse();
void InitDefaultsCMessageActionRequestImpl();
void InitDefaultsCMessageActionRequest();
void InitDefaultsCMessageActionResponseImpl();
void InitDefaultsCMessageActionResponse();
inline void InitDefaults() {
  InitDefaultsCMessageFeedBackRequest();
  InitDefaultsCMessageFeedBackReponse();
  InitDefaultsCMessageEventTrackingRequest();
  InitDefaultsCMessageEventTrackingResponse();
  InitDefaultsCMessageImpressionsRequest();
  InitDefaultsCMessageImpressionsResponse();
  InitDefaultsCMessageActionRequest();
  InitDefaultsCMessageActionResponse();
}
}  // namespace protobuf_message_5ffeed_5fback_2eproto
namespace d5 {
class CMessageActionRequest;
class CMessageActionRequestDefaultTypeInternal;
extern CMessageActionRequestDefaultTypeInternal _CMessageActionRequest_default_instance_;
class CMessageActionResponse;
class CMessageActionResponseDefaultTypeInternal;
extern CMessageActionResponseDefaultTypeInternal _CMessageActionResponse_default_instance_;
class CMessageEventTrackingRequest;
class CMessageEventTrackingRequestDefaultTypeInternal;
extern CMessageEventTrackingRequestDefaultTypeInternal _CMessageEventTrackingRequest_default_instance_;
class CMessageEventTrackingResponse;
class CMessageEventTrackingResponseDefaultTypeInternal;
extern CMessageEventTrackingResponseDefaultTypeInternal _CMessageEventTrackingResponse_default_instance_;
class CMessageFeedBackReponse;
class CMessageFeedBackReponseDefaultTypeInternal;
extern CMessageFeedBackReponseDefaultTypeInternal _CMessageFeedBackReponse_default_instance_;
class CMessageFeedBackRequest;
class CMessageFeedBackRequestDefaultTypeInternal;
extern CMessageFeedBackRequestDefaultTypeInternal _CMessageFeedBackRequest_default_instance_;
class CMessageImpressionsRequest;
class CMessageImpressionsRequestDefaultTypeInternal;
extern CMessageImpressionsRequestDefaultTypeInternal _CMessageImpressionsRequest_default_instance_;
class CMessageImpressionsResponse;
class CMessageImpressionsResponseDefaultTypeInternal;
extern CMessageImpressionsResponseDefaultTypeInternal _CMessageImpressionsResponse_default_instance_;
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::CMessageActionRequest* Arena::Create< ::d5::CMessageActionRequest>(Arena*);
template<> ::d5::CMessageActionResponse* Arena::Create< ::d5::CMessageActionResponse>(Arena*);
template<> ::d5::CMessageEventTrackingRequest* Arena::Create< ::d5::CMessageEventTrackingRequest>(Arena*);
template<> ::d5::CMessageEventTrackingResponse* Arena::Create< ::d5::CMessageEventTrackingResponse>(Arena*);
template<> ::d5::CMessageFeedBackReponse* Arena::Create< ::d5::CMessageFeedBackReponse>(Arena*);
template<> ::d5::CMessageFeedBackRequest* Arena::Create< ::d5::CMessageFeedBackRequest>(Arena*);
template<> ::d5::CMessageImpressionsRequest* Arena::Create< ::d5::CMessageImpressionsRequest>(Arena*);
template<> ::d5::CMessageImpressionsResponse* Arena::Create< ::d5::CMessageImpressionsResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {

// ===================================================================

class CMessageFeedBackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageFeedBackRequest) */ {
 public:
  CMessageFeedBackRequest();
  virtual ~CMessageFeedBackRequest();

  CMessageFeedBackRequest(const CMessageFeedBackRequest& from);

  inline CMessageFeedBackRequest& operator=(const CMessageFeedBackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageFeedBackRequest(CMessageFeedBackRequest&& from) noexcept
    : CMessageFeedBackRequest() {
    *this = ::std::move(from);
  }

  inline CMessageFeedBackRequest& operator=(CMessageFeedBackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFeedBackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageFeedBackRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageFeedBackRequest*>(
               &_CMessageFeedBackRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMessageFeedBackRequest* other);
  friend void swap(CMessageFeedBackRequest& a, CMessageFeedBackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageFeedBackRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFeedBackRequest>(NULL);
  }

  CMessageFeedBackRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFeedBackRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageFeedBackRequest& from);
  void MergeFrom(const CMessageFeedBackRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageFeedBackRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string protocalVersion = 3;
  void clear_protocalversion();
  static const int kProtocalVersionFieldNumber = 3;
  const ::std::string& protocalversion() const;
  void set_protocalversion(const ::std::string& value);
  #if LANG_CXX11
  void set_protocalversion(::std::string&& value);
  #endif
  void set_protocalversion(const char* value);
  void set_protocalversion(const char* value, size_t size);
  ::std::string* mutable_protocalversion();
  ::std::string* release_protocalversion();
  void set_allocated_protocalversion(::std::string* protocalversion);

  // string hitType = 4;
  void clear_hittype();
  static const int kHitTypeFieldNumber = 4;
  const ::std::string& hittype() const;
  void set_hittype(const ::std::string& value);
  #if LANG_CXX11
  void set_hittype(::std::string&& value);
  #endif
  void set_hittype(const char* value);
  void set_hittype(const char* value, size_t size);
  ::std::string* mutable_hittype();
  ::std::string* release_hittype();
  void set_allocated_hittype(::std::string* hittype);

  // string trackingId = 5;
  void clear_trackingid();
  static const int kTrackingIdFieldNumber = 5;
  const ::std::string& trackingid() const;
  void set_trackingid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackingid(::std::string&& value);
  #endif
  void set_trackingid(const char* value);
  void set_trackingid(const char* value, size_t size);
  ::std::string* mutable_trackingid();
  ::std::string* release_trackingid();
  void set_allocated_trackingid(::std::string* trackingid);

  // string clientId = 6;
  void clear_clientid();
  static const int kClientIdFieldNumber = 6;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string userId = 7;
  void clear_userid();
  static const int kUserIdFieldNumber = 7;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string appName = 8;
  void clear_appname();
  static const int kAppNameFieldNumber = 8;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // string screenName = 9;
  void clear_screenname();
  static const int kScreenNameFieldNumber = 9;
  const ::std::string& screenname() const;
  void set_screenname(const ::std::string& value);
  #if LANG_CXX11
  void set_screenname(::std::string&& value);
  #endif
  void set_screenname(const char* value);
  void set_screenname(const char* value, size_t size);
  ::std::string* mutable_screenname();
  ::std::string* release_screenname();
  void set_allocated_screenname(::std::string* screenname);

  // string appVersion = 10;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 10;
  const ::std::string& appversion() const;
  void set_appversion(const ::std::string& value);
  #if LANG_CXX11
  void set_appversion(::std::string&& value);
  #endif
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  ::std::string* mutable_appversion();
  ::std::string* release_appversion();
  void set_allocated_appversion(::std::string* appversion);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageFeedBackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr protocalversion_;
  ::google::protobuf::internal::ArenaStringPtr hittype_;
  ::google::protobuf::internal::ArenaStringPtr trackingid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr screenname_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageFeedBackRequestImpl();
};
// -------------------------------------------------------------------

class CMessageFeedBackReponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageFeedBackReponse) */ {
 public:
  CMessageFeedBackReponse();
  virtual ~CMessageFeedBackReponse();

  CMessageFeedBackReponse(const CMessageFeedBackReponse& from);

  inline CMessageFeedBackReponse& operator=(const CMessageFeedBackReponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageFeedBackReponse(CMessageFeedBackReponse&& from) noexcept
    : CMessageFeedBackReponse() {
    *this = ::std::move(from);
  }

  inline CMessageFeedBackReponse& operator=(CMessageFeedBackReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFeedBackReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageFeedBackReponse* internal_default_instance() {
    return reinterpret_cast<const CMessageFeedBackReponse*>(
               &_CMessageFeedBackReponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMessageFeedBackReponse* other);
  friend void swap(CMessageFeedBackReponse& a, CMessageFeedBackReponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageFeedBackReponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFeedBackReponse>(NULL);
  }

  CMessageFeedBackReponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageFeedBackReponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageFeedBackReponse& from);
  void MergeFrom(const CMessageFeedBackReponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageFeedBackReponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageFeedBackReponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageFeedBackReponseImpl();
};
// -------------------------------------------------------------------

class CMessageEventTrackingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageEventTrackingRequest) */ {
 public:
  CMessageEventTrackingRequest();
  virtual ~CMessageEventTrackingRequest();

  CMessageEventTrackingRequest(const CMessageEventTrackingRequest& from);

  inline CMessageEventTrackingRequest& operator=(const CMessageEventTrackingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageEventTrackingRequest(CMessageEventTrackingRequest&& from) noexcept
    : CMessageEventTrackingRequest() {
    *this = ::std::move(from);
  }

  inline CMessageEventTrackingRequest& operator=(CMessageEventTrackingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageEventTrackingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageEventTrackingRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageEventTrackingRequest*>(
               &_CMessageEventTrackingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMessageEventTrackingRequest* other);
  friend void swap(CMessageEventTrackingRequest& a, CMessageEventTrackingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageEventTrackingRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageEventTrackingRequest>(NULL);
  }

  CMessageEventTrackingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageEventTrackingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageEventTrackingRequest& from);
  void MergeFrom(const CMessageEventTrackingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageEventTrackingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string trackingId = 4;
  void clear_trackingid();
  static const int kTrackingIdFieldNumber = 4;
  const ::std::string& trackingid() const;
  void set_trackingid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackingid(::std::string&& value);
  #endif
  void set_trackingid(const char* value);
  void set_trackingid(const char* value, size_t size);
  ::std::string* mutable_trackingid();
  ::std::string* release_trackingid();
  void set_allocated_trackingid(::std::string* trackingid);

  // string clientId = 5;
  void clear_clientid();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string event = 6;
  void clear_event();
  static const int kEventFieldNumber = 6;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // string category = 7;
  void clear_category();
  static const int kCategoryFieldNumber = 7;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string action = 8;
  void clear_action();
  static const int kActionFieldNumber = 8;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string label = 9;
  void clear_label();
  static const int kLabelFieldNumber = 9;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string value = 10;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageEventTrackingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr trackingid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageEventTrackingRequestImpl();
};
// -------------------------------------------------------------------

class CMessageEventTrackingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageEventTrackingResponse) */ {
 public:
  CMessageEventTrackingResponse();
  virtual ~CMessageEventTrackingResponse();

  CMessageEventTrackingResponse(const CMessageEventTrackingResponse& from);

  inline CMessageEventTrackingResponse& operator=(const CMessageEventTrackingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageEventTrackingResponse(CMessageEventTrackingResponse&& from) noexcept
    : CMessageEventTrackingResponse() {
    *this = ::std::move(from);
  }

  inline CMessageEventTrackingResponse& operator=(CMessageEventTrackingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageEventTrackingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageEventTrackingResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageEventTrackingResponse*>(
               &_CMessageEventTrackingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMessageEventTrackingResponse* other);
  friend void swap(CMessageEventTrackingResponse& a, CMessageEventTrackingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageEventTrackingResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageEventTrackingResponse>(NULL);
  }

  CMessageEventTrackingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageEventTrackingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageEventTrackingResponse& from);
  void MergeFrom(const CMessageEventTrackingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageEventTrackingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageEventTrackingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageEventTrackingResponseImpl();
};
// -------------------------------------------------------------------

class CMessageImpressionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageImpressionsRequest) */ {
 public:
  CMessageImpressionsRequest();
  virtual ~CMessageImpressionsRequest();

  CMessageImpressionsRequest(const CMessageImpressionsRequest& from);

  inline CMessageImpressionsRequest& operator=(const CMessageImpressionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageImpressionsRequest(CMessageImpressionsRequest&& from) noexcept
    : CMessageImpressionsRequest() {
    *this = ::std::move(from);
  }

  inline CMessageImpressionsRequest& operator=(CMessageImpressionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageImpressionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageImpressionsRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageImpressionsRequest*>(
               &_CMessageImpressionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CMessageImpressionsRequest* other);
  friend void swap(CMessageImpressionsRequest& a, CMessageImpressionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageImpressionsRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageImpressionsRequest>(NULL);
  }

  CMessageImpressionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageImpressionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageImpressionsRequest& from);
  void MergeFrom(const CMessageImpressionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageImpressionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string trackingId = 4;
  void clear_trackingid();
  static const int kTrackingIdFieldNumber = 4;
  const ::std::string& trackingid() const;
  void set_trackingid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackingid(::std::string&& value);
  #endif
  void set_trackingid(const char* value);
  void set_trackingid(const char* value, size_t size);
  ::std::string* mutable_trackingid();
  ::std::string* release_trackingid();
  void set_allocated_trackingid(::std::string* trackingid);

  // string clientId = 5;
  void clear_clientid();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string pageView = 6;
  void clear_pageview();
  static const int kPageViewFieldNumber = 6;
  const ::std::string& pageview() const;
  void set_pageview(const ::std::string& value);
  #if LANG_CXX11
  void set_pageview(::std::string&& value);
  #endif
  void set_pageview(const char* value);
  void set_pageview(const char* value, size_t size);
  ::std::string* mutable_pageview();
  ::std::string* release_pageview();
  void set_allocated_pageview(::std::string* pageview);

  // string hostName = 7;
  void clear_hostname();
  static const int kHostNameFieldNumber = 7;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // string page = 8;
  void clear_page();
  static const int kPageFieldNumber = 8;
  const ::std::string& page() const;
  void set_page(const ::std::string& value);
  #if LANG_CXX11
  void set_page(::std::string&& value);
  #endif
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  ::std::string* mutable_page();
  ::std::string* release_page();
  void set_allocated_page(::std::string* page);

  // string title = 9;
  void clear_title();
  static const int kTitleFieldNumber = 9;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string impression = 10;
  void clear_impression();
  static const int kImpressionFieldNumber = 10;
  const ::std::string& impression() const;
  void set_impression(const ::std::string& value);
  #if LANG_CXX11
  void set_impression(::std::string&& value);
  #endif
  void set_impression(const char* value);
  void set_impression(const char* value, size_t size);
  ::std::string* mutable_impression();
  ::std::string* release_impression();
  void set_allocated_impression(::std::string* impression);

  // string impressionId = 11;
  void clear_impressionid();
  static const int kImpressionIdFieldNumber = 11;
  const ::std::string& impressionid() const;
  void set_impressionid(const ::std::string& value);
  #if LANG_CXX11
  void set_impressionid(::std::string&& value);
  #endif
  void set_impressionid(const char* value);
  void set_impressionid(const char* value, size_t size);
  ::std::string* mutable_impressionid();
  ::std::string* release_impressionid();
  void set_allocated_impressionid(::std::string* impressionid);

  // string impressionName = 12;
  void clear_impressionname();
  static const int kImpressionNameFieldNumber = 12;
  const ::std::string& impressionname() const;
  void set_impressionname(const ::std::string& value);
  #if LANG_CXX11
  void set_impressionname(::std::string&& value);
  #endif
  void set_impressionname(const char* value);
  void set_impressionname(const char* value, size_t size);
  ::std::string* mutable_impressionname();
  ::std::string* release_impressionname();
  void set_allocated_impressionname(::std::string* impressionname);

  // string impressionCategory = 13;
  void clear_impressioncategory();
  static const int kImpressionCategoryFieldNumber = 13;
  const ::std::string& impressioncategory() const;
  void set_impressioncategory(const ::std::string& value);
  #if LANG_CXX11
  void set_impressioncategory(::std::string&& value);
  #endif
  void set_impressioncategory(const char* value);
  void set_impressioncategory(const char* value, size_t size);
  ::std::string* mutable_impressioncategory();
  ::std::string* release_impressioncategory();
  void set_allocated_impressioncategory(::std::string* impressioncategory);

  // string impressionBrand = 14;
  void clear_impressionbrand();
  static const int kImpressionBrandFieldNumber = 14;
  const ::std::string& impressionbrand() const;
  void set_impressionbrand(const ::std::string& value);
  #if LANG_CXX11
  void set_impressionbrand(::std::string&& value);
  #endif
  void set_impressionbrand(const char* value);
  void set_impressionbrand(const char* value, size_t size);
  ::std::string* mutable_impressionbrand();
  ::std::string* release_impressionbrand();
  void set_allocated_impressionbrand(::std::string* impressionbrand);

  // string impressionVariant = 15;
  void clear_impressionvariant();
  static const int kImpressionVariantFieldNumber = 15;
  const ::std::string& impressionvariant() const;
  void set_impressionvariant(const ::std::string& value);
  #if LANG_CXX11
  void set_impressionvariant(::std::string&& value);
  #endif
  void set_impressionvariant(const char* value);
  void set_impressionvariant(const char* value, size_t size);
  ::std::string* mutable_impressionvariant();
  ::std::string* release_impressionvariant();
  void set_allocated_impressionvariant(::std::string* impressionvariant);

  // string impressionPosition = 16;
  void clear_impressionposition();
  static const int kImpressionPositionFieldNumber = 16;
  const ::std::string& impressionposition() const;
  void set_impressionposition(const ::std::string& value);
  #if LANG_CXX11
  void set_impressionposition(::std::string&& value);
  #endif
  void set_impressionposition(const char* value);
  void set_impressionposition(const char* value, size_t size);
  ::std::string* mutable_impressionposition();
  ::std::string* release_impressionposition();
  void set_allocated_impressionposition(::std::string* impressionposition);

  // string impressionCustom = 17;
  void clear_impressioncustom();
  static const int kImpressionCustomFieldNumber = 17;
  const ::std::string& impressioncustom() const;
  void set_impressioncustom(const ::std::string& value);
  #if LANG_CXX11
  void set_impressioncustom(::std::string&& value);
  #endif
  void set_impressioncustom(const char* value);
  void set_impressioncustom(const char* value, size_t size);
  ::std::string* mutable_impressioncustom();
  ::std::string* release_impressioncustom();
  void set_allocated_impressioncustom(::std::string* impressioncustom);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageImpressionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr trackingid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr pageview_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr page_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr impression_;
  ::google::protobuf::internal::ArenaStringPtr impressionid_;
  ::google::protobuf::internal::ArenaStringPtr impressionname_;
  ::google::protobuf::internal::ArenaStringPtr impressioncategory_;
  ::google::protobuf::internal::ArenaStringPtr impressionbrand_;
  ::google::protobuf::internal::ArenaStringPtr impressionvariant_;
  ::google::protobuf::internal::ArenaStringPtr impressionposition_;
  ::google::protobuf::internal::ArenaStringPtr impressioncustom_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageImpressionsRequestImpl();
};
// -------------------------------------------------------------------

class CMessageImpressionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageImpressionsResponse) */ {
 public:
  CMessageImpressionsResponse();
  virtual ~CMessageImpressionsResponse();

  CMessageImpressionsResponse(const CMessageImpressionsResponse& from);

  inline CMessageImpressionsResponse& operator=(const CMessageImpressionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageImpressionsResponse(CMessageImpressionsResponse&& from) noexcept
    : CMessageImpressionsResponse() {
    *this = ::std::move(from);
  }

  inline CMessageImpressionsResponse& operator=(CMessageImpressionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageImpressionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageImpressionsResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageImpressionsResponse*>(
               &_CMessageImpressionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CMessageImpressionsResponse* other);
  friend void swap(CMessageImpressionsResponse& a, CMessageImpressionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageImpressionsResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageImpressionsResponse>(NULL);
  }

  CMessageImpressionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageImpressionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageImpressionsResponse& from);
  void MergeFrom(const CMessageImpressionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageImpressionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageImpressionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageImpressionsResponseImpl();
};
// -------------------------------------------------------------------

class CMessageActionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageActionRequest) */ {
 public:
  CMessageActionRequest();
  virtual ~CMessageActionRequest();

  CMessageActionRequest(const CMessageActionRequest& from);

  inline CMessageActionRequest& operator=(const CMessageActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageActionRequest(CMessageActionRequest&& from) noexcept
    : CMessageActionRequest() {
    *this = ::std::move(from);
  }

  inline CMessageActionRequest& operator=(CMessageActionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageActionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageActionRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageActionRequest*>(
               &_CMessageActionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CMessageActionRequest* other);
  friend void swap(CMessageActionRequest& a, CMessageActionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageActionRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageActionRequest>(NULL);
  }

  CMessageActionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageActionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageActionRequest& from);
  void MergeFrom(const CMessageActionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageActionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string trackingId = 4;
  void clear_trackingid();
  static const int kTrackingIdFieldNumber = 4;
  const ::std::string& trackingid() const;
  void set_trackingid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackingid(::std::string&& value);
  #endif
  void set_trackingid(const char* value);
  void set_trackingid(const char* value, size_t size);
  ::std::string* mutable_trackingid();
  ::std::string* release_trackingid();
  void set_allocated_trackingid(::std::string* trackingid);

  // string clientId = 5;
  void clear_clientid();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string eventType = 6;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 6;
  const ::std::string& eventtype() const;
  void set_eventtype(const ::std::string& value);
  #if LANG_CXX11
  void set_eventtype(::std::string&& value);
  #endif
  void set_eventtype(const char* value);
  void set_eventtype(const char* value, size_t size);
  ::std::string* mutable_eventtype();
  ::std::string* release_eventtype();
  void set_allocated_eventtype(::std::string* eventtype);

  // string category = 7;
  void clear_category();
  static const int kCategoryFieldNumber = 7;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string action = 8;
  void clear_action();
  static const int kActionFieldNumber = 8;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string label = 9;
  void clear_label();
  static const int kLabelFieldNumber = 9;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string productAction = 10;
  void clear_productaction();
  static const int kProductActionFieldNumber = 10;
  const ::std::string& productaction() const;
  void set_productaction(const ::std::string& value);
  #if LANG_CXX11
  void set_productaction(::std::string&& value);
  #endif
  void set_productaction(const char* value);
  void set_productaction(const char* value, size_t size);
  ::std::string* mutable_productaction();
  ::std::string* release_productaction();
  void set_allocated_productaction(::std::string* productaction);

  // string productID = 11;
  void clear_productid();
  static const int kProductIDFieldNumber = 11;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  #if LANG_CXX11
  void set_productid(::std::string&& value);
  #endif
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // string productName = 12;
  void clear_productname();
  static const int kProductNameFieldNumber = 12;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  #if LANG_CXX11
  void set_productname(::std::string&& value);
  #endif
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // string productCategory = 13;
  void clear_productcategory();
  static const int kProductCategoryFieldNumber = 13;
  const ::std::string& productcategory() const;
  void set_productcategory(const ::std::string& value);
  #if LANG_CXX11
  void set_productcategory(::std::string&& value);
  #endif
  void set_productcategory(const char* value);
  void set_productcategory(const char* value, size_t size);
  ::std::string* mutable_productcategory();
  ::std::string* release_productcategory();
  void set_allocated_productcategory(::std::string* productcategory);

  // string productBrand = 14;
  void clear_productbrand();
  static const int kProductBrandFieldNumber = 14;
  const ::std::string& productbrand() const;
  void set_productbrand(const ::std::string& value);
  #if LANG_CXX11
  void set_productbrand(::std::string&& value);
  #endif
  void set_productbrand(const char* value);
  void set_productbrand(const char* value, size_t size);
  ::std::string* mutable_productbrand();
  ::std::string* release_productbrand();
  void set_allocated_productbrand(::std::string* productbrand);

  // string productVariant = 15;
  void clear_productvariant();
  static const int kProductVariantFieldNumber = 15;
  const ::std::string& productvariant() const;
  void set_productvariant(const ::std::string& value);
  #if LANG_CXX11
  void set_productvariant(::std::string&& value);
  #endif
  void set_productvariant(const char* value);
  void set_productvariant(const char* value, size_t size);
  ::std::string* mutable_productvariant();
  ::std::string* release_productvariant();
  void set_allocated_productvariant(::std::string* productvariant);

  // string productPosition = 16;
  void clear_productposition();
  static const int kProductPositionFieldNumber = 16;
  const ::std::string& productposition() const;
  void set_productposition(const ::std::string& value);
  #if LANG_CXX11
  void set_productposition(::std::string&& value);
  #endif
  void set_productposition(const char* value);
  void set_productposition(const char* value, size_t size);
  ::std::string* mutable_productposition();
  ::std::string* release_productposition();
  void set_allocated_productposition(::std::string* productposition);

  // string productPrice = 17;
  void clear_productprice();
  static const int kProductPriceFieldNumber = 17;
  const ::std::string& productprice() const;
  void set_productprice(const ::std::string& value);
  #if LANG_CXX11
  void set_productprice(::std::string&& value);
  #endif
  void set_productprice(const char* value);
  void set_productprice(const char* value, size_t size);
  ::std::string* mutable_productprice();
  ::std::string* release_productprice();
  void set_allocated_productprice(::std::string* productprice);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageActionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr trackingid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr eventtype_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr productaction_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr productcategory_;
  ::google::protobuf::internal::ArenaStringPtr productbrand_;
  ::google::protobuf::internal::ArenaStringPtr productvariant_;
  ::google::protobuf::internal::ArenaStringPtr productposition_;
  ::google::protobuf::internal::ArenaStringPtr productprice_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageActionRequestImpl();
};
// -------------------------------------------------------------------

class CMessageActionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageActionResponse) */ {
 public:
  CMessageActionResponse();
  virtual ~CMessageActionResponse();

  CMessageActionResponse(const CMessageActionResponse& from);

  inline CMessageActionResponse& operator=(const CMessageActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageActionResponse(CMessageActionResponse&& from) noexcept
    : CMessageActionResponse() {
    *this = ::std::move(from);
  }

  inline CMessageActionResponse& operator=(CMessageActionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageActionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageActionResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageActionResponse*>(
               &_CMessageActionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CMessageActionResponse* other);
  friend void swap(CMessageActionResponse& a, CMessageActionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageActionResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageActionResponse>(NULL);
  }

  CMessageActionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageActionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageActionResponse& from);
  void MergeFrom(const CMessageActionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageActionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageActionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5ffeed_5fback_2eproto::TableStruct;
  friend void ::protobuf_message_5ffeed_5fback_2eproto::InitDefaultsCMessageActionResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMessageFeedBackRequest

// int32 type = 1;
inline void CMessageFeedBackRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageFeedBackRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.type)
  return type_;
}
inline void CMessageFeedBackRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.type)
}

// string uuid = 2;
inline void CMessageFeedBackRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.uuid)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.uuid)
}
#endif
inline void CMessageFeedBackRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.uuid)
}
inline void CMessageFeedBackRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.uuid)
}
inline ::std::string* CMessageFeedBackRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.uuid)
}

// string protocalVersion = 3;
inline void CMessageFeedBackRequest::clear_protocalversion() {
  protocalversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::protocalversion() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.protocalVersion)
  return protocalversion_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_protocalversion(const ::std::string& value) {
  
  protocalversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.protocalVersion)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_protocalversion(::std::string&& value) {
  
  protocalversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.protocalVersion)
}
#endif
inline void CMessageFeedBackRequest::set_protocalversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocalversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.protocalVersion)
}
inline void CMessageFeedBackRequest::set_protocalversion(const char* value, size_t size) {
  
  protocalversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.protocalVersion)
}
inline ::std::string* CMessageFeedBackRequest::mutable_protocalversion() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.protocalVersion)
  return protocalversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_protocalversion() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.protocalVersion)
  
  return protocalversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_protocalversion(::std::string* protocalversion) {
  if (protocalversion != NULL) {
    
  } else {
    
  }
  protocalversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocalversion);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.protocalVersion)
}

// string hitType = 4;
inline void CMessageFeedBackRequest::clear_hittype() {
  hittype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::hittype() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.hitType)
  return hittype_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_hittype(const ::std::string& value) {
  
  hittype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.hitType)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_hittype(::std::string&& value) {
  
  hittype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.hitType)
}
#endif
inline void CMessageFeedBackRequest::set_hittype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hittype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.hitType)
}
inline void CMessageFeedBackRequest::set_hittype(const char* value, size_t size) {
  
  hittype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.hitType)
}
inline ::std::string* CMessageFeedBackRequest::mutable_hittype() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.hitType)
  return hittype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_hittype() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.hitType)
  
  return hittype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_hittype(::std::string* hittype) {
  if (hittype != NULL) {
    
  } else {
    
  }
  hittype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hittype);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.hitType)
}

// string trackingId = 5;
inline void CMessageFeedBackRequest::clear_trackingid() {
  trackingid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::trackingid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.trackingId)
  return trackingid_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_trackingid(const ::std::string& value) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.trackingId)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_trackingid(::std::string&& value) {
  
  trackingid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.trackingId)
}
#endif
inline void CMessageFeedBackRequest::set_trackingid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.trackingId)
}
inline void CMessageFeedBackRequest::set_trackingid(const char* value, size_t size) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.trackingId)
}
inline ::std::string* CMessageFeedBackRequest::mutable_trackingid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.trackingId)
  return trackingid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_trackingid() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.trackingId)
  
  return trackingid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_trackingid(::std::string* trackingid) {
  if (trackingid != NULL) {
    
  } else {
    
  }
  trackingid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackingid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.trackingId)
}

// string clientId = 6;
inline void CMessageFeedBackRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::clientid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.clientId)
  return clientid_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.clientId)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.clientId)
}
#endif
inline void CMessageFeedBackRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.clientId)
}
inline void CMessageFeedBackRequest::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.clientId)
}
inline ::std::string* CMessageFeedBackRequest::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.clientId)
}

// string userId = 7;
inline void CMessageFeedBackRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::userid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.userId)
  return userid_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.userId)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.userId)
}
#endif
inline void CMessageFeedBackRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.userId)
}
inline void CMessageFeedBackRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.userId)
}
inline ::std::string* CMessageFeedBackRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_userid() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.userId)
}

// string appName = 8;
inline void CMessageFeedBackRequest::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::appname() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.appName)
  return appname_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.appName)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.appName)
}
#endif
inline void CMessageFeedBackRequest::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.appName)
}
inline void CMessageFeedBackRequest::set_appname(const char* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.appName)
}
inline ::std::string* CMessageFeedBackRequest::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.appName)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_appname() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.appName)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.appName)
}

// string screenName = 9;
inline void CMessageFeedBackRequest::clear_screenname() {
  screenname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::screenname() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.screenName)
  return screenname_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_screenname(const ::std::string& value) {
  
  screenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.screenName)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_screenname(::std::string&& value) {
  
  screenname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.screenName)
}
#endif
inline void CMessageFeedBackRequest::set_screenname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  screenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.screenName)
}
inline void CMessageFeedBackRequest::set_screenname(const char* value, size_t size) {
  
  screenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.screenName)
}
inline ::std::string* CMessageFeedBackRequest::mutable_screenname() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.screenName)
  return screenname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_screenname() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.screenName)
  
  return screenname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_screenname(::std::string* screenname) {
  if (screenname != NULL) {
    
  } else {
    
  }
  screenname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), screenname);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.screenName)
}

// string appVersion = 10;
inline void CMessageFeedBackRequest::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackRequest::appversion() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackRequest.appVersion)
  return appversion_.GetNoArena();
}
inline void CMessageFeedBackRequest::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackRequest.appVersion)
}
#if LANG_CXX11
inline void CMessageFeedBackRequest::set_appversion(::std::string&& value) {
  
  appversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackRequest.appVersion)
}
#endif
inline void CMessageFeedBackRequest::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackRequest.appVersion)
}
inline void CMessageFeedBackRequest::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackRequest.appVersion)
}
inline ::std::string* CMessageFeedBackRequest::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackRequest.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackRequest::release_appversion() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackRequest.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackRequest::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackRequest.appVersion)
}

// -------------------------------------------------------------------

// CMessageFeedBackReponse

// int32 type = 1;
inline void CMessageFeedBackReponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageFeedBackReponse::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackReponse.type)
  return type_;
}
inline void CMessageFeedBackReponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackReponse.type)
}

// string uuid = 2;
inline void CMessageFeedBackReponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageFeedBackReponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackReponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageFeedBackReponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackReponse.uuid)
}
#if LANG_CXX11
inline void CMessageFeedBackReponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageFeedBackReponse.uuid)
}
#endif
inline void CMessageFeedBackReponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageFeedBackReponse.uuid)
}
inline void CMessageFeedBackReponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageFeedBackReponse.uuid)
}
inline ::std::string* CMessageFeedBackReponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageFeedBackReponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageFeedBackReponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageFeedBackReponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageFeedBackReponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageFeedBackReponse.uuid)
}

// int32 state = 3;
inline void CMessageFeedBackReponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageFeedBackReponse::state() const {
  // @@protoc_insertion_point(field_get:d5.CMessageFeedBackReponse.state)
  return state_;
}
inline void CMessageFeedBackReponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageFeedBackReponse.state)
}

// -------------------------------------------------------------------

// CMessageEventTrackingRequest

// int32 type = 1;
inline void CMessageEventTrackingRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageEventTrackingRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.type)
  return type_;
}
inline void CMessageEventTrackingRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.type)
}

// string uuid = 2;
inline void CMessageEventTrackingRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.uuid)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.uuid)
}
#endif
inline void CMessageEventTrackingRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.uuid)
}
inline void CMessageEventTrackingRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.uuid)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.uuid)
}

// string version = 3;
inline void CMessageEventTrackingRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::version() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.version)
  return version_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.version)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.version)
}
#endif
inline void CMessageEventTrackingRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.version)
}
inline void CMessageEventTrackingRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.version)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_version() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.version)
}

// string trackingId = 4;
inline void CMessageEventTrackingRequest::clear_trackingid() {
  trackingid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::trackingid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.trackingId)
  return trackingid_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_trackingid(const ::std::string& value) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.trackingId)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_trackingid(::std::string&& value) {
  
  trackingid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.trackingId)
}
#endif
inline void CMessageEventTrackingRequest::set_trackingid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.trackingId)
}
inline void CMessageEventTrackingRequest::set_trackingid(const char* value, size_t size) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.trackingId)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_trackingid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.trackingId)
  return trackingid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_trackingid() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.trackingId)
  
  return trackingid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_trackingid(::std::string* trackingid) {
  if (trackingid != NULL) {
    
  } else {
    
  }
  trackingid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackingid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.trackingId)
}

// string clientId = 5;
inline void CMessageEventTrackingRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::clientid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.clientId)
  return clientid_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.clientId)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.clientId)
}
#endif
inline void CMessageEventTrackingRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.clientId)
}
inline void CMessageEventTrackingRequest::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.clientId)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.clientId)
}

// string event = 6;
inline void CMessageEventTrackingRequest::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::event() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.event)
  return event_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.event)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.event)
}
#endif
inline void CMessageEventTrackingRequest::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.event)
}
inline void CMessageEventTrackingRequest::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.event)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_event() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.event)
}

// string category = 7;
inline void CMessageEventTrackingRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::category() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.category)
  return category_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.category)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.category)
}
#endif
inline void CMessageEventTrackingRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.category)
}
inline void CMessageEventTrackingRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.category)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_category() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.category)
}

// string action = 8;
inline void CMessageEventTrackingRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::action() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.action)
  return action_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.action)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.action)
}
#endif
inline void CMessageEventTrackingRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.action)
}
inline void CMessageEventTrackingRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.action)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_action() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.action)
}

// string label = 9;
inline void CMessageEventTrackingRequest::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::label() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.label)
  return label_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.label)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.label)
}
#endif
inline void CMessageEventTrackingRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.label)
}
inline void CMessageEventTrackingRequest::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.label)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_label() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.label)
}

// string value = 10;
inline void CMessageEventTrackingRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingRequest::value() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingRequest.value)
  return value_.GetNoArena();
}
inline void CMessageEventTrackingRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingRequest.value)
}
#if LANG_CXX11
inline void CMessageEventTrackingRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingRequest.value)
}
#endif
inline void CMessageEventTrackingRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingRequest.value)
}
inline void CMessageEventTrackingRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingRequest.value)
}
inline ::std::string* CMessageEventTrackingRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingRequest::release_value() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingRequest.value)
}

// -------------------------------------------------------------------

// CMessageEventTrackingResponse

// int32 type = 1;
inline void CMessageEventTrackingResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageEventTrackingResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingResponse.type)
  return type_;
}
inline void CMessageEventTrackingResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingResponse.type)
}

// string uuid = 2;
inline void CMessageEventTrackingResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageEventTrackingResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageEventTrackingResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingResponse.uuid)
}
#if LANG_CXX11
inline void CMessageEventTrackingResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageEventTrackingResponse.uuid)
}
#endif
inline void CMessageEventTrackingResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageEventTrackingResponse.uuid)
}
inline void CMessageEventTrackingResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageEventTrackingResponse.uuid)
}
inline ::std::string* CMessageEventTrackingResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageEventTrackingResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageEventTrackingResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageEventTrackingResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageEventTrackingResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageEventTrackingResponse.uuid)
}

// int32 state = 3;
inline void CMessageEventTrackingResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageEventTrackingResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.CMessageEventTrackingResponse.state)
  return state_;
}
inline void CMessageEventTrackingResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageEventTrackingResponse.state)
}

// -------------------------------------------------------------------

// CMessageImpressionsRequest

// int32 type = 1;
inline void CMessageImpressionsRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageImpressionsRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.type)
  return type_;
}
inline void CMessageImpressionsRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.type)
}

// string uuid = 2;
inline void CMessageImpressionsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.uuid)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.uuid)
}
#endif
inline void CMessageImpressionsRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.uuid)
}
inline void CMessageImpressionsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.uuid)
}
inline ::std::string* CMessageImpressionsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.uuid)
}

// string version = 3;
inline void CMessageImpressionsRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::version() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.version)
  return version_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.version)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.version)
}
#endif
inline void CMessageImpressionsRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.version)
}
inline void CMessageImpressionsRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.version)
}
inline ::std::string* CMessageImpressionsRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_version() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.version)
}

// string trackingId = 4;
inline void CMessageImpressionsRequest::clear_trackingid() {
  trackingid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::trackingid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.trackingId)
  return trackingid_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_trackingid(const ::std::string& value) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.trackingId)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_trackingid(::std::string&& value) {
  
  trackingid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.trackingId)
}
#endif
inline void CMessageImpressionsRequest::set_trackingid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.trackingId)
}
inline void CMessageImpressionsRequest::set_trackingid(const char* value, size_t size) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.trackingId)
}
inline ::std::string* CMessageImpressionsRequest::mutable_trackingid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.trackingId)
  return trackingid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_trackingid() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.trackingId)
  
  return trackingid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_trackingid(::std::string* trackingid) {
  if (trackingid != NULL) {
    
  } else {
    
  }
  trackingid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackingid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.trackingId)
}

// string clientId = 5;
inline void CMessageImpressionsRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::clientid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.clientId)
  return clientid_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.clientId)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.clientId)
}
#endif
inline void CMessageImpressionsRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.clientId)
}
inline void CMessageImpressionsRequest::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.clientId)
}
inline ::std::string* CMessageImpressionsRequest::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.clientId)
}

// string pageView = 6;
inline void CMessageImpressionsRequest::clear_pageview() {
  pageview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::pageview() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.pageView)
  return pageview_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_pageview(const ::std::string& value) {
  
  pageview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.pageView)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_pageview(::std::string&& value) {
  
  pageview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.pageView)
}
#endif
inline void CMessageImpressionsRequest::set_pageview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pageview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.pageView)
}
inline void CMessageImpressionsRequest::set_pageview(const char* value, size_t size) {
  
  pageview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.pageView)
}
inline ::std::string* CMessageImpressionsRequest::mutable_pageview() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.pageView)
  return pageview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_pageview() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.pageView)
  
  return pageview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_pageview(::std::string* pageview) {
  if (pageview != NULL) {
    
  } else {
    
  }
  pageview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pageview);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.pageView)
}

// string hostName = 7;
inline void CMessageImpressionsRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::hostname() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.hostName)
  return hostname_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.hostName)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.hostName)
}
#endif
inline void CMessageImpressionsRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.hostName)
}
inline void CMessageImpressionsRequest::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.hostName)
}
inline ::std::string* CMessageImpressionsRequest::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.hostName)
}

// string page = 8;
inline void CMessageImpressionsRequest::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::page() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.page)
  return page_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_page(const ::std::string& value) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.page)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_page(::std::string&& value) {
  
  page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.page)
}
#endif
inline void CMessageImpressionsRequest::set_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.page)
}
inline void CMessageImpressionsRequest::set_page(const char* value, size_t size) {
  
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.page)
}
inline ::std::string* CMessageImpressionsRequest::mutable_page() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_page() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.page)
  
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    
  } else {
    
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.page)
}

// string title = 9;
inline void CMessageImpressionsRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::title() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.title)
  return title_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.title)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.title)
}
#endif
inline void CMessageImpressionsRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.title)
}
inline void CMessageImpressionsRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.title)
}
inline ::std::string* CMessageImpressionsRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_title() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.title)
}

// string impression = 10;
inline void CMessageImpressionsRequest::clear_impression() {
  impression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impression() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impression)
  return impression_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impression(const ::std::string& value) {
  
  impression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impression)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impression(::std::string&& value) {
  
  impression_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impression)
}
#endif
inline void CMessageImpressionsRequest::set_impression(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impression)
}
inline void CMessageImpressionsRequest::set_impression(const char* value, size_t size) {
  
  impression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impression)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impression() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impression)
  return impression_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impression() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impression)
  
  return impression_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impression(::std::string* impression) {
  if (impression != NULL) {
    
  } else {
    
  }
  impression_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impression);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impression)
}

// string impressionId = 11;
inline void CMessageImpressionsRequest::clear_impressionid() {
  impressionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressionid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionId)
  return impressionid_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressionid(const ::std::string& value) {
  
  impressionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionId)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressionid(::std::string&& value) {
  
  impressionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionId)
}
#endif
inline void CMessageImpressionsRequest::set_impressionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionId)
}
inline void CMessageImpressionsRequest::set_impressionid(const char* value, size_t size) {
  
  impressionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionId)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressionid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionId)
  return impressionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressionid() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionId)
  
  return impressionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressionid(::std::string* impressionid) {
  if (impressionid != NULL) {
    
  } else {
    
  }
  impressionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressionid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionId)
}

// string impressionName = 12;
inline void CMessageImpressionsRequest::clear_impressionname() {
  impressionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressionname() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionName)
  return impressionname_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressionname(const ::std::string& value) {
  
  impressionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionName)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressionname(::std::string&& value) {
  
  impressionname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionName)
}
#endif
inline void CMessageImpressionsRequest::set_impressionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionName)
}
inline void CMessageImpressionsRequest::set_impressionname(const char* value, size_t size) {
  
  impressionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionName)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressionname() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionName)
  return impressionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressionname() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionName)
  
  return impressionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressionname(::std::string* impressionname) {
  if (impressionname != NULL) {
    
  } else {
    
  }
  impressionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressionname);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionName)
}

// string impressionCategory = 13;
inline void CMessageImpressionsRequest::clear_impressioncategory() {
  impressioncategory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressioncategory() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionCategory)
  return impressioncategory_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressioncategory(const ::std::string& value) {
  
  impressioncategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionCategory)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressioncategory(::std::string&& value) {
  
  impressioncategory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionCategory)
}
#endif
inline void CMessageImpressionsRequest::set_impressioncategory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressioncategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionCategory)
}
inline void CMessageImpressionsRequest::set_impressioncategory(const char* value, size_t size) {
  
  impressioncategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionCategory)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressioncategory() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionCategory)
  return impressioncategory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressioncategory() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionCategory)
  
  return impressioncategory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressioncategory(::std::string* impressioncategory) {
  if (impressioncategory != NULL) {
    
  } else {
    
  }
  impressioncategory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressioncategory);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionCategory)
}

// string impressionBrand = 14;
inline void CMessageImpressionsRequest::clear_impressionbrand() {
  impressionbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressionbrand() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionBrand)
  return impressionbrand_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressionbrand(const ::std::string& value) {
  
  impressionbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionBrand)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressionbrand(::std::string&& value) {
  
  impressionbrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionBrand)
}
#endif
inline void CMessageImpressionsRequest::set_impressionbrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressionbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionBrand)
}
inline void CMessageImpressionsRequest::set_impressionbrand(const char* value, size_t size) {
  
  impressionbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionBrand)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressionbrand() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionBrand)
  return impressionbrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressionbrand() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionBrand)
  
  return impressionbrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressionbrand(::std::string* impressionbrand) {
  if (impressionbrand != NULL) {
    
  } else {
    
  }
  impressionbrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressionbrand);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionBrand)
}

// string impressionVariant = 15;
inline void CMessageImpressionsRequest::clear_impressionvariant() {
  impressionvariant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressionvariant() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionVariant)
  return impressionvariant_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressionvariant(const ::std::string& value) {
  
  impressionvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionVariant)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressionvariant(::std::string&& value) {
  
  impressionvariant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionVariant)
}
#endif
inline void CMessageImpressionsRequest::set_impressionvariant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressionvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionVariant)
}
inline void CMessageImpressionsRequest::set_impressionvariant(const char* value, size_t size) {
  
  impressionvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionVariant)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressionvariant() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionVariant)
  return impressionvariant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressionvariant() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionVariant)
  
  return impressionvariant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressionvariant(::std::string* impressionvariant) {
  if (impressionvariant != NULL) {
    
  } else {
    
  }
  impressionvariant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressionvariant);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionVariant)
}

// string impressionPosition = 16;
inline void CMessageImpressionsRequest::clear_impressionposition() {
  impressionposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressionposition() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionPosition)
  return impressionposition_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressionposition(const ::std::string& value) {
  
  impressionposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionPosition)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressionposition(::std::string&& value) {
  
  impressionposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionPosition)
}
#endif
inline void CMessageImpressionsRequest::set_impressionposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressionposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionPosition)
}
inline void CMessageImpressionsRequest::set_impressionposition(const char* value, size_t size) {
  
  impressionposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionPosition)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressionposition() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionPosition)
  return impressionposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressionposition() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionPosition)
  
  return impressionposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressionposition(::std::string* impressionposition) {
  if (impressionposition != NULL) {
    
  } else {
    
  }
  impressionposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressionposition);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionPosition)
}

// string impressionCustom = 17;
inline void CMessageImpressionsRequest::clear_impressioncustom() {
  impressioncustom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsRequest::impressioncustom() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsRequest.impressionCustom)
  return impressioncustom_.GetNoArena();
}
inline void CMessageImpressionsRequest::set_impressioncustom(const ::std::string& value) {
  
  impressioncustom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsRequest.impressionCustom)
}
#if LANG_CXX11
inline void CMessageImpressionsRequest::set_impressioncustom(::std::string&& value) {
  
  impressioncustom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsRequest.impressionCustom)
}
#endif
inline void CMessageImpressionsRequest::set_impressioncustom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  impressioncustom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsRequest.impressionCustom)
}
inline void CMessageImpressionsRequest::set_impressioncustom(const char* value, size_t size) {
  
  impressioncustom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsRequest.impressionCustom)
}
inline ::std::string* CMessageImpressionsRequest::mutable_impressioncustom() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsRequest.impressionCustom)
  return impressioncustom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsRequest::release_impressioncustom() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsRequest.impressionCustom)
  
  return impressioncustom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsRequest::set_allocated_impressioncustom(::std::string* impressioncustom) {
  if (impressioncustom != NULL) {
    
  } else {
    
  }
  impressioncustom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impressioncustom);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsRequest.impressionCustom)
}

// -------------------------------------------------------------------

// CMessageImpressionsResponse

// int32 type = 1;
inline void CMessageImpressionsResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageImpressionsResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsResponse.type)
  return type_;
}
inline void CMessageImpressionsResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsResponse.type)
}

// string uuid = 2;
inline void CMessageImpressionsResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageImpressionsResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageImpressionsResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsResponse.uuid)
}
#if LANG_CXX11
inline void CMessageImpressionsResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageImpressionsResponse.uuid)
}
#endif
inline void CMessageImpressionsResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageImpressionsResponse.uuid)
}
inline void CMessageImpressionsResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageImpressionsResponse.uuid)
}
inline ::std::string* CMessageImpressionsResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageImpressionsResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageImpressionsResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageImpressionsResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageImpressionsResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageImpressionsResponse.uuid)
}

// int32 state = 3;
inline void CMessageImpressionsResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageImpressionsResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.CMessageImpressionsResponse.state)
  return state_;
}
inline void CMessageImpressionsResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageImpressionsResponse.state)
}

// -------------------------------------------------------------------

// CMessageActionRequest

// int32 type = 1;
inline void CMessageActionRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageActionRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.type)
  return type_;
}
inline void CMessageActionRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.type)
}

// string uuid = 2;
inline void CMessageActionRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageActionRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.uuid)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.uuid)
}
#endif
inline void CMessageActionRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.uuid)
}
inline void CMessageActionRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.uuid)
}
inline ::std::string* CMessageActionRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.uuid)
}

// string version = 3;
inline void CMessageActionRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::version() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.version)
  return version_.GetNoArena();
}
inline void CMessageActionRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.version)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.version)
}
#endif
inline void CMessageActionRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.version)
}
inline void CMessageActionRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.version)
}
inline ::std::string* CMessageActionRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_version() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.version)
}

// string trackingId = 4;
inline void CMessageActionRequest::clear_trackingid() {
  trackingid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::trackingid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.trackingId)
  return trackingid_.GetNoArena();
}
inline void CMessageActionRequest::set_trackingid(const ::std::string& value) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.trackingId)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_trackingid(::std::string&& value) {
  
  trackingid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.trackingId)
}
#endif
inline void CMessageActionRequest::set_trackingid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.trackingId)
}
inline void CMessageActionRequest::set_trackingid(const char* value, size_t size) {
  
  trackingid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.trackingId)
}
inline ::std::string* CMessageActionRequest::mutable_trackingid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.trackingId)
  return trackingid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_trackingid() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.trackingId)
  
  return trackingid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_trackingid(::std::string* trackingid) {
  if (trackingid != NULL) {
    
  } else {
    
  }
  trackingid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackingid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.trackingId)
}

// string clientId = 5;
inline void CMessageActionRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::clientid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.clientId)
  return clientid_.GetNoArena();
}
inline void CMessageActionRequest::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.clientId)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.clientId)
}
#endif
inline void CMessageActionRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.clientId)
}
inline void CMessageActionRequest::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.clientId)
}
inline ::std::string* CMessageActionRequest::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.clientId)
}

// string eventType = 6;
inline void CMessageActionRequest::clear_eventtype() {
  eventtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::eventtype() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.eventType)
  return eventtype_.GetNoArena();
}
inline void CMessageActionRequest::set_eventtype(const ::std::string& value) {
  
  eventtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.eventType)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_eventtype(::std::string&& value) {
  
  eventtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.eventType)
}
#endif
inline void CMessageActionRequest::set_eventtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.eventType)
}
inline void CMessageActionRequest::set_eventtype(const char* value, size_t size) {
  
  eventtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.eventType)
}
inline ::std::string* CMessageActionRequest::mutable_eventtype() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.eventType)
  return eventtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_eventtype() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.eventType)
  
  return eventtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_eventtype(::std::string* eventtype) {
  if (eventtype != NULL) {
    
  } else {
    
  }
  eventtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventtype);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.eventType)
}

// string category = 7;
inline void CMessageActionRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::category() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.category)
  return category_.GetNoArena();
}
inline void CMessageActionRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.category)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.category)
}
#endif
inline void CMessageActionRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.category)
}
inline void CMessageActionRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.category)
}
inline ::std::string* CMessageActionRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_category() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.category)
}

// string action = 8;
inline void CMessageActionRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::action() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.action)
  return action_.GetNoArena();
}
inline void CMessageActionRequest::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.action)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.action)
}
#endif
inline void CMessageActionRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.action)
}
inline void CMessageActionRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.action)
}
inline ::std::string* CMessageActionRequest::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_action() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.action)
}

// string label = 9;
inline void CMessageActionRequest::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::label() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.label)
  return label_.GetNoArena();
}
inline void CMessageActionRequest::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.label)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.label)
}
#endif
inline void CMessageActionRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.label)
}
inline void CMessageActionRequest::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.label)
}
inline ::std::string* CMessageActionRequest::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_label() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.label)
}

// string productAction = 10;
inline void CMessageActionRequest::clear_productaction() {
  productaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productaction() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productAction)
  return productaction_.GetNoArena();
}
inline void CMessageActionRequest::set_productaction(const ::std::string& value) {
  
  productaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productAction)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productaction(::std::string&& value) {
  
  productaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productAction)
}
#endif
inline void CMessageActionRequest::set_productaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productAction)
}
inline void CMessageActionRequest::set_productaction(const char* value, size_t size) {
  
  productaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productAction)
}
inline ::std::string* CMessageActionRequest::mutable_productaction() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productAction)
  return productaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productaction() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productAction)
  
  return productaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productaction(::std::string* productaction) {
  if (productaction != NULL) {
    
  } else {
    
  }
  productaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productaction);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productAction)
}

// string productID = 11;
inline void CMessageActionRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productID)
  return productid_.GetNoArena();
}
inline void CMessageActionRequest::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productID)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productid(::std::string&& value) {
  
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productID)
}
#endif
inline void CMessageActionRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productID)
}
inline void CMessageActionRequest::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productID)
}
inline ::std::string* CMessageActionRequest::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productid() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productID)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productID)
}

// string productName = 12;
inline void CMessageActionRequest::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productname() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productName)
  return productname_.GetNoArena();
}
inline void CMessageActionRequest::set_productname(const ::std::string& value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productName)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productname(::std::string&& value) {
  
  productname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productName)
}
#endif
inline void CMessageActionRequest::set_productname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productName)
}
inline void CMessageActionRequest::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productName)
}
inline ::std::string* CMessageActionRequest::mutable_productname() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productname() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productName)
  
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productName)
}

// string productCategory = 13;
inline void CMessageActionRequest::clear_productcategory() {
  productcategory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productcategory() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productCategory)
  return productcategory_.GetNoArena();
}
inline void CMessageActionRequest::set_productcategory(const ::std::string& value) {
  
  productcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productCategory)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productcategory(::std::string&& value) {
  
  productcategory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productCategory)
}
#endif
inline void CMessageActionRequest::set_productcategory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productCategory)
}
inline void CMessageActionRequest::set_productcategory(const char* value, size_t size) {
  
  productcategory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productCategory)
}
inline ::std::string* CMessageActionRequest::mutable_productcategory() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productCategory)
  return productcategory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productcategory() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productCategory)
  
  return productcategory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productcategory(::std::string* productcategory) {
  if (productcategory != NULL) {
    
  } else {
    
  }
  productcategory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcategory);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productCategory)
}

// string productBrand = 14;
inline void CMessageActionRequest::clear_productbrand() {
  productbrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productbrand() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productBrand)
  return productbrand_.GetNoArena();
}
inline void CMessageActionRequest::set_productbrand(const ::std::string& value) {
  
  productbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productBrand)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productbrand(::std::string&& value) {
  
  productbrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productBrand)
}
#endif
inline void CMessageActionRequest::set_productbrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productBrand)
}
inline void CMessageActionRequest::set_productbrand(const char* value, size_t size) {
  
  productbrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productBrand)
}
inline ::std::string* CMessageActionRequest::mutable_productbrand() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productBrand)
  return productbrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productbrand() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productBrand)
  
  return productbrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productbrand(::std::string* productbrand) {
  if (productbrand != NULL) {
    
  } else {
    
  }
  productbrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productbrand);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productBrand)
}

// string productVariant = 15;
inline void CMessageActionRequest::clear_productvariant() {
  productvariant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productvariant() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productVariant)
  return productvariant_.GetNoArena();
}
inline void CMessageActionRequest::set_productvariant(const ::std::string& value) {
  
  productvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productVariant)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productvariant(::std::string&& value) {
  
  productvariant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productVariant)
}
#endif
inline void CMessageActionRequest::set_productvariant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productVariant)
}
inline void CMessageActionRequest::set_productvariant(const char* value, size_t size) {
  
  productvariant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productVariant)
}
inline ::std::string* CMessageActionRequest::mutable_productvariant() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productVariant)
  return productvariant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productvariant() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productVariant)
  
  return productvariant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productvariant(::std::string* productvariant) {
  if (productvariant != NULL) {
    
  } else {
    
  }
  productvariant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productvariant);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productVariant)
}

// string productPosition = 16;
inline void CMessageActionRequest::clear_productposition() {
  productposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productposition() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productPosition)
  return productposition_.GetNoArena();
}
inline void CMessageActionRequest::set_productposition(const ::std::string& value) {
  
  productposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productPosition)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productposition(::std::string&& value) {
  
  productposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productPosition)
}
#endif
inline void CMessageActionRequest::set_productposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productPosition)
}
inline void CMessageActionRequest::set_productposition(const char* value, size_t size) {
  
  productposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productPosition)
}
inline ::std::string* CMessageActionRequest::mutable_productposition() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productPosition)
  return productposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productposition() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productPosition)
  
  return productposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productposition(::std::string* productposition) {
  if (productposition != NULL) {
    
  } else {
    
  }
  productposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productposition);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productPosition)
}

// string productPrice = 17;
inline void CMessageActionRequest::clear_productprice() {
  productprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionRequest::productprice() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionRequest.productPrice)
  return productprice_.GetNoArena();
}
inline void CMessageActionRequest::set_productprice(const ::std::string& value) {
  
  productprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionRequest.productPrice)
}
#if LANG_CXX11
inline void CMessageActionRequest::set_productprice(::std::string&& value) {
  
  productprice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionRequest.productPrice)
}
#endif
inline void CMessageActionRequest::set_productprice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionRequest.productPrice)
}
inline void CMessageActionRequest::set_productprice(const char* value, size_t size) {
  
  productprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionRequest.productPrice)
}
inline ::std::string* CMessageActionRequest::mutable_productprice() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionRequest.productPrice)
  return productprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionRequest::release_productprice() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionRequest.productPrice)
  
  return productprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionRequest::set_allocated_productprice(::std::string* productprice) {
  if (productprice != NULL) {
    
  } else {
    
  }
  productprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productprice);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionRequest.productPrice)
}

// -------------------------------------------------------------------

// CMessageActionResponse

// int32 type = 1;
inline void CMessageActionResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageActionResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionResponse.type)
  return type_;
}
inline void CMessageActionResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageActionResponse.type)
}

// string uuid = 2;
inline void CMessageActionResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageActionResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageActionResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageActionResponse.uuid)
}
#if LANG_CXX11
inline void CMessageActionResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageActionResponse.uuid)
}
#endif
inline void CMessageActionResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageActionResponse.uuid)
}
inline void CMessageActionResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageActionResponse.uuid)
}
inline ::std::string* CMessageActionResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageActionResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageActionResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageActionResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageActionResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageActionResponse.uuid)
}

// int32 state = 3;
inline void CMessageActionResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageActionResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.CMessageActionResponse.state)
  return state_;
}
inline void CMessageActionResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageActionResponse.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5ffeed_5fback_2eproto_INCLUDED
