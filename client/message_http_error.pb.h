// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_http_error.proto

#ifndef PROTOBUF_message_5fhttp_5ferror_2eproto_INCLUDED
#define PROTOBUF_message_5fhttp_5ferror_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_5fhttp_5ferror_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCMessageHttpErrorImpl();
void InitDefaultsCMessageHttpError();
void InitDefaultsCMessageHttpErrorInfoImpl();
void InitDefaultsCMessageHttpErrorInfo();
inline void InitDefaults() {
  InitDefaultsCMessageHttpError();
  InitDefaultsCMessageHttpErrorInfo();
}
}  // namespace protobuf_message_5fhttp_5ferror_2eproto
namespace d5 {
class CMessageHttpError;
class CMessageHttpErrorDefaultTypeInternal;
extern CMessageHttpErrorDefaultTypeInternal _CMessageHttpError_default_instance_;
class CMessageHttpErrorInfo;
class CMessageHttpErrorInfoDefaultTypeInternal;
extern CMessageHttpErrorInfoDefaultTypeInternal _CMessageHttpErrorInfo_default_instance_;
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::CMessageHttpError* Arena::Create< ::d5::CMessageHttpError>(Arena*);
template<> ::d5::CMessageHttpErrorInfo* Arena::Create< ::d5::CMessageHttpErrorInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {

// ===================================================================

class CMessageHttpError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageHttpError) */ {
 public:
  CMessageHttpError();
  virtual ~CMessageHttpError();

  CMessageHttpError(const CMessageHttpError& from);

  inline CMessageHttpError& operator=(const CMessageHttpError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageHttpError(CMessageHttpError&& from) noexcept
    : CMessageHttpError() {
    *this = ::std::move(from);
  }

  inline CMessageHttpError& operator=(CMessageHttpError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageHttpError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageHttpError* internal_default_instance() {
    return reinterpret_cast<const CMessageHttpError*>(
               &_CMessageHttpError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMessageHttpError* other);
  friend void swap(CMessageHttpError& a, CMessageHttpError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageHttpError* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageHttpError>(NULL);
  }

  CMessageHttpError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageHttpError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageHttpError& from);
  void MergeFrom(const CMessageHttpError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageHttpError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errormessage = 2;
  void clear_errormessage();
  static const int kErrormessageFieldNumber = 2;
  const ::std::string& errormessage() const;
  void set_errormessage(const ::std::string& value);
  #if LANG_CXX11
  void set_errormessage(::std::string&& value);
  #endif
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  ::std::string* mutable_errormessage();
  ::std::string* release_errormessage();
  void set_allocated_errormessage(::std::string* errormessage);

  // int32 errorcode = 1;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageHttpError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errormessage_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5fhttp_5ferror_2eproto::TableStruct;
  friend void ::protobuf_message_5fhttp_5ferror_2eproto::InitDefaultsCMessageHttpErrorImpl();
};
// -------------------------------------------------------------------

class CMessageHttpErrorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageHttpErrorInfo) */ {
 public:
  CMessageHttpErrorInfo();
  virtual ~CMessageHttpErrorInfo();

  CMessageHttpErrorInfo(const CMessageHttpErrorInfo& from);

  inline CMessageHttpErrorInfo& operator=(const CMessageHttpErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageHttpErrorInfo(CMessageHttpErrorInfo&& from) noexcept
    : CMessageHttpErrorInfo() {
    *this = ::std::move(from);
  }

  inline CMessageHttpErrorInfo& operator=(CMessageHttpErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageHttpErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageHttpErrorInfo* internal_default_instance() {
    return reinterpret_cast<const CMessageHttpErrorInfo*>(
               &_CMessageHttpErrorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMessageHttpErrorInfo* other);
  friend void swap(CMessageHttpErrorInfo& a, CMessageHttpErrorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageHttpErrorInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageHttpErrorInfo>(NULL);
  }

  CMessageHttpErrorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageHttpErrorInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageHttpErrorInfo& from);
  void MergeFrom(const CMessageHttpErrorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageHttpErrorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageHttpErrorInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5fhttp_5ferror_2eproto::TableStruct;
  friend void ::protobuf_message_5fhttp_5ferror_2eproto::InitDefaultsCMessageHttpErrorInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMessageHttpError

// int32 errorcode = 1;
inline void CMessageHttpError::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 CMessageHttpError::errorcode() const {
  // @@protoc_insertion_point(field_get:d5.CMessageHttpError.errorcode)
  return errorcode_;
}
inline void CMessageHttpError::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageHttpError.errorcode)
}

// string errormessage = 2;
inline void CMessageHttpError::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageHttpError::errormessage() const {
  // @@protoc_insertion_point(field_get:d5.CMessageHttpError.errormessage)
  return errormessage_.GetNoArena();
}
inline void CMessageHttpError::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageHttpError.errormessage)
}
#if LANG_CXX11
inline void CMessageHttpError::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageHttpError.errormessage)
}
#endif
inline void CMessageHttpError::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageHttpError.errormessage)
}
inline void CMessageHttpError::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageHttpError.errormessage)
}
inline ::std::string* CMessageHttpError::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageHttpError.errormessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageHttpError::release_errormessage() {
  // @@protoc_insertion_point(field_release:d5.CMessageHttpError.errormessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageHttpError::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageHttpError.errormessage)
}

// -------------------------------------------------------------------

// CMessageHttpErrorInfo

// int32 code = 1;
inline void CMessageHttpErrorInfo::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CMessageHttpErrorInfo::code() const {
  // @@protoc_insertion_point(field_get:d5.CMessageHttpErrorInfo.code)
  return code_;
}
inline void CMessageHttpErrorInfo::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageHttpErrorInfo.code)
}

// string msg = 2;
inline void CMessageHttpErrorInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageHttpErrorInfo::msg() const {
  // @@protoc_insertion_point(field_get:d5.CMessageHttpErrorInfo.msg)
  return msg_.GetNoArena();
}
inline void CMessageHttpErrorInfo::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageHttpErrorInfo.msg)
}
#if LANG_CXX11
inline void CMessageHttpErrorInfo::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageHttpErrorInfo.msg)
}
#endif
inline void CMessageHttpErrorInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageHttpErrorInfo.msg)
}
inline void CMessageHttpErrorInfo::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageHttpErrorInfo.msg)
}
inline ::std::string* CMessageHttpErrorInfo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageHttpErrorInfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageHttpErrorInfo::release_msg() {
  // @@protoc_insertion_point(field_release:d5.CMessageHttpErrorInfo.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageHttpErrorInfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageHttpErrorInfo.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fhttp_5ferror_2eproto_INCLUDED
