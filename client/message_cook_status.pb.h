// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_cook_status.proto

#ifndef PROTOBUF_message_5fcook_5fstatus_2eproto_INCLUDED
#define PROTOBUF_message_5fcook_5fstatus_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_5fcook_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCMessageCookStatusRequestImpl();
void InitDefaultsCMessageCookStatusRequest();
void InitDefaultsCMessageCookStatusResponseImpl();
void InitDefaultsCMessageCookStatusResponse();
inline void InitDefaults() {
  InitDefaultsCMessageCookStatusRequest();
  InitDefaultsCMessageCookStatusResponse();
}
}  // namespace protobuf_message_5fcook_5fstatus_2eproto
namespace d5 {
class CMessageCookStatusRequest;
class CMessageCookStatusRequestDefaultTypeInternal;
extern CMessageCookStatusRequestDefaultTypeInternal _CMessageCookStatusRequest_default_instance_;
class CMessageCookStatusResponse;
class CMessageCookStatusResponseDefaultTypeInternal;
extern CMessageCookStatusResponseDefaultTypeInternal _CMessageCookStatusResponse_default_instance_;
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::CMessageCookStatusRequest* Arena::Create< ::d5::CMessageCookStatusRequest>(Arena*);
template<> ::d5::CMessageCookStatusResponse* Arena::Create< ::d5::CMessageCookStatusResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {

// ===================================================================

class CMessageCookStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageCookStatusRequest) */ {
 public:
  CMessageCookStatusRequest();
  virtual ~CMessageCookStatusRequest();

  CMessageCookStatusRequest(const CMessageCookStatusRequest& from);

  inline CMessageCookStatusRequest& operator=(const CMessageCookStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageCookStatusRequest(CMessageCookStatusRequest&& from) noexcept
    : CMessageCookStatusRequest() {
    *this = ::std::move(from);
  }

  inline CMessageCookStatusRequest& operator=(CMessageCookStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCookStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageCookStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CMessageCookStatusRequest*>(
               &_CMessageCookStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMessageCookStatusRequest* other);
  friend void swap(CMessageCookStatusRequest& a, CMessageCookStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageCookStatusRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageCookStatusRequest>(NULL);
  }

  CMessageCookStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageCookStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageCookStatusRequest& from);
  void MergeFrom(const CMessageCookStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageCookStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 task_type = 4;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 4;
  ::google::protobuf::int32 task_type() const;
  void set_task_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.CMessageCookStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 task_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5fcook_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_message_5fcook_5fstatus_2eproto::InitDefaultsCMessageCookStatusRequestImpl();
};
// -------------------------------------------------------------------

class CMessageCookStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.CMessageCookStatusResponse) */ {
 public:
  CMessageCookStatusResponse();
  virtual ~CMessageCookStatusResponse();

  CMessageCookStatusResponse(const CMessageCookStatusResponse& from);

  inline CMessageCookStatusResponse& operator=(const CMessageCookStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMessageCookStatusResponse(CMessageCookStatusResponse&& from) noexcept
    : CMessageCookStatusResponse() {
    *this = ::std::move(from);
  }

  inline CMessageCookStatusResponse& operator=(CMessageCookStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCookStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMessageCookStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CMessageCookStatusResponse*>(
               &_CMessageCookStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMessageCookStatusResponse* other);
  friend void swap(CMessageCookStatusResponse& a, CMessageCookStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMessageCookStatusResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageCookStatusResponse>(NULL);
  }

  CMessageCookStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CMessageCookStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMessageCookStatusResponse& from);
  void MergeFrom(const CMessageCookStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMessageCookStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string output_url = 5;
  void clear_output_url();
  static const int kOutputUrlFieldNumber = 5;
  const ::std::string& output_url() const;
  void set_output_url(const ::std::string& value);
  #if LANG_CXX11
  void set_output_url(::std::string&& value);
  #endif
  void set_output_url(const char* value);
  void set_output_url(const char* value, size_t size);
  ::std::string* mutable_output_url();
  ::std::string* release_output_url();
  void set_allocated_output_url(::std::string* output_url);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 cook_stage = 4;
  void clear_cook_stage();
  static const int kCookStageFieldNumber = 4;
  ::google::protobuf::int32 cook_stage() const;
  void set_cook_stage(::google::protobuf::int32 value);

  // float percent = 6;
  void clear_percent();
  static const int kPercentFieldNumber = 6;
  float percent() const;
  void set_percent(float value);

  // @@protoc_insertion_point(class_scope:d5.CMessageCookStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr output_url_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cook_stage_;
  float percent_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_5fcook_5fstatus_2eproto::TableStruct;
  friend void ::protobuf_message_5fcook_5fstatus_2eproto::InitDefaultsCMessageCookStatusResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMessageCookStatusRequest

// int32 type = 1;
inline void CMessageCookStatusRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageCookStatusRequest::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusRequest.type)
  return type_;
}
inline void CMessageCookStatusRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusRequest.type)
}

// string uuid = 2;
inline void CMessageCookStatusRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageCookStatusRequest::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageCookStatusRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusRequest.uuid)
}
#if LANG_CXX11
inline void CMessageCookStatusRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageCookStatusRequest.uuid)
}
#endif
inline void CMessageCookStatusRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageCookStatusRequest.uuid)
}
inline void CMessageCookStatusRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageCookStatusRequest.uuid)
}
inline ::std::string* CMessageCookStatusRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageCookStatusRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageCookStatusRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageCookStatusRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageCookStatusRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageCookStatusRequest.uuid)
}

// string id = 3;
inline void CMessageCookStatusRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageCookStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusRequest.id)
  return id_.GetNoArena();
}
inline void CMessageCookStatusRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusRequest.id)
}
#if LANG_CXX11
inline void CMessageCookStatusRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageCookStatusRequest.id)
}
#endif
inline void CMessageCookStatusRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageCookStatusRequest.id)
}
inline void CMessageCookStatusRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageCookStatusRequest.id)
}
inline ::std::string* CMessageCookStatusRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageCookStatusRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageCookStatusRequest::release_id() {
  // @@protoc_insertion_point(field_release:d5.CMessageCookStatusRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageCookStatusRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageCookStatusRequest.id)
}

// int32 task_type = 4;
inline void CMessageCookStatusRequest::clear_task_type() {
  task_type_ = 0;
}
inline ::google::protobuf::int32 CMessageCookStatusRequest::task_type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusRequest.task_type)
  return task_type_;
}
inline void CMessageCookStatusRequest::set_task_type(::google::protobuf::int32 value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusRequest.task_type)
}

// -------------------------------------------------------------------

// CMessageCookStatusResponse

// int32 type = 1;
inline void CMessageCookStatusResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CMessageCookStatusResponse::type() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.type)
  return type_;
}
inline void CMessageCookStatusResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.type)
}

// string uuid = 2;
inline void CMessageCookStatusResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageCookStatusResponse::uuid() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.uuid)
  return uuid_.GetNoArena();
}
inline void CMessageCookStatusResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.uuid)
}
#if LANG_CXX11
inline void CMessageCookStatusResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageCookStatusResponse.uuid)
}
#endif
inline void CMessageCookStatusResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageCookStatusResponse.uuid)
}
inline void CMessageCookStatusResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageCookStatusResponse.uuid)
}
inline ::std::string* CMessageCookStatusResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageCookStatusResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageCookStatusResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:d5.CMessageCookStatusResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageCookStatusResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageCookStatusResponse.uuid)
}

// int32 state = 3;
inline void CMessageCookStatusResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CMessageCookStatusResponse::state() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.state)
  return state_;
}
inline void CMessageCookStatusResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.state)
}

// int32 cook_stage = 4;
inline void CMessageCookStatusResponse::clear_cook_stage() {
  cook_stage_ = 0;
}
inline ::google::protobuf::int32 CMessageCookStatusResponse::cook_stage() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.cook_stage)
  return cook_stage_;
}
inline void CMessageCookStatusResponse::set_cook_stage(::google::protobuf::int32 value) {
  
  cook_stage_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.cook_stage)
}

// string output_url = 5;
inline void CMessageCookStatusResponse::clear_output_url() {
  output_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMessageCookStatusResponse::output_url() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.output_url)
  return output_url_.GetNoArena();
}
inline void CMessageCookStatusResponse::set_output_url(const ::std::string& value) {
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.output_url)
}
#if LANG_CXX11
inline void CMessageCookStatusResponse::set_output_url(::std::string&& value) {
  
  output_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.CMessageCookStatusResponse.output_url)
}
#endif
inline void CMessageCookStatusResponse::set_output_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.CMessageCookStatusResponse.output_url)
}
inline void CMessageCookStatusResponse::set_output_url(const char* value, size_t size) {
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.CMessageCookStatusResponse.output_url)
}
inline ::std::string* CMessageCookStatusResponse::mutable_output_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.CMessageCookStatusResponse.output_url)
  return output_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMessageCookStatusResponse::release_output_url() {
  // @@protoc_insertion_point(field_release:d5.CMessageCookStatusResponse.output_url)
  
  return output_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMessageCookStatusResponse::set_allocated_output_url(::std::string* output_url) {
  if (output_url != NULL) {
    
  } else {
    
  }
  output_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_url);
  // @@protoc_insertion_point(field_set_allocated:d5.CMessageCookStatusResponse.output_url)
}

// float percent = 6;
inline void CMessageCookStatusResponse::clear_percent() {
  percent_ = 0;
}
inline float CMessageCookStatusResponse::percent() const {
  // @@protoc_insertion_point(field_get:d5.CMessageCookStatusResponse.percent)
  return percent_;
}
inline void CMessageCookStatusResponse::set_percent(float value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:d5.CMessageCookStatusResponse.percent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fcook_5fstatus_2eproto_INCLUDED
