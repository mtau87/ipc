// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db1.proto

#ifndef PROTOBUF_db1_2eproto_INCLUDED
#define PROTOBUF_db1_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_db1_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsasset_light_styleImpl();
void InitDefaultsasset_light_style();
void InitDefaultsasset_materialImpl();
void InitDefaultsasset_material();
void InitDefaultsasset_material_categoryImpl();
void InitDefaultsasset_material_category();
void InitDefaultseffect_modeImpl();
void InitDefaultseffect_mode();
void InitDefaultsenvironment_light_templateImpl();
void InitDefaultsenvironment_light_template();
void InitDefaultsfurniture_colorImpl();
void InitDefaultsfurniture_color();
void InitDefaultsfurniture_main_materialImpl();
void InitDefaultsfurniture_main_material();
void InitDefaultsfurniture_styleImpl();
void InitDefaultsfurniture_style();
void InitDefaultsoutdoor_light_styleImpl();
void InitDefaultsoutdoor_light_style();
void InitDefaultsplan_design_templateImpl();
void InitDefaultsplan_design_template();
void InitDefaultsplan_districtImpl();
void InitDefaultsplan_district();
void InitDefaultsplan_property_typeImpl();
void InitDefaultsplan_property_type();
void InitDefaultsplan_room_typeImpl();
void InitDefaultsplan_room_type();
void InitDefaultsplan_template_typeImpl();
void InitDefaultsplan_template_type();
void InitDefaultsproduct_brandImpl();
void InitDefaultsproduct_brand();
void InitDefaultsproduct_category1Impl();
void InitDefaultsproduct_category1();
void InitDefaultsproduct_category2Impl();
void InitDefaultsproduct_category2();
void InitDefaultsproduct_category3Impl();
void InitDefaultsproduct_category3();
void InitDefaultssqlite_sequenceImpl();
void InitDefaultssqlite_sequence();
inline void InitDefaults() {
  InitDefaultsasset_light_style();
  InitDefaultsasset_material();
  InitDefaultsasset_material_category();
  InitDefaultseffect_mode();
  InitDefaultsenvironment_light_template();
  InitDefaultsfurniture_color();
  InitDefaultsfurniture_main_material();
  InitDefaultsfurniture_style();
  InitDefaultsoutdoor_light_style();
  InitDefaultsplan_design_template();
  InitDefaultsplan_district();
  InitDefaultsplan_property_type();
  InitDefaultsplan_room_type();
  InitDefaultsplan_template_type();
  InitDefaultsproduct_brand();
  InitDefaultsproduct_category1();
  InitDefaultsproduct_category2();
  InitDefaultsproduct_category3();
  InitDefaultssqlite_sequence();
}
}  // namespace protobuf_db1_2eproto
namespace d5 {
namespace db1 {
class asset_light_style;
class asset_light_styleDefaultTypeInternal;
extern asset_light_styleDefaultTypeInternal _asset_light_style_default_instance_;
class asset_material;
class asset_materialDefaultTypeInternal;
extern asset_materialDefaultTypeInternal _asset_material_default_instance_;
class asset_material_category;
class asset_material_categoryDefaultTypeInternal;
extern asset_material_categoryDefaultTypeInternal _asset_material_category_default_instance_;
class effect_mode;
class effect_modeDefaultTypeInternal;
extern effect_modeDefaultTypeInternal _effect_mode_default_instance_;
class environment_light_template;
class environment_light_templateDefaultTypeInternal;
extern environment_light_templateDefaultTypeInternal _environment_light_template_default_instance_;
class furniture_color;
class furniture_colorDefaultTypeInternal;
extern furniture_colorDefaultTypeInternal _furniture_color_default_instance_;
class furniture_main_material;
class furniture_main_materialDefaultTypeInternal;
extern furniture_main_materialDefaultTypeInternal _furniture_main_material_default_instance_;
class furniture_style;
class furniture_styleDefaultTypeInternal;
extern furniture_styleDefaultTypeInternal _furniture_style_default_instance_;
class outdoor_light_style;
class outdoor_light_styleDefaultTypeInternal;
extern outdoor_light_styleDefaultTypeInternal _outdoor_light_style_default_instance_;
class plan_design_template;
class plan_design_templateDefaultTypeInternal;
extern plan_design_templateDefaultTypeInternal _plan_design_template_default_instance_;
class plan_district;
class plan_districtDefaultTypeInternal;
extern plan_districtDefaultTypeInternal _plan_district_default_instance_;
class plan_property_type;
class plan_property_typeDefaultTypeInternal;
extern plan_property_typeDefaultTypeInternal _plan_property_type_default_instance_;
class plan_room_type;
class plan_room_typeDefaultTypeInternal;
extern plan_room_typeDefaultTypeInternal _plan_room_type_default_instance_;
class plan_template_type;
class plan_template_typeDefaultTypeInternal;
extern plan_template_typeDefaultTypeInternal _plan_template_type_default_instance_;
class product_brand;
class product_brandDefaultTypeInternal;
extern product_brandDefaultTypeInternal _product_brand_default_instance_;
class product_category1;
class product_category1DefaultTypeInternal;
extern product_category1DefaultTypeInternal _product_category1_default_instance_;
class product_category2;
class product_category2DefaultTypeInternal;
extern product_category2DefaultTypeInternal _product_category2_default_instance_;
class product_category3;
class product_category3DefaultTypeInternal;
extern product_category3DefaultTypeInternal _product_category3_default_instance_;
class sqlite_sequence;
class sqlite_sequenceDefaultTypeInternal;
extern sqlite_sequenceDefaultTypeInternal _sqlite_sequence_default_instance_;
}  // namespace db1
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::db1::asset_light_style* Arena::Create< ::d5::db1::asset_light_style>(Arena*);
template<> ::d5::db1::asset_material* Arena::Create< ::d5::db1::asset_material>(Arena*);
template<> ::d5::db1::asset_material_category* Arena::Create< ::d5::db1::asset_material_category>(Arena*);
template<> ::d5::db1::effect_mode* Arena::Create< ::d5::db1::effect_mode>(Arena*);
template<> ::d5::db1::environment_light_template* Arena::Create< ::d5::db1::environment_light_template>(Arena*);
template<> ::d5::db1::furniture_color* Arena::Create< ::d5::db1::furniture_color>(Arena*);
template<> ::d5::db1::furniture_main_material* Arena::Create< ::d5::db1::furniture_main_material>(Arena*);
template<> ::d5::db1::furniture_style* Arena::Create< ::d5::db1::furniture_style>(Arena*);
template<> ::d5::db1::outdoor_light_style* Arena::Create< ::d5::db1::outdoor_light_style>(Arena*);
template<> ::d5::db1::plan_design_template* Arena::Create< ::d5::db1::plan_design_template>(Arena*);
template<> ::d5::db1::plan_district* Arena::Create< ::d5::db1::plan_district>(Arena*);
template<> ::d5::db1::plan_property_type* Arena::Create< ::d5::db1::plan_property_type>(Arena*);
template<> ::d5::db1::plan_room_type* Arena::Create< ::d5::db1::plan_room_type>(Arena*);
template<> ::d5::db1::plan_template_type* Arena::Create< ::d5::db1::plan_template_type>(Arena*);
template<> ::d5::db1::product_brand* Arena::Create< ::d5::db1::product_brand>(Arena*);
template<> ::d5::db1::product_category1* Arena::Create< ::d5::db1::product_category1>(Arena*);
template<> ::d5::db1::product_category2* Arena::Create< ::d5::db1::product_category2>(Arena*);
template<> ::d5::db1::product_category3* Arena::Create< ::d5::db1::product_category3>(Arena*);
template<> ::d5::db1::sqlite_sequence* Arena::Create< ::d5::db1::sqlite_sequence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {
namespace db1 {

// ===================================================================

class asset_light_style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.asset_light_style) */ {
 public:
  asset_light_style();
  virtual ~asset_light_style();

  asset_light_style(const asset_light_style& from);

  inline asset_light_style& operator=(const asset_light_style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_light_style(asset_light_style&& from) noexcept
    : asset_light_style() {
    *this = ::std::move(from);
  }

  inline asset_light_style& operator=(asset_light_style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_light_style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_light_style* internal_default_instance() {
    return reinterpret_cast<const asset_light_style*>(
               &_asset_light_style_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(asset_light_style* other);
  friend void swap(asset_light_style& a, asset_light_style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_light_style* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_light_style>(NULL);
  }

  asset_light_style* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_light_style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_light_style& from);
  void MergeFrom(const asset_light_style& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_light_style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string folder_name = 2;
  void clear_folder_name();
  static const int kFolderNameFieldNumber = 2;
  const ::std::string& folder_name() const;
  void set_folder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_folder_name(::std::string&& value);
  #endif
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  ::std::string* mutable_folder_name();
  ::std::string* release_folder_name();
  void set_allocated_folder_name(::std::string* folder_name);

  // string ue_path = 6;
  void clear_ue_path();
  static const int kUePathFieldNumber = 6;
  const ::std::string& ue_path() const;
  void set_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_ue_path(::std::string&& value);
  #endif
  void set_ue_path(const char* value);
  void set_ue_path(const char* value, size_t size);
  ::std::string* mutable_ue_path();
  ::std::string* release_ue_path();
  void set_allocated_ue_path(::std::string* ue_path);

  // string pak_url = 7;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 7;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string thumbnail_url = 9;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 9;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string title = 10;
  void clear_title();
  static const int kTitleFieldNumber = 10;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int64 create_time = 3;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 4;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 is_del = 5;
  void clear_is_del();
  static const int kIsDelFieldNumber = 5;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int32 type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.asset_light_style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr folder_name_;
  ::google::protobuf::internal::ArenaStringPtr ue_path_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsasset_light_styleImpl();
};
// -------------------------------------------------------------------

class asset_material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.asset_material) */ {
 public:
  asset_material();
  virtual ~asset_material();

  asset_material(const asset_material& from);

  inline asset_material& operator=(const asset_material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material(asset_material&& from) noexcept
    : asset_material() {
    *this = ::std::move(from);
  }

  inline asset_material& operator=(asset_material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material* internal_default_instance() {
    return reinterpret_cast<const asset_material*>(
               &_asset_material_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(asset_material* other);
  friend void swap(asset_material& a, asset_material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material>(NULL);
  }

  asset_material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material& from);
  void MergeFrom(const asset_material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string ue_path = 3;
  void clear_ue_path();
  static const int kUePathFieldNumber = 3;
  const ::std::string& ue_path() const;
  void set_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_ue_path(::std::string&& value);
  #endif
  void set_ue_path(const char* value);
  void set_ue_path(const char* value, size_t size);
  ::std::string* mutable_ue_path();
  ::std::string* release_ue_path();
  void set_allocated_ue_path(::std::string* ue_path);

  // string mat_info = 4;
  void clear_mat_info();
  static const int kMatInfoFieldNumber = 4;
  const ::std::string& mat_info() const;
  void set_mat_info(const ::std::string& value);
  #if LANG_CXX11
  void set_mat_info(::std::string&& value);
  #endif
  void set_mat_info(const char* value);
  void set_mat_info(const char* value, size_t size);
  ::std::string* mutable_mat_info();
  ::std::string* release_mat_info();
  void set_allocated_mat_info(::std::string* mat_info);

  // string thumbnail_url = 5;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 5;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string pak_url = 24;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 24;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string folder_name = 25;
  void clear_folder_name();
  static const int kFolderNameFieldNumber = 25;
  const ::std::string& folder_name() const;
  void set_folder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_folder_name(::std::string&& value);
  #endif
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  ::std::string* mutable_folder_name();
  ::std::string* release_folder_name();
  void set_allocated_folder_name(::std::string* folder_name);

  // string dependent_file_list = 27;
  void clear_dependent_file_list();
  static const int kDependentFileListFieldNumber = 27;
  const ::std::string& dependent_file_list() const;
  void set_dependent_file_list(const ::std::string& value);
  #if LANG_CXX11
  void set_dependent_file_list(::std::string&& value);
  #endif
  void set_dependent_file_list(const char* value);
  void set_dependent_file_list(const char* value, size_t size);
  ::std::string* mutable_dependent_file_list();
  ::std::string* release_dependent_file_list();
  void set_allocated_dependent_file_list(::std::string* dependent_file_list);

  // int32 is_del = 6;
  void clear_is_del();
  static const int kIsDelFieldNumber = 6;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int32 is_private = 7;
  void clear_is_private();
  static const int kIsPrivateFieldNumber = 7;
  ::google::protobuf::int32 is_private() const;
  void set_is_private(::google::protobuf::int32 value);

  // int32 user_id = 8;
  void clear_user_id();
  static const int kUserIdFieldNumber = 8;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 company_id = 9;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 9;
  ::google::protobuf::int32 company_id() const;
  void set_company_id(::google::protobuf::int32 value);

  // int64 create_time = 10;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 11;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 11;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 category_id = 12;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 12;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // int32 metallic = 17;
  void clear_metallic();
  static const int kMetallicFieldNumber = 17;
  ::google::protobuf::int32 metallic() const;
  void set_metallic(::google::protobuf::int32 value);

  // int32 roughness = 18;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 18;
  ::google::protobuf::int32 roughness() const;
  void set_roughness(::google::protobuf::int32 value);

  // int32 emissive_color = 19;
  void clear_emissive_color();
  static const int kEmissiveColorFieldNumber = 19;
  ::google::protobuf::int32 emissive_color() const;
  void set_emissive_color(::google::protobuf::int32 value);

  // int32 type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 is_repeat = 21;
  void clear_is_repeat();
  static const int kIsRepeatFieldNumber = 21;
  ::google::protobuf::int32 is_repeat() const;
  void set_is_repeat(::google::protobuf::int32 value);

  // int32 source = 22;
  void clear_source();
  static const int kSourceFieldNumber = 22;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 publish_status = 23;
  void clear_publish_status();
  static const int kPublishStatusFieldNumber = 23;
  ::google::protobuf::int32 publish_status() const;
  void set_publish_status(::google::protobuf::int32 value);

  // int32 sync_status = 26;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 26;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.asset_material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr ue_path_;
  ::google::protobuf::internal::ArenaStringPtr mat_info_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr folder_name_;
  ::google::protobuf::internal::ArenaStringPtr dependent_file_list_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int32 is_private_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 company_id_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int32 metallic_;
  ::google::protobuf::int32 roughness_;
  ::google::protobuf::int32 emissive_color_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 is_repeat_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 publish_status_;
  ::google::protobuf::int32 sync_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsasset_materialImpl();
};
// -------------------------------------------------------------------

class asset_material_category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.asset_material_category) */ {
 public:
  asset_material_category();
  virtual ~asset_material_category();

  asset_material_category(const asset_material_category& from);

  inline asset_material_category& operator=(const asset_material_category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material_category(asset_material_category&& from) noexcept
    : asset_material_category() {
    *this = ::std::move(from);
  }

  inline asset_material_category& operator=(asset_material_category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material_category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material_category* internal_default_instance() {
    return reinterpret_cast<const asset_material_category*>(
               &_asset_material_category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(asset_material_category* other);
  friend void swap(asset_material_category& a, asset_material_category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material_category* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category>(NULL);
  }

  asset_material_category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material_category& from);
  void MergeFrom(const asset_material_category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material_category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 parent_id = 3;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.asset_material_category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsasset_material_categoryImpl();
};
// -------------------------------------------------------------------

class effect_mode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.effect_mode) */ {
 public:
  effect_mode();
  virtual ~effect_mode();

  effect_mode(const effect_mode& from);

  inline effect_mode& operator=(const effect_mode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  effect_mode(effect_mode&& from) noexcept
    : effect_mode() {
    *this = ::std::move(from);
  }

  inline effect_mode& operator=(effect_mode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const effect_mode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const effect_mode* internal_default_instance() {
    return reinterpret_cast<const effect_mode*>(
               &_effect_mode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(effect_mode* other);
  friend void swap(effect_mode& a, effect_mode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline effect_mode* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<effect_mode>(NULL);
  }

  effect_mode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<effect_mode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const effect_mode& from);
  void MergeFrom(const effect_mode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(effect_mode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mode_name = 2;
  void clear_mode_name();
  static const int kModeNameFieldNumber = 2;
  const ::std::string& mode_name() const;
  void set_mode_name(const ::std::string& value);
  #if LANG_CXX11
  void set_mode_name(::std::string&& value);
  #endif
  void set_mode_name(const char* value);
  void set_mode_name(const char* value, size_t size);
  ::std::string* mutable_mode_name();
  ::std::string* release_mode_name();
  void set_allocated_mode_name(::std::string* mode_name);

  // string mode_data = 3;
  void clear_mode_data();
  static const int kModeDataFieldNumber = 3;
  const ::std::string& mode_data() const;
  void set_mode_data(const ::std::string& value);
  #if LANG_CXX11
  void set_mode_data(::std::string&& value);
  #endif
  void set_mode_data(const char* value);
  void set_mode_data(const char* value, size_t size);
  ::std::string* mutable_mode_data();
  ::std::string* release_mode_data();
  void set_allocated_mode_data(::std::string* mode_data);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.effect_mode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mode_name_;
  ::google::protobuf::internal::ArenaStringPtr mode_data_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultseffect_modeImpl();
};
// -------------------------------------------------------------------

class environment_light_template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.environment_light_template) */ {
 public:
  environment_light_template();
  virtual ~environment_light_template();

  environment_light_template(const environment_light_template& from);

  inline environment_light_template& operator=(const environment_light_template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  environment_light_template(environment_light_template&& from) noexcept
    : environment_light_template() {
    *this = ::std::move(from);
  }

  inline environment_light_template& operator=(environment_light_template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const environment_light_template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const environment_light_template* internal_default_instance() {
    return reinterpret_cast<const environment_light_template*>(
               &_environment_light_template_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(environment_light_template* other);
  friend void swap(environment_light_template& a, environment_light_template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline environment_light_template* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<environment_light_template>(NULL);
  }

  environment_light_template* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<environment_light_template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const environment_light_template& from);
  void MergeFrom(const environment_light_template& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(environment_light_template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string thumbnail_url = 3;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 3;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string film_tint = 5;
  void clear_film_tint();
  static const int kFilmTintFieldNumber = 5;
  const ::std::string& film_tint() const;
  void set_film_tint(const ::std::string& value);
  #if LANG_CXX11
  void set_film_tint(::std::string&& value);
  #endif
  void set_film_tint(const char* value);
  void set_film_tint(const char* value, size_t size);
  ::std::string* mutable_film_tint();
  ::std::string* release_film_tint();
  void set_allocated_film_tint(::std::string* film_tint);

  // string film_tint_shadow = 6;
  void clear_film_tint_shadow();
  static const int kFilmTintShadowFieldNumber = 6;
  const ::std::string& film_tint_shadow() const;
  void set_film_tint_shadow(const ::std::string& value);
  #if LANG_CXX11
  void set_film_tint_shadow(::std::string&& value);
  #endif
  void set_film_tint_shadow(const char* value);
  void set_film_tint_shadow(const char* value, size_t size);
  ::std::string* mutable_film_tint_shadow();
  ::std::string* release_film_tint_shadow();
  void set_allocated_film_tint_shadow(::std::string* film_tint_shadow);

  // string bloom_tint_1 = 22;
  void clear_bloom_tint_1();
  static const int kBloomTint1FieldNumber = 22;
  const ::std::string& bloom_tint_1() const;
  void set_bloom_tint_1(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_tint_1(::std::string&& value);
  #endif
  void set_bloom_tint_1(const char* value);
  void set_bloom_tint_1(const char* value, size_t size);
  ::std::string* mutable_bloom_tint_1();
  ::std::string* release_bloom_tint_1();
  void set_allocated_bloom_tint_1(::std::string* bloom_tint_1);

  // string bloom_tint_2 = 23;
  void clear_bloom_tint_2();
  static const int kBloomTint2FieldNumber = 23;
  const ::std::string& bloom_tint_2() const;
  void set_bloom_tint_2(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_tint_2(::std::string&& value);
  #endif
  void set_bloom_tint_2(const char* value);
  void set_bloom_tint_2(const char* value, size_t size);
  ::std::string* mutable_bloom_tint_2();
  ::std::string* release_bloom_tint_2();
  void set_allocated_bloom_tint_2(::std::string* bloom_tint_2);

  // string bloom_tint_3 = 24;
  void clear_bloom_tint_3();
  static const int kBloomTint3FieldNumber = 24;
  const ::std::string& bloom_tint_3() const;
  void set_bloom_tint_3(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_tint_3(::std::string&& value);
  #endif
  void set_bloom_tint_3(const char* value);
  void set_bloom_tint_3(const char* value, size_t size);
  ::std::string* mutable_bloom_tint_3();
  ::std::string* release_bloom_tint_3();
  void set_allocated_bloom_tint_3(::std::string* bloom_tint_3);

  // string bloom_tint_4 = 25;
  void clear_bloom_tint_4();
  static const int kBloomTint4FieldNumber = 25;
  const ::std::string& bloom_tint_4() const;
  void set_bloom_tint_4(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_tint_4(::std::string&& value);
  #endif
  void set_bloom_tint_4(const char* value);
  void set_bloom_tint_4(const char* value, size_t size);
  ::std::string* mutable_bloom_tint_4();
  ::std::string* release_bloom_tint_4();
  void set_allocated_bloom_tint_4(::std::string* bloom_tint_4);

  // string bloom_tint_5 = 26;
  void clear_bloom_tint_5();
  static const int kBloomTint5FieldNumber = 26;
  const ::std::string& bloom_tint_5() const;
  void set_bloom_tint_5(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_tint_5(::std::string&& value);
  #endif
  void set_bloom_tint_5(const char* value);
  void set_bloom_tint_5(const char* value, size_t size);
  ::std::string* mutable_bloom_tint_5();
  ::std::string* release_bloom_tint_5();
  void set_allocated_bloom_tint_5(::std::string* bloom_tint_5);

  // string bloom_dirt_mask_tint = 28;
  void clear_bloom_dirt_mask_tint();
  static const int kBloomDirtMaskTintFieldNumber = 28;
  const ::std::string& bloom_dirt_mask_tint() const;
  void set_bloom_dirt_mask_tint(const ::std::string& value);
  #if LANG_CXX11
  void set_bloom_dirt_mask_tint(::std::string&& value);
  #endif
  void set_bloom_dirt_mask_tint(const char* value);
  void set_bloom_dirt_mask_tint(const char* value, size_t size);
  ::std::string* mutable_bloom_dirt_mask_tint();
  ::std::string* release_bloom_dirt_mask_tint();
  void set_allocated_bloom_dirt_mask_tint(::std::string* bloom_dirt_mask_tint);

  // string global_illumination_indirect_lighting_color = 30;
  void clear_global_illumination_indirect_lighting_color();
  static const int kGlobalIlluminationIndirectLightingColorFieldNumber = 30;
  const ::std::string& global_illumination_indirect_lighting_color() const;
  void set_global_illumination_indirect_lighting_color(const ::std::string& value);
  #if LANG_CXX11
  void set_global_illumination_indirect_lighting_color(::std::string&& value);
  #endif
  void set_global_illumination_indirect_lighting_color(const char* value);
  void set_global_illumination_indirect_lighting_color(const char* value, size_t size);
  ::std::string* mutable_global_illumination_indirect_lighting_color();
  ::std::string* release_global_illumination_indirect_lighting_color();
  void set_allocated_global_illumination_indirect_lighting_color(::std::string* global_illumination_indirect_lighting_color);

  // double white_balance_temp = 4;
  void clear_white_balance_temp();
  static const int kWhiteBalanceTempFieldNumber = 4;
  double white_balance_temp() const;
  void set_white_balance_temp(double value);

  // double film_tint_shadow_blend = 7;
  void clear_film_tint_shadow_blend();
  static const int kFilmTintShadowBlendFieldNumber = 7;
  double film_tint_shadow_blend() const;
  void set_film_tint_shadow_blend(double value);

  // double film_tint_shadow_amount = 8;
  void clear_film_tint_shadow_amount();
  static const int kFilmTintShadowAmountFieldNumber = 8;
  double film_tint_shadow_amount() const;
  void set_film_tint_shadow_amount(double value);

  // double film_saturation = 9;
  void clear_film_saturation();
  static const int kFilmSaturationFieldNumber = 9;
  double film_saturation() const;
  void set_film_saturation(double value);

  // double film_channel_mixer_red = 10;
  void clear_film_channel_mixer_red();
  static const int kFilmChannelMixerRedFieldNumber = 10;
  double film_channel_mixer_red() const;
  void set_film_channel_mixer_red(double value);

  // double film_channel_mixer_green = 11;
  void clear_film_channel_mixer_green();
  static const int kFilmChannelMixerGreenFieldNumber = 11;
  double film_channel_mixer_green() const;
  void set_film_channel_mixer_green(double value);

  // double film_channel_mixer_blue = 12;
  void clear_film_channel_mixer_blue();
  static const int kFilmChannelMixerBlueFieldNumber = 12;
  double film_channel_mixer_blue() const;
  void set_film_channel_mixer_blue(double value);

  // double film_contrast = 13;
  void clear_film_contrast();
  static const int kFilmContrastFieldNumber = 13;
  double film_contrast() const;
  void set_film_contrast(double value);

  // double film_crush_shadows = 14;
  void clear_film_crush_shadows();
  static const int kFilmCrushShadowsFieldNumber = 14;
  double film_crush_shadows() const;
  void set_film_crush_shadows(double value);

  // double film_crush_highlights = 15;
  void clear_film_crush_highlights();
  static const int kFilmCrushHighlightsFieldNumber = 15;
  double film_crush_highlights() const;
  void set_film_crush_highlights(double value);

  // double scene_color_vignette_intensity = 16;
  void clear_scene_color_vignette_intensity();
  static const int kSceneColorVignetteIntensityFieldNumber = 16;
  double scene_color_vignette_intensity() const;
  void set_scene_color_vignette_intensity(double value);

  // double scene_color_grain_jitter = 17;
  void clear_scene_color_grain_jitter();
  static const int kSceneColorGrainJitterFieldNumber = 17;
  double scene_color_grain_jitter() const;
  void set_scene_color_grain_jitter(double value);

  // double scene_color_grain_intensity = 18;
  void clear_scene_color_grain_intensity();
  static const int kSceneColorGrainIntensityFieldNumber = 18;
  double scene_color_grain_intensity() const;
  void set_scene_color_grain_intensity(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 is_show = 35;
  void clear_is_show();
  static const int kIsShowFieldNumber = 35;
  ::google::protobuf::int32 is_show() const;
  void set_is_show(::google::protobuf::int32 value);

  // double bloom_intensity = 19;
  void clear_bloom_intensity();
  static const int kBloomIntensityFieldNumber = 19;
  double bloom_intensity() const;
  void set_bloom_intensity(double value);

  // double bloom_threshold = 20;
  void clear_bloom_threshold();
  static const int kBloomThresholdFieldNumber = 20;
  double bloom_threshold() const;
  void set_bloom_threshold(double value);

  // double bloom_size_scale = 21;
  void clear_bloom_size_scale();
  static const int kBloomSizeScaleFieldNumber = 21;
  double bloom_size_scale() const;
  void set_bloom_size_scale(double value);

  // double bloom_dirt_mask_intensity = 27;
  void clear_bloom_dirt_mask_intensity();
  static const int kBloomDirtMaskIntensityFieldNumber = 27;
  double bloom_dirt_mask_intensity() const;
  void set_bloom_dirt_mask_intensity(double value);

  // double auto_exposure_exposure_bias = 29;
  void clear_auto_exposure_exposure_bias();
  static const int kAutoExposureExposureBiasFieldNumber = 29;
  double auto_exposure_exposure_bias() const;
  void set_auto_exposure_exposure_bias(double value);

  // double global_illumination_indirect_lighting_intensity = 31;
  void clear_global_illumination_indirect_lighting_intensity();
  static const int kGlobalIlluminationIndirectLightingIntensityFieldNumber = 31;
  double global_illumination_indirect_lighting_intensity() const;
  void set_global_illumination_indirect_lighting_intensity(double value);

  // double ambient_occlusion_intensity = 32;
  void clear_ambient_occlusion_intensity();
  static const int kAmbientOcclusionIntensityFieldNumber = 32;
  double ambient_occlusion_intensity() const;
  void set_ambient_occlusion_intensity(double value);

  // double ambient_occlusion_static_fraction = 33;
  void clear_ambient_occlusion_static_fraction();
  static const int kAmbientOcclusionStaticFractionFieldNumber = 33;
  double ambient_occlusion_static_fraction() const;
  void set_ambient_occlusion_static_fraction(double value);

  // double ambient_occlusion_radius = 34;
  void clear_ambient_occlusion_radius();
  static const int kAmbientOcclusionRadiusFieldNumber = 34;
  double ambient_occlusion_radius() const;
  void set_ambient_occlusion_radius(double value);

  // double min_brightness = 36;
  void clear_min_brightness();
  static const int kMinBrightnessFieldNumber = 36;
  double min_brightness() const;
  void set_min_brightness(double value);

  // double max_brightness = 37;
  void clear_max_brightness();
  static const int kMaxBrightnessFieldNumber = 37;
  double max_brightness() const;
  void set_max_brightness(double value);

  // @@protoc_insertion_point(class_scope:d5.db1.environment_light_template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr film_tint_;
  ::google::protobuf::internal::ArenaStringPtr film_tint_shadow_;
  ::google::protobuf::internal::ArenaStringPtr bloom_tint_1_;
  ::google::protobuf::internal::ArenaStringPtr bloom_tint_2_;
  ::google::protobuf::internal::ArenaStringPtr bloom_tint_3_;
  ::google::protobuf::internal::ArenaStringPtr bloom_tint_4_;
  ::google::protobuf::internal::ArenaStringPtr bloom_tint_5_;
  ::google::protobuf::internal::ArenaStringPtr bloom_dirt_mask_tint_;
  ::google::protobuf::internal::ArenaStringPtr global_illumination_indirect_lighting_color_;
  double white_balance_temp_;
  double film_tint_shadow_blend_;
  double film_tint_shadow_amount_;
  double film_saturation_;
  double film_channel_mixer_red_;
  double film_channel_mixer_green_;
  double film_channel_mixer_blue_;
  double film_contrast_;
  double film_crush_shadows_;
  double film_crush_highlights_;
  double scene_color_vignette_intensity_;
  double scene_color_grain_jitter_;
  double scene_color_grain_intensity_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 is_show_;
  double bloom_intensity_;
  double bloom_threshold_;
  double bloom_size_scale_;
  double bloom_dirt_mask_intensity_;
  double auto_exposure_exposure_bias_;
  double global_illumination_indirect_lighting_intensity_;
  double ambient_occlusion_intensity_;
  double ambient_occlusion_static_fraction_;
  double ambient_occlusion_radius_;
  double min_brightness_;
  double max_brightness_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsenvironment_light_templateImpl();
};
// -------------------------------------------------------------------

class furniture_color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.furniture_color) */ {
 public:
  furniture_color();
  virtual ~furniture_color();

  furniture_color(const furniture_color& from);

  inline furniture_color& operator=(const furniture_color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  furniture_color(furniture_color&& from) noexcept
    : furniture_color() {
    *this = ::std::move(from);
  }

  inline furniture_color& operator=(furniture_color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const furniture_color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const furniture_color* internal_default_instance() {
    return reinterpret_cast<const furniture_color*>(
               &_furniture_color_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(furniture_color* other);
  friend void swap(furniture_color& a, furniture_color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline furniture_color* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color>(NULL);
  }

  furniture_color* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const furniture_color& from);
  void MergeFrom(const furniture_color& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(furniture_color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string hex = 3;
  void clear_hex();
  static const int kHexFieldNumber = 3;
  const ::std::string& hex() const;
  void set_hex(const ::std::string& value);
  #if LANG_CXX11
  void set_hex(::std::string&& value);
  #endif
  void set_hex(const char* value);
  void set_hex(const char* value, size_t size);
  ::std::string* mutable_hex();
  ::std::string* release_hex();
  void set_allocated_hex(::std::string* hex);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.furniture_color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr hex_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsfurniture_colorImpl();
};
// -------------------------------------------------------------------

class furniture_main_material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.furniture_main_material) */ {
 public:
  furniture_main_material();
  virtual ~furniture_main_material();

  furniture_main_material(const furniture_main_material& from);

  inline furniture_main_material& operator=(const furniture_main_material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  furniture_main_material(furniture_main_material&& from) noexcept
    : furniture_main_material() {
    *this = ::std::move(from);
  }

  inline furniture_main_material& operator=(furniture_main_material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const furniture_main_material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const furniture_main_material* internal_default_instance() {
    return reinterpret_cast<const furniture_main_material*>(
               &_furniture_main_material_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(furniture_main_material* other);
  friend void swap(furniture_main_material& a, furniture_main_material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline furniture_main_material* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_main_material>(NULL);
  }

  furniture_main_material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_main_material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const furniture_main_material& from);
  void MergeFrom(const furniture_main_material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(furniture_main_material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.furniture_main_material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsfurniture_main_materialImpl();
};
// -------------------------------------------------------------------

class furniture_style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.furniture_style) */ {
 public:
  furniture_style();
  virtual ~furniture_style();

  furniture_style(const furniture_style& from);

  inline furniture_style& operator=(const furniture_style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  furniture_style(furniture_style&& from) noexcept
    : furniture_style() {
    *this = ::std::move(from);
  }

  inline furniture_style& operator=(furniture_style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const furniture_style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const furniture_style* internal_default_instance() {
    return reinterpret_cast<const furniture_style*>(
               &_furniture_style_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(furniture_style* other);
  friend void swap(furniture_style& a, furniture_style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline furniture_style* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_style>(NULL);
  }

  furniture_style* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const furniture_style& from);
  void MergeFrom(const furniture_style& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(furniture_style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.furniture_style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsfurniture_styleImpl();
};
// -------------------------------------------------------------------

class outdoor_light_style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.outdoor_light_style) */ {
 public:
  outdoor_light_style();
  virtual ~outdoor_light_style();

  outdoor_light_style(const outdoor_light_style& from);

  inline outdoor_light_style& operator=(const outdoor_light_style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  outdoor_light_style(outdoor_light_style&& from) noexcept
    : outdoor_light_style() {
    *this = ::std::move(from);
  }

  inline outdoor_light_style& operator=(outdoor_light_style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const outdoor_light_style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const outdoor_light_style* internal_default_instance() {
    return reinterpret_cast<const outdoor_light_style*>(
               &_outdoor_light_style_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(outdoor_light_style* other);
  friend void swap(outdoor_light_style& a, outdoor_light_style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline outdoor_light_style* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<outdoor_light_style>(NULL);
  }

  outdoor_light_style* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<outdoor_light_style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const outdoor_light_style& from);
  void MergeFrom(const outdoor_light_style& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(outdoor_light_style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string directional_light_light_color = 4;
  void clear_directional_light_light_color();
  static const int kDirectionalLightLightColorFieldNumber = 4;
  const ::std::string& directional_light_light_color() const;
  void set_directional_light_light_color(const ::std::string& value);
  #if LANG_CXX11
  void set_directional_light_light_color(::std::string&& value);
  #endif
  void set_directional_light_light_color(const char* value);
  void set_directional_light_light_color(const char* value, size_t size);
  ::std::string* mutable_directional_light_light_color();
  ::std::string* release_directional_light_light_color();
  void set_allocated_directional_light_light_color(::std::string* directional_light_light_color);

  // string sky_light_light_color = 13;
  void clear_sky_light_light_color();
  static const int kSkyLightLightColorFieldNumber = 13;
  const ::std::string& sky_light_light_color() const;
  void set_sky_light_light_color(const ::std::string& value);
  #if LANG_CXX11
  void set_sky_light_light_color(::std::string&& value);
  #endif
  void set_sky_light_light_color(const char* value);
  void set_sky_light_light_color(const char* value, size_t size);
  ::std::string* mutable_sky_light_light_color();
  ::std::string* release_sky_light_light_color();
  void set_allocated_sky_light_light_color(::std::string* sky_light_light_color);

  // string title = 14;
  void clear_title();
  static const int kTitleFieldNumber = 14;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string thumbnail_url = 15;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 15;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string ue_path = 16;
  void clear_ue_path();
  static const int kUePathFieldNumber = 16;
  const ::std::string& ue_path() const;
  void set_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_ue_path(::std::string&& value);
  #endif
  void set_ue_path(const char* value);
  void set_ue_path(const char* value, size_t size);
  ::std::string* mutable_ue_path();
  ::std::string* release_ue_path();
  void set_allocated_ue_path(::std::string* ue_path);

  // string natural_material_lighting_color = 18;
  void clear_natural_material_lighting_color();
  static const int kNaturalMaterialLightingColorFieldNumber = 18;
  const ::std::string& natural_material_lighting_color() const;
  void set_natural_material_lighting_color(const ::std::string& value);
  #if LANG_CXX11
  void set_natural_material_lighting_color(::std::string&& value);
  #endif
  void set_natural_material_lighting_color(const char* value);
  void set_natural_material_lighting_color(const char* value, size_t size);
  ::std::string* mutable_natural_material_lighting_color();
  ::std::string* release_natural_material_lighting_color();
  void set_allocated_natural_material_lighting_color(::std::string* natural_material_lighting_color);

  // double directional_light_rotation = 2;
  void clear_directional_light_rotation();
  static const int kDirectionalLightRotationFieldNumber = 2;
  double directional_light_rotation() const;
  void set_directional_light_rotation(double value);

  // double directional_light_intensity = 3;
  void clear_directional_light_intensity();
  static const int kDirectionalLightIntensityFieldNumber = 3;
  double directional_light_intensity() const;
  void set_directional_light_intensity(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 directional_light_use_temperature = 5;
  void clear_directional_light_use_temperature();
  static const int kDirectionalLightUseTemperatureFieldNumber = 5;
  ::google::protobuf::int32 directional_light_use_temperature() const;
  void set_directional_light_use_temperature(::google::protobuf::int32 value);

  // double directional_light_temperature = 6;
  void clear_directional_light_temperature();
  static const int kDirectionalLightTemperatureFieldNumber = 6;
  double directional_light_temperature() const;
  void set_directional_light_temperature(double value);

  // double directional_light_shadow_bias = 8;
  void clear_directional_light_shadow_bias();
  static const int kDirectionalLightShadowBiasFieldNumber = 8;
  double directional_light_shadow_bias() const;
  void set_directional_light_shadow_bias(double value);

  // int32 directional_light_cast_shadows = 7;
  void clear_directional_light_cast_shadows();
  static const int kDirectionalLightCastShadowsFieldNumber = 7;
  ::google::protobuf::int32 directional_light_cast_shadows() const;
  void set_directional_light_cast_shadows(::google::protobuf::int32 value);

  // int32 directional_light_lighting_channels0 = 9;
  void clear_directional_light_lighting_channels0();
  static const int kDirectionalLightLightingChannels0FieldNumber = 9;
  ::google::protobuf::int32 directional_light_lighting_channels0() const;
  void set_directional_light_lighting_channels0(::google::protobuf::int32 value);

  // int32 directional_light_lighting_channels1 = 10;
  void clear_directional_light_lighting_channels1();
  static const int kDirectionalLightLightingChannels1FieldNumber = 10;
  ::google::protobuf::int32 directional_light_lighting_channels1() const;
  void set_directional_light_lighting_channels1(::google::protobuf::int32 value);

  // int32 directional_light_lighting_channels2 = 11;
  void clear_directional_light_lighting_channels2();
  static const int kDirectionalLightLightingChannels2FieldNumber = 11;
  ::google::protobuf::int32 directional_light_lighting_channels2() const;
  void set_directional_light_lighting_channels2(::google::protobuf::int32 value);

  // double sky_light_intensity = 12;
  void clear_sky_light_intensity();
  static const int kSkyLightIntensityFieldNumber = 12;
  double sky_light_intensity() const;
  void set_sky_light_intensity(double value);

  // double natural_material_lighting_intensity = 17;
  void clear_natural_material_lighting_intensity();
  static const int kNaturalMaterialLightingIntensityFieldNumber = 17;
  double natural_material_lighting_intensity() const;
  void set_natural_material_lighting_intensity(double value);

  // int32 environment_light_id = 19;
  void clear_environment_light_id();
  static const int kEnvironmentLightIdFieldNumber = 19;
  ::google::protobuf::int32 environment_light_id() const;
  void set_environment_light_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.outdoor_light_style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr directional_light_light_color_;
  ::google::protobuf::internal::ArenaStringPtr sky_light_light_color_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr ue_path_;
  ::google::protobuf::internal::ArenaStringPtr natural_material_lighting_color_;
  double directional_light_rotation_;
  double directional_light_intensity_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 directional_light_use_temperature_;
  double directional_light_temperature_;
  double directional_light_shadow_bias_;
  ::google::protobuf::int32 directional_light_cast_shadows_;
  ::google::protobuf::int32 directional_light_lighting_channels0_;
  ::google::protobuf::int32 directional_light_lighting_channels1_;
  ::google::protobuf::int32 directional_light_lighting_channels2_;
  double sky_light_intensity_;
  double natural_material_lighting_intensity_;
  ::google::protobuf::int32 environment_light_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsoutdoor_light_styleImpl();
};
// -------------------------------------------------------------------

class plan_design_template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.plan_design_template) */ {
 public:
  plan_design_template();
  virtual ~plan_design_template();

  plan_design_template(const plan_design_template& from);

  inline plan_design_template& operator=(const plan_design_template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_design_template(plan_design_template&& from) noexcept
    : plan_design_template() {
    *this = ::std::move(from);
  }

  inline plan_design_template& operator=(plan_design_template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_design_template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_design_template* internal_default_instance() {
    return reinterpret_cast<const plan_design_template*>(
               &_plan_design_template_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(plan_design_template* other);
  friend void swap(plan_design_template& a, plan_design_template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_design_template* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design_template>(NULL);
  }

  plan_design_template* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design_template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_design_template& from);
  void MergeFrom(const plan_design_template& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_design_template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string design_file_url = 3;
  void clear_design_file_url();
  static const int kDesignFileUrlFieldNumber = 3;
  const ::std::string& design_file_url() const;
  void set_design_file_url(const ::std::string& value);
  #if LANG_CXX11
  void set_design_file_url(::std::string&& value);
  #endif
  void set_design_file_url(const char* value);
  void set_design_file_url(const char* value, size_t size);
  ::std::string* mutable_design_file_url();
  ::std::string* release_design_file_url();
  void set_allocated_design_file_url(::std::string* design_file_url);

  // string pak_url = 6;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 6;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string thumbnail_url = 7;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 7;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string floor_edit_file_url = 8;
  void clear_floor_edit_file_url();
  static const int kFloorEditFileUrlFieldNumber = 8;
  const ::std::string& floor_edit_file_url() const;
  void set_floor_edit_file_url(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_edit_file_url(::std::string&& value);
  #endif
  void set_floor_edit_file_url(const char* value);
  void set_floor_edit_file_url(const char* value, size_t size);
  ::std::string* mutable_floor_edit_file_url();
  ::std::string* release_floor_edit_file_url();
  void set_allocated_floor_edit_file_url(::std::string* floor_edit_file_url);

  // string detail_info = 9;
  void clear_detail_info();
  static const int kDetailInfoFieldNumber = 9;
  const ::std::string& detail_info() const;
  void set_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_detail_info(::std::string&& value);
  #endif
  void set_detail_info(const char* value);
  void set_detail_info(const char* value, size_t size);
  ::std::string* mutable_detail_info();
  ::std::string* release_detail_info();
  void set_allocated_detail_info(::std::string* detail_info);

  // string floor_ref_url = 17;
  void clear_floor_ref_url();
  static const int kFloorRefUrlFieldNumber = 17;
  const ::std::string& floor_ref_url() const;
  void set_floor_ref_url(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_ref_url(::std::string&& value);
  #endif
  void set_floor_ref_url(const char* value);
  void set_floor_ref_url(const char* value, size_t size);
  ::std::string* mutable_floor_ref_url();
  ::std::string* release_floor_ref_url();
  void set_allocated_floor_ref_url(::std::string* floor_ref_url);

  // double size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  double size() const;
  void set_size(double value);

  // int32 district_id = 10;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 10;
  ::google::protobuf::int32 district_id() const;
  void set_district_id(::google::protobuf::int32 value);

  // int32 property_type_id = 11;
  void clear_property_type_id();
  static const int kPropertyTypeIdFieldNumber = 11;
  ::google::protobuf::int32 property_type_id() const;
  void set_property_type_id(::google::protobuf::int32 value);

  // int32 room_type_id = 12;
  void clear_room_type_id();
  static const int kRoomTypeIdFieldNumber = 12;
  ::google::protobuf::int32 room_type_id() const;
  void set_room_type_id(::google::protobuf::int32 value);

  // int32 template_type_id = 13;
  void clear_template_type_id();
  static const int kTemplateTypeIdFieldNumber = 13;
  ::google::protobuf::int32 template_type_id() const;
  void set_template_type_id(::google::protobuf::int32 value);

  // int64 create_time = 14;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 14;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 15;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 15;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // double floor_ref_width = 18;
  void clear_floor_ref_width();
  static const int kFloorRefWidthFieldNumber = 18;
  double floor_ref_width() const;
  void set_floor_ref_width(double value);

  // double floor_ref_height = 19;
  void clear_floor_ref_height();
  static const int kFloorRefHeightFieldNumber = 19;
  double floor_ref_height() const;
  void set_floor_ref_height(double value);

  // int32 is_published = 16;
  void clear_is_published();
  static const int kIsPublishedFieldNumber = 16;
  ::google::protobuf::int32 is_published() const;
  void set_is_published(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.plan_design_template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr design_file_url_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr floor_edit_file_url_;
  ::google::protobuf::internal::ArenaStringPtr detail_info_;
  ::google::protobuf::internal::ArenaStringPtr floor_ref_url_;
  double size_;
  ::google::protobuf::int32 district_id_;
  ::google::protobuf::int32 property_type_id_;
  ::google::protobuf::int32 room_type_id_;
  ::google::protobuf::int32 template_type_id_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  double floor_ref_width_;
  double floor_ref_height_;
  ::google::protobuf::int32 is_published_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsplan_design_templateImpl();
};
// -------------------------------------------------------------------

class plan_district : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.plan_district) */ {
 public:
  plan_district();
  virtual ~plan_district();

  plan_district(const plan_district& from);

  inline plan_district& operator=(const plan_district& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_district(plan_district&& from) noexcept
    : plan_district() {
    *this = ::std::move(from);
  }

  inline plan_district& operator=(plan_district&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_district& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_district* internal_default_instance() {
    return reinterpret_cast<const plan_district*>(
               &_plan_district_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(plan_district* other);
  friend void swap(plan_district& a, plan_district& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_district* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_district>(NULL);
  }

  plan_district* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_district>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_district& from);
  void MergeFrom(const plan_district& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_district* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 parent_id = 3;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.plan_district)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsplan_districtImpl();
};
// -------------------------------------------------------------------

class plan_property_type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.plan_property_type) */ {
 public:
  plan_property_type();
  virtual ~plan_property_type();

  plan_property_type(const plan_property_type& from);

  inline plan_property_type& operator=(const plan_property_type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_property_type(plan_property_type&& from) noexcept
    : plan_property_type() {
    *this = ::std::move(from);
  }

  inline plan_property_type& operator=(plan_property_type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_property_type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_property_type* internal_default_instance() {
    return reinterpret_cast<const plan_property_type*>(
               &_plan_property_type_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(plan_property_type* other);
  friend void swap(plan_property_type& a, plan_property_type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_property_type* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_property_type>(NULL);
  }

  plan_property_type* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_property_type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_property_type& from);
  void MergeFrom(const plan_property_type& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_property_type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.plan_property_type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsplan_property_typeImpl();
};
// -------------------------------------------------------------------

class plan_room_type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.plan_room_type) */ {
 public:
  plan_room_type();
  virtual ~plan_room_type();

  plan_room_type(const plan_room_type& from);

  inline plan_room_type& operator=(const plan_room_type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_room_type(plan_room_type&& from) noexcept
    : plan_room_type() {
    *this = ::std::move(from);
  }

  inline plan_room_type& operator=(plan_room_type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_room_type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_room_type* internal_default_instance() {
    return reinterpret_cast<const plan_room_type*>(
               &_plan_room_type_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(plan_room_type* other);
  friend void swap(plan_room_type& a, plan_room_type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_room_type* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_room_type>(NULL);
  }

  plan_room_type* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_room_type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_room_type& from);
  void MergeFrom(const plan_room_type& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_room_type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.plan_room_type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsplan_room_typeImpl();
};
// -------------------------------------------------------------------

class plan_template_type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.plan_template_type) */ {
 public:
  plan_template_type();
  virtual ~plan_template_type();

  plan_template_type(const plan_template_type& from);

  inline plan_template_type& operator=(const plan_template_type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_template_type(plan_template_type&& from) noexcept
    : plan_template_type() {
    *this = ::std::move(from);
  }

  inline plan_template_type& operator=(plan_template_type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_template_type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_template_type* internal_default_instance() {
    return reinterpret_cast<const plan_template_type*>(
               &_plan_template_type_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(plan_template_type* other);
  friend void swap(plan_template_type& a, plan_template_type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_template_type* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_template_type>(NULL);
  }

  plan_template_type* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_template_type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_template_type& from);
  void MergeFrom(const plan_template_type& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_template_type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.plan_template_type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsplan_template_typeImpl();
};
// -------------------------------------------------------------------

class product_brand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.product_brand) */ {
 public:
  product_brand();
  virtual ~product_brand();

  product_brand(const product_brand& from);

  inline product_brand& operator=(const product_brand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_brand(product_brand&& from) noexcept
    : product_brand() {
    *this = ::std::move(from);
  }

  inline product_brand& operator=(product_brand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_brand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_brand* internal_default_instance() {
    return reinterpret_cast<const product_brand*>(
               &_product_brand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(product_brand* other);
  friend void swap(product_brand& a, product_brand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_brand* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand>(NULL);
  }

  product_brand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_brand& from);
  void MergeFrom(const product_brand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_brand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.product_brand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsproduct_brandImpl();
};
// -------------------------------------------------------------------

class product_category1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.product_category1) */ {
 public:
  product_category1();
  virtual ~product_category1();

  product_category1(const product_category1& from);

  inline product_category1& operator=(const product_category1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_category1(product_category1&& from) noexcept
    : product_category1() {
    *this = ::std::move(from);
  }

  inline product_category1& operator=(product_category1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_category1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_category1* internal_default_instance() {
    return reinterpret_cast<const product_category1*>(
               &_product_category1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(product_category1* other);
  friend void swap(product_category1& a, product_category1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_category1* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category1>(NULL);
  }

  product_category1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_category1& from);
  void MergeFrom(const product_category1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_category1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.product_category1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsproduct_category1Impl();
};
// -------------------------------------------------------------------

class product_category2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.product_category2) */ {
 public:
  product_category2();
  virtual ~product_category2();

  product_category2(const product_category2& from);

  inline product_category2& operator=(const product_category2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_category2(product_category2&& from) noexcept
    : product_category2() {
    *this = ::std::move(from);
  }

  inline product_category2& operator=(product_category2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_category2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_category2* internal_default_instance() {
    return reinterpret_cast<const product_category2*>(
               &_product_category2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(product_category2* other);
  friend void swap(product_category2& a, product_category2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_category2* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category2>(NULL);
  }

  product_category2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_category2& from);
  void MergeFrom(const product_category2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_category2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 category1_id = 2;
  void clear_category1_id();
  static const int kCategory1IdFieldNumber = 2;
  ::google::protobuf::int32 category1_id() const;
  void set_category1_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.product_category2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 category1_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsproduct_category2Impl();
};
// -------------------------------------------------------------------

class product_category3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.product_category3) */ {
 public:
  product_category3();
  virtual ~product_category3();

  product_category3(const product_category3& from);

  inline product_category3& operator=(const product_category3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_category3(product_category3&& from) noexcept
    : product_category3() {
    *this = ::std::move(from);
  }

  inline product_category3& operator=(product_category3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_category3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_category3* internal_default_instance() {
    return reinterpret_cast<const product_category3*>(
               &_product_category3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(product_category3* other);
  friend void swap(product_category3& a, product_category3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_category3* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category3>(NULL);
  }

  product_category3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_category3& from);
  void MergeFrom(const product_category3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_category3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 4;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 category1_id = 2;
  void clear_category1_id();
  static const int kCategory1IdFieldNumber = 2;
  ::google::protobuf::int32 category1_id() const;
  void set_category1_id(::google::protobuf::int32 value);

  // int32 category2_id = 3;
  void clear_category2_id();
  static const int kCategory2IdFieldNumber = 3;
  ::google::protobuf::int32 category2_id() const;
  void set_category2_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db1.product_category3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 category1_id_;
  ::google::protobuf::int32 category2_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultsproduct_category3Impl();
};
// -------------------------------------------------------------------

class sqlite_sequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db1.sqlite_sequence) */ {
 public:
  sqlite_sequence();
  virtual ~sqlite_sequence();

  sqlite_sequence(const sqlite_sequence& from);

  inline sqlite_sequence& operator=(const sqlite_sequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sqlite_sequence(sqlite_sequence&& from) noexcept
    : sqlite_sequence() {
    *this = ::std::move(from);
  }

  inline sqlite_sequence& operator=(sqlite_sequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sqlite_sequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sqlite_sequence* internal_default_instance() {
    return reinterpret_cast<const sqlite_sequence*>(
               &_sqlite_sequence_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(sqlite_sequence* other);
  friend void swap(sqlite_sequence& a, sqlite_sequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sqlite_sequence* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<sqlite_sequence>(NULL);
  }

  sqlite_sequence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<sqlite_sequence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sqlite_sequence& from);
  void MergeFrom(const sqlite_sequence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sqlite_sequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  const ::std::string& seq() const;
  void set_seq(const ::std::string& value);
  #if LANG_CXX11
  void set_seq(::std::string&& value);
  #endif
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  ::std::string* mutable_seq();
  ::std::string* release_seq();
  void set_allocated_seq(::std::string* seq);

  // @@protoc_insertion_point(class_scope:d5.db1.sqlite_sequence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr seq_;
  mutable int _cached_size_;
  friend struct ::protobuf_db1_2eproto::TableStruct;
  friend void ::protobuf_db1_2eproto::InitDefaultssqlite_sequenceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// asset_light_style

// string id = 1;
inline void asset_light_style::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.id)
  return id_.GetNoArena();
}
inline void asset_light_style::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.id)
}
#if LANG_CXX11
inline void asset_light_style::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.id)
}
#endif
inline void asset_light_style::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.id)
}
inline void asset_light_style::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.id)
}
inline ::std::string* asset_light_style::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_id() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.id)
}

// string folder_name = 2;
inline void asset_light_style::clear_folder_name() {
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::folder_name() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.folder_name)
  return folder_name_.GetNoArena();
}
inline void asset_light_style::set_folder_name(const ::std::string& value) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.folder_name)
}
#if LANG_CXX11
inline void asset_light_style::set_folder_name(::std::string&& value) {
  
  folder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.folder_name)
}
#endif
inline void asset_light_style::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.folder_name)
}
inline void asset_light_style::set_folder_name(const char* value, size_t size) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.folder_name)
}
inline ::std::string* asset_light_style::mutable_folder_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.folder_name)
  return folder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_folder_name() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.folder_name)
  
  return folder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_folder_name(::std::string* folder_name) {
  if (folder_name != NULL) {
    
  } else {
    
  }
  folder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.folder_name)
}

// int64 create_time = 3;
inline void asset_light_style::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_light_style::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.create_time)
  return create_time_;
}
inline void asset_light_style::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.create_time)
}

// int64 update_time = 4;
inline void asset_light_style::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_light_style::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.update_time)
  return update_time_;
}
inline void asset_light_style::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.update_time)
}

// int32 is_del = 5;
inline void asset_light_style::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 asset_light_style::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.is_del)
  return is_del_;
}
inline void asset_light_style::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.is_del)
}

// string ue_path = 6;
inline void asset_light_style::clear_ue_path() {
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.ue_path)
  return ue_path_.GetNoArena();
}
inline void asset_light_style::set_ue_path(const ::std::string& value) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.ue_path)
}
#if LANG_CXX11
inline void asset_light_style::set_ue_path(::std::string&& value) {
  
  ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.ue_path)
}
#endif
inline void asset_light_style::set_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.ue_path)
}
inline void asset_light_style::set_ue_path(const char* value, size_t size) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.ue_path)
}
inline ::std::string* asset_light_style::mutable_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.ue_path)
  return ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.ue_path)
  
  return ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_ue_path(::std::string* ue_path) {
  if (ue_path != NULL) {
    
  } else {
    
  }
  ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.ue_path)
}

// string pak_url = 7;
inline void asset_light_style::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.pak_url)
  return pak_url_.GetNoArena();
}
inline void asset_light_style::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.pak_url)
}
#if LANG_CXX11
inline void asset_light_style::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.pak_url)
}
#endif
inline void asset_light_style::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.pak_url)
}
inline void asset_light_style::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.pak_url)
}
inline ::std::string* asset_light_style::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.pak_url)
}

// int32 type = 8;
inline void asset_light_style::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 asset_light_style::type() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.type)
  return type_;
}
inline void asset_light_style::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.type)
}

// string thumbnail_url = 9;
inline void asset_light_style::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void asset_light_style::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.thumbnail_url)
}
#if LANG_CXX11
inline void asset_light_style::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.thumbnail_url)
}
#endif
inline void asset_light_style::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.thumbnail_url)
}
inline void asset_light_style::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.thumbnail_url)
}
inline ::std::string* asset_light_style::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.thumbnail_url)
}

// string title = 10;
inline void asset_light_style::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_light_style::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_light_style.title)
  return title_.GetNoArena();
}
inline void asset_light_style::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_light_style.title)
}
#if LANG_CXX11
inline void asset_light_style::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_light_style.title)
}
#endif
inline void asset_light_style::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_light_style.title)
}
inline void asset_light_style::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_light_style.title)
}
inline ::std::string* asset_light_style::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_light_style.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_light_style::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_light_style.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_light_style::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_light_style.title)
}

// -------------------------------------------------------------------

// asset_material

// string id = 1;
inline void asset_material::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.id)
  return id_.GetNoArena();
}
inline void asset_material::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.id)
}
#if LANG_CXX11
inline void asset_material::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.id)
}
#endif
inline void asset_material::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.id)
}
inline void asset_material::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.id)
}
inline ::std::string* asset_material::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_id() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.id)
}

// string title = 2;
inline void asset_material::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.title)
  return title_.GetNoArena();
}
inline void asset_material::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.title)
}
#if LANG_CXX11
inline void asset_material::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.title)
}
#endif
inline void asset_material::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.title)
}
inline void asset_material::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.title)
}
inline ::std::string* asset_material::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.title)
}

// string ue_path = 3;
inline void asset_material::clear_ue_path() {
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.ue_path)
  return ue_path_.GetNoArena();
}
inline void asset_material::set_ue_path(const ::std::string& value) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.ue_path)
}
#if LANG_CXX11
inline void asset_material::set_ue_path(::std::string&& value) {
  
  ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.ue_path)
}
#endif
inline void asset_material::set_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.ue_path)
}
inline void asset_material::set_ue_path(const char* value, size_t size) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.ue_path)
}
inline ::std::string* asset_material::mutable_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.ue_path)
  return ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.ue_path)
  
  return ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_ue_path(::std::string* ue_path) {
  if (ue_path != NULL) {
    
  } else {
    
  }
  ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.ue_path)
}

// string mat_info = 4;
inline void asset_material::clear_mat_info() {
  mat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::mat_info() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.mat_info)
  return mat_info_.GetNoArena();
}
inline void asset_material::set_mat_info(const ::std::string& value) {
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.mat_info)
}
#if LANG_CXX11
inline void asset_material::set_mat_info(::std::string&& value) {
  
  mat_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.mat_info)
}
#endif
inline void asset_material::set_mat_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.mat_info)
}
inline void asset_material::set_mat_info(const char* value, size_t size) {
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.mat_info)
}
inline ::std::string* asset_material::mutable_mat_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.mat_info)
  return mat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_mat_info() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.mat_info)
  
  return mat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_mat_info(::std::string* mat_info) {
  if (mat_info != NULL) {
    
  } else {
    
  }
  mat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mat_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.mat_info)
}

// string thumbnail_url = 5;
inline void asset_material::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void asset_material::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.thumbnail_url)
}
#if LANG_CXX11
inline void asset_material::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.thumbnail_url)
}
#endif
inline void asset_material::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.thumbnail_url)
}
inline void asset_material::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.thumbnail_url)
}
inline ::std::string* asset_material::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.thumbnail_url)
}

// int32 is_del = 6;
inline void asset_material::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.is_del)
  return is_del_;
}
inline void asset_material::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.is_del)
}

// int32 is_private = 7;
inline void asset_material::clear_is_private() {
  is_private_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_private() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.is_private)
  return is_private_;
}
inline void asset_material::set_is_private(::google::protobuf::int32 value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.is_private)
}

// int32 user_id = 8;
inline void asset_material::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.user_id)
  return user_id_;
}
inline void asset_material::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.user_id)
}

// int32 company_id = 9;
inline void asset_material::clear_company_id() {
  company_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::company_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.company_id)
  return company_id_;
}
inline void asset_material::set_company_id(::google::protobuf::int32 value) {
  
  company_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.company_id)
}

// int64 create_time = 10;
inline void asset_material::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_material::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.create_time)
  return create_time_;
}
inline void asset_material::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.create_time)
}

// int64 update_time = 11;
inline void asset_material::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_material::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.update_time)
  return update_time_;
}
inline void asset_material::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.update_time)
}

// int32 category_id = 12;
inline void asset_material::clear_category_id() {
  category_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::category_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.category_id)
  return category_id_;
}
inline void asset_material::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.category_id)
}

// int32 metallic = 17;
inline void asset_material::clear_metallic() {
  metallic_ = 0;
}
inline ::google::protobuf::int32 asset_material::metallic() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.metallic)
  return metallic_;
}
inline void asset_material::set_metallic(::google::protobuf::int32 value) {
  
  metallic_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.metallic)
}

// int32 roughness = 18;
inline void asset_material::clear_roughness() {
  roughness_ = 0;
}
inline ::google::protobuf::int32 asset_material::roughness() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.roughness)
  return roughness_;
}
inline void asset_material::set_roughness(::google::protobuf::int32 value) {
  
  roughness_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.roughness)
}

// int32 emissive_color = 19;
inline void asset_material::clear_emissive_color() {
  emissive_color_ = 0;
}
inline ::google::protobuf::int32 asset_material::emissive_color() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.emissive_color)
  return emissive_color_;
}
inline void asset_material::set_emissive_color(::google::protobuf::int32 value) {
  
  emissive_color_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.emissive_color)
}

// int32 type = 20;
inline void asset_material::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 asset_material::type() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.type)
  return type_;
}
inline void asset_material::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.type)
}

// int32 is_repeat = 21;
inline void asset_material::clear_is_repeat() {
  is_repeat_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_repeat() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.is_repeat)
  return is_repeat_;
}
inline void asset_material::set_is_repeat(::google::protobuf::int32 value) {
  
  is_repeat_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.is_repeat)
}

// int32 source = 22;
inline void asset_material::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 asset_material::source() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.source)
  return source_;
}
inline void asset_material::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.source)
}

// int32 publish_status = 23;
inline void asset_material::clear_publish_status() {
  publish_status_ = 0;
}
inline ::google::protobuf::int32 asset_material::publish_status() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.publish_status)
  return publish_status_;
}
inline void asset_material::set_publish_status(::google::protobuf::int32 value) {
  
  publish_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.publish_status)
}

// string pak_url = 24;
inline void asset_material::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.pak_url)
  return pak_url_.GetNoArena();
}
inline void asset_material::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.pak_url)
}
#if LANG_CXX11
inline void asset_material::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.pak_url)
}
#endif
inline void asset_material::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.pak_url)
}
inline void asset_material::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.pak_url)
}
inline ::std::string* asset_material::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.pak_url)
}

// string folder_name = 25;
inline void asset_material::clear_folder_name() {
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::folder_name() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.folder_name)
  return folder_name_.GetNoArena();
}
inline void asset_material::set_folder_name(const ::std::string& value) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.folder_name)
}
#if LANG_CXX11
inline void asset_material::set_folder_name(::std::string&& value) {
  
  folder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.folder_name)
}
#endif
inline void asset_material::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.folder_name)
}
inline void asset_material::set_folder_name(const char* value, size_t size) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.folder_name)
}
inline ::std::string* asset_material::mutable_folder_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.folder_name)
  return folder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_folder_name() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.folder_name)
  
  return folder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_folder_name(::std::string* folder_name) {
  if (folder_name != NULL) {
    
  } else {
    
  }
  folder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.folder_name)
}

// int32 sync_status = 26;
inline void asset_material::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 asset_material::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.sync_status)
  return sync_status_;
}
inline void asset_material::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.sync_status)
}

// string dependent_file_list = 27;
inline void asset_material::clear_dependent_file_list() {
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::dependent_file_list() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material.dependent_file_list)
  return dependent_file_list_.GetNoArena();
}
inline void asset_material::set_dependent_file_list(const ::std::string& value) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material.dependent_file_list)
}
#if LANG_CXX11
inline void asset_material::set_dependent_file_list(::std::string&& value) {
  
  dependent_file_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material.dependent_file_list)
}
#endif
inline void asset_material::set_dependent_file_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material.dependent_file_list)
}
inline void asset_material::set_dependent_file_list(const char* value, size_t size) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material.dependent_file_list)
}
inline ::std::string* asset_material::mutable_dependent_file_list() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material.dependent_file_list)
  return dependent_file_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_dependent_file_list() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material.dependent_file_list)
  
  return dependent_file_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_dependent_file_list(::std::string* dependent_file_list) {
  if (dependent_file_list != NULL) {
    
  } else {
    
  }
  dependent_file_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dependent_file_list);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material.dependent_file_list)
}

// -------------------------------------------------------------------

// asset_material_category

// int32 id = 1;
inline void asset_material_category::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material_category.id)
  return id_;
}
inline void asset_material_category::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material_category.id)
}

// string title = 2;
inline void asset_material_category::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material_category::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material_category.title)
  return title_.GetNoArena();
}
inline void asset_material_category::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.asset_material_category.title)
}
#if LANG_CXX11
inline void asset_material_category::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.asset_material_category.title)
}
#endif
inline void asset_material_category::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.asset_material_category.title)
}
inline void asset_material_category::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.asset_material_category.title)
}
inline ::std::string* asset_material_category::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.asset_material_category.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material_category::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.asset_material_category.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material_category::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.asset_material_category.title)
}

// int32 parent_id = 3;
inline void asset_material_category::clear_parent_id() {
  parent_id_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::parent_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material_category.parent_id)
  return parent_id_;
}
inline void asset_material_category::set_parent_id(::google::protobuf::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material_category.parent_id)
}

// int32 level = 4;
inline void asset_material_category::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::level() const {
  // @@protoc_insertion_point(field_get:d5.db1.asset_material_category.level)
  return level_;
}
inline void asset_material_category::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.asset_material_category.level)
}

// -------------------------------------------------------------------

// effect_mode

// int32 id = 1;
inline void effect_mode::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 effect_mode::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.effect_mode.id)
  return id_;
}
inline void effect_mode::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.effect_mode.id)
}

// string mode_name = 2;
inline void effect_mode::clear_mode_name() {
  mode_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& effect_mode::mode_name() const {
  // @@protoc_insertion_point(field_get:d5.db1.effect_mode.mode_name)
  return mode_name_.GetNoArena();
}
inline void effect_mode::set_mode_name(const ::std::string& value) {
  
  mode_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.effect_mode.mode_name)
}
#if LANG_CXX11
inline void effect_mode::set_mode_name(::std::string&& value) {
  
  mode_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.effect_mode.mode_name)
}
#endif
inline void effect_mode::set_mode_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.effect_mode.mode_name)
}
inline void effect_mode::set_mode_name(const char* value, size_t size) {
  
  mode_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.effect_mode.mode_name)
}
inline ::std::string* effect_mode::mutable_mode_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.effect_mode.mode_name)
  return mode_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* effect_mode::release_mode_name() {
  // @@protoc_insertion_point(field_release:d5.db1.effect_mode.mode_name)
  
  return mode_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void effect_mode::set_allocated_mode_name(::std::string* mode_name) {
  if (mode_name != NULL) {
    
  } else {
    
  }
  mode_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.effect_mode.mode_name)
}

// string mode_data = 3;
inline void effect_mode::clear_mode_data() {
  mode_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& effect_mode::mode_data() const {
  // @@protoc_insertion_point(field_get:d5.db1.effect_mode.mode_data)
  return mode_data_.GetNoArena();
}
inline void effect_mode::set_mode_data(const ::std::string& value) {
  
  mode_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.effect_mode.mode_data)
}
#if LANG_CXX11
inline void effect_mode::set_mode_data(::std::string&& value) {
  
  mode_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.effect_mode.mode_data)
}
#endif
inline void effect_mode::set_mode_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.effect_mode.mode_data)
}
inline void effect_mode::set_mode_data(const char* value, size_t size) {
  
  mode_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.effect_mode.mode_data)
}
inline ::std::string* effect_mode::mutable_mode_data() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.effect_mode.mode_data)
  return mode_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* effect_mode::release_mode_data() {
  // @@protoc_insertion_point(field_release:d5.db1.effect_mode.mode_data)
  
  return mode_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void effect_mode::set_allocated_mode_data(::std::string* mode_data) {
  if (mode_data != NULL) {
    
  } else {
    
  }
  mode_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode_data);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.effect_mode.mode_data)
}

// -------------------------------------------------------------------

// environment_light_template

// int32 id = 1;
inline void environment_light_template::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 environment_light_template::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.id)
  return id_;
}
inline void environment_light_template::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.id)
}

// string title = 2;
inline void environment_light_template::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.title)
  return title_.GetNoArena();
}
inline void environment_light_template::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.title)
}
#if LANG_CXX11
inline void environment_light_template::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.title)
}
#endif
inline void environment_light_template::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.title)
}
inline void environment_light_template::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.title)
}
inline ::std::string* environment_light_template::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.title)
}

// string thumbnail_url = 3;
inline void environment_light_template::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void environment_light_template::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.thumbnail_url)
}
#if LANG_CXX11
inline void environment_light_template::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.thumbnail_url)
}
#endif
inline void environment_light_template::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.thumbnail_url)
}
inline void environment_light_template::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.thumbnail_url)
}
inline ::std::string* environment_light_template::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.thumbnail_url)
}

// double white_balance_temp = 4;
inline void environment_light_template::clear_white_balance_temp() {
  white_balance_temp_ = 0;
}
inline double environment_light_template::white_balance_temp() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.white_balance_temp)
  return white_balance_temp_;
}
inline void environment_light_template::set_white_balance_temp(double value) {
  
  white_balance_temp_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.white_balance_temp)
}

// string film_tint = 5;
inline void environment_light_template::clear_film_tint() {
  film_tint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::film_tint() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_tint)
  return film_tint_.GetNoArena();
}
inline void environment_light_template::set_film_tint(const ::std::string& value) {
  
  film_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_tint)
}
#if LANG_CXX11
inline void environment_light_template::set_film_tint(::std::string&& value) {
  
  film_tint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.film_tint)
}
#endif
inline void environment_light_template::set_film_tint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  film_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.film_tint)
}
inline void environment_light_template::set_film_tint(const char* value, size_t size) {
  
  film_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.film_tint)
}
inline ::std::string* environment_light_template::mutable_film_tint() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.film_tint)
  return film_tint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_film_tint() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.film_tint)
  
  return film_tint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_film_tint(::std::string* film_tint) {
  if (film_tint != NULL) {
    
  } else {
    
  }
  film_tint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), film_tint);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.film_tint)
}

// string film_tint_shadow = 6;
inline void environment_light_template::clear_film_tint_shadow() {
  film_tint_shadow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::film_tint_shadow() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_tint_shadow)
  return film_tint_shadow_.GetNoArena();
}
inline void environment_light_template::set_film_tint_shadow(const ::std::string& value) {
  
  film_tint_shadow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_tint_shadow)
}
#if LANG_CXX11
inline void environment_light_template::set_film_tint_shadow(::std::string&& value) {
  
  film_tint_shadow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.film_tint_shadow)
}
#endif
inline void environment_light_template::set_film_tint_shadow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  film_tint_shadow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.film_tint_shadow)
}
inline void environment_light_template::set_film_tint_shadow(const char* value, size_t size) {
  
  film_tint_shadow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.film_tint_shadow)
}
inline ::std::string* environment_light_template::mutable_film_tint_shadow() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.film_tint_shadow)
  return film_tint_shadow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_film_tint_shadow() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.film_tint_shadow)
  
  return film_tint_shadow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_film_tint_shadow(::std::string* film_tint_shadow) {
  if (film_tint_shadow != NULL) {
    
  } else {
    
  }
  film_tint_shadow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), film_tint_shadow);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.film_tint_shadow)
}

// double film_tint_shadow_blend = 7;
inline void environment_light_template::clear_film_tint_shadow_blend() {
  film_tint_shadow_blend_ = 0;
}
inline double environment_light_template::film_tint_shadow_blend() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_tint_shadow_blend)
  return film_tint_shadow_blend_;
}
inline void environment_light_template::set_film_tint_shadow_blend(double value) {
  
  film_tint_shadow_blend_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_tint_shadow_blend)
}

// double film_tint_shadow_amount = 8;
inline void environment_light_template::clear_film_tint_shadow_amount() {
  film_tint_shadow_amount_ = 0;
}
inline double environment_light_template::film_tint_shadow_amount() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_tint_shadow_amount)
  return film_tint_shadow_amount_;
}
inline void environment_light_template::set_film_tint_shadow_amount(double value) {
  
  film_tint_shadow_amount_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_tint_shadow_amount)
}

// double film_saturation = 9;
inline void environment_light_template::clear_film_saturation() {
  film_saturation_ = 0;
}
inline double environment_light_template::film_saturation() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_saturation)
  return film_saturation_;
}
inline void environment_light_template::set_film_saturation(double value) {
  
  film_saturation_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_saturation)
}

// double film_channel_mixer_red = 10;
inline void environment_light_template::clear_film_channel_mixer_red() {
  film_channel_mixer_red_ = 0;
}
inline double environment_light_template::film_channel_mixer_red() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_channel_mixer_red)
  return film_channel_mixer_red_;
}
inline void environment_light_template::set_film_channel_mixer_red(double value) {
  
  film_channel_mixer_red_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_channel_mixer_red)
}

// double film_channel_mixer_green = 11;
inline void environment_light_template::clear_film_channel_mixer_green() {
  film_channel_mixer_green_ = 0;
}
inline double environment_light_template::film_channel_mixer_green() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_channel_mixer_green)
  return film_channel_mixer_green_;
}
inline void environment_light_template::set_film_channel_mixer_green(double value) {
  
  film_channel_mixer_green_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_channel_mixer_green)
}

// double film_channel_mixer_blue = 12;
inline void environment_light_template::clear_film_channel_mixer_blue() {
  film_channel_mixer_blue_ = 0;
}
inline double environment_light_template::film_channel_mixer_blue() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_channel_mixer_blue)
  return film_channel_mixer_blue_;
}
inline void environment_light_template::set_film_channel_mixer_blue(double value) {
  
  film_channel_mixer_blue_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_channel_mixer_blue)
}

// double film_contrast = 13;
inline void environment_light_template::clear_film_contrast() {
  film_contrast_ = 0;
}
inline double environment_light_template::film_contrast() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_contrast)
  return film_contrast_;
}
inline void environment_light_template::set_film_contrast(double value) {
  
  film_contrast_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_contrast)
}

// double film_crush_shadows = 14;
inline void environment_light_template::clear_film_crush_shadows() {
  film_crush_shadows_ = 0;
}
inline double environment_light_template::film_crush_shadows() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_crush_shadows)
  return film_crush_shadows_;
}
inline void environment_light_template::set_film_crush_shadows(double value) {
  
  film_crush_shadows_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_crush_shadows)
}

// double film_crush_highlights = 15;
inline void environment_light_template::clear_film_crush_highlights() {
  film_crush_highlights_ = 0;
}
inline double environment_light_template::film_crush_highlights() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.film_crush_highlights)
  return film_crush_highlights_;
}
inline void environment_light_template::set_film_crush_highlights(double value) {
  
  film_crush_highlights_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.film_crush_highlights)
}

// double scene_color_vignette_intensity = 16;
inline void environment_light_template::clear_scene_color_vignette_intensity() {
  scene_color_vignette_intensity_ = 0;
}
inline double environment_light_template::scene_color_vignette_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.scene_color_vignette_intensity)
  return scene_color_vignette_intensity_;
}
inline void environment_light_template::set_scene_color_vignette_intensity(double value) {
  
  scene_color_vignette_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.scene_color_vignette_intensity)
}

// double scene_color_grain_jitter = 17;
inline void environment_light_template::clear_scene_color_grain_jitter() {
  scene_color_grain_jitter_ = 0;
}
inline double environment_light_template::scene_color_grain_jitter() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.scene_color_grain_jitter)
  return scene_color_grain_jitter_;
}
inline void environment_light_template::set_scene_color_grain_jitter(double value) {
  
  scene_color_grain_jitter_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.scene_color_grain_jitter)
}

// double scene_color_grain_intensity = 18;
inline void environment_light_template::clear_scene_color_grain_intensity() {
  scene_color_grain_intensity_ = 0;
}
inline double environment_light_template::scene_color_grain_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.scene_color_grain_intensity)
  return scene_color_grain_intensity_;
}
inline void environment_light_template::set_scene_color_grain_intensity(double value) {
  
  scene_color_grain_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.scene_color_grain_intensity)
}

// double bloom_intensity = 19;
inline void environment_light_template::clear_bloom_intensity() {
  bloom_intensity_ = 0;
}
inline double environment_light_template::bloom_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_intensity)
  return bloom_intensity_;
}
inline void environment_light_template::set_bloom_intensity(double value) {
  
  bloom_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_intensity)
}

// double bloom_threshold = 20;
inline void environment_light_template::clear_bloom_threshold() {
  bloom_threshold_ = 0;
}
inline double environment_light_template::bloom_threshold() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_threshold)
  return bloom_threshold_;
}
inline void environment_light_template::set_bloom_threshold(double value) {
  
  bloom_threshold_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_threshold)
}

// double bloom_size_scale = 21;
inline void environment_light_template::clear_bloom_size_scale() {
  bloom_size_scale_ = 0;
}
inline double environment_light_template::bloom_size_scale() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_size_scale)
  return bloom_size_scale_;
}
inline void environment_light_template::set_bloom_size_scale(double value) {
  
  bloom_size_scale_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_size_scale)
}

// string bloom_tint_1 = 22;
inline void environment_light_template::clear_bloom_tint_1() {
  bloom_tint_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_tint_1() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_tint_1)
  return bloom_tint_1_.GetNoArena();
}
inline void environment_light_template::set_bloom_tint_1(const ::std::string& value) {
  
  bloom_tint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_tint_1)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_tint_1(::std::string&& value) {
  
  bloom_tint_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_tint_1)
}
#endif
inline void environment_light_template::set_bloom_tint_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_tint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_tint_1)
}
inline void environment_light_template::set_bloom_tint_1(const char* value, size_t size) {
  
  bloom_tint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_tint_1)
}
inline ::std::string* environment_light_template::mutable_bloom_tint_1() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_tint_1)
  return bloom_tint_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_tint_1() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_tint_1)
  
  return bloom_tint_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_tint_1(::std::string* bloom_tint_1) {
  if (bloom_tint_1 != NULL) {
    
  } else {
    
  }
  bloom_tint_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_tint_1);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_tint_1)
}

// string bloom_tint_2 = 23;
inline void environment_light_template::clear_bloom_tint_2() {
  bloom_tint_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_tint_2() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_tint_2)
  return bloom_tint_2_.GetNoArena();
}
inline void environment_light_template::set_bloom_tint_2(const ::std::string& value) {
  
  bloom_tint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_tint_2)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_tint_2(::std::string&& value) {
  
  bloom_tint_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_tint_2)
}
#endif
inline void environment_light_template::set_bloom_tint_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_tint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_tint_2)
}
inline void environment_light_template::set_bloom_tint_2(const char* value, size_t size) {
  
  bloom_tint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_tint_2)
}
inline ::std::string* environment_light_template::mutable_bloom_tint_2() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_tint_2)
  return bloom_tint_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_tint_2() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_tint_2)
  
  return bloom_tint_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_tint_2(::std::string* bloom_tint_2) {
  if (bloom_tint_2 != NULL) {
    
  } else {
    
  }
  bloom_tint_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_tint_2);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_tint_2)
}

// string bloom_tint_3 = 24;
inline void environment_light_template::clear_bloom_tint_3() {
  bloom_tint_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_tint_3() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_tint_3)
  return bloom_tint_3_.GetNoArena();
}
inline void environment_light_template::set_bloom_tint_3(const ::std::string& value) {
  
  bloom_tint_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_tint_3)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_tint_3(::std::string&& value) {
  
  bloom_tint_3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_tint_3)
}
#endif
inline void environment_light_template::set_bloom_tint_3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_tint_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_tint_3)
}
inline void environment_light_template::set_bloom_tint_3(const char* value, size_t size) {
  
  bloom_tint_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_tint_3)
}
inline ::std::string* environment_light_template::mutable_bloom_tint_3() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_tint_3)
  return bloom_tint_3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_tint_3() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_tint_3)
  
  return bloom_tint_3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_tint_3(::std::string* bloom_tint_3) {
  if (bloom_tint_3 != NULL) {
    
  } else {
    
  }
  bloom_tint_3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_tint_3);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_tint_3)
}

// string bloom_tint_4 = 25;
inline void environment_light_template::clear_bloom_tint_4() {
  bloom_tint_4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_tint_4() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_tint_4)
  return bloom_tint_4_.GetNoArena();
}
inline void environment_light_template::set_bloom_tint_4(const ::std::string& value) {
  
  bloom_tint_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_tint_4)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_tint_4(::std::string&& value) {
  
  bloom_tint_4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_tint_4)
}
#endif
inline void environment_light_template::set_bloom_tint_4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_tint_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_tint_4)
}
inline void environment_light_template::set_bloom_tint_4(const char* value, size_t size) {
  
  bloom_tint_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_tint_4)
}
inline ::std::string* environment_light_template::mutable_bloom_tint_4() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_tint_4)
  return bloom_tint_4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_tint_4() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_tint_4)
  
  return bloom_tint_4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_tint_4(::std::string* bloom_tint_4) {
  if (bloom_tint_4 != NULL) {
    
  } else {
    
  }
  bloom_tint_4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_tint_4);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_tint_4)
}

// string bloom_tint_5 = 26;
inline void environment_light_template::clear_bloom_tint_5() {
  bloom_tint_5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_tint_5() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_tint_5)
  return bloom_tint_5_.GetNoArena();
}
inline void environment_light_template::set_bloom_tint_5(const ::std::string& value) {
  
  bloom_tint_5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_tint_5)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_tint_5(::std::string&& value) {
  
  bloom_tint_5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_tint_5)
}
#endif
inline void environment_light_template::set_bloom_tint_5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_tint_5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_tint_5)
}
inline void environment_light_template::set_bloom_tint_5(const char* value, size_t size) {
  
  bloom_tint_5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_tint_5)
}
inline ::std::string* environment_light_template::mutable_bloom_tint_5() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_tint_5)
  return bloom_tint_5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_tint_5() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_tint_5)
  
  return bloom_tint_5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_tint_5(::std::string* bloom_tint_5) {
  if (bloom_tint_5 != NULL) {
    
  } else {
    
  }
  bloom_tint_5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_tint_5);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_tint_5)
}

// double bloom_dirt_mask_intensity = 27;
inline void environment_light_template::clear_bloom_dirt_mask_intensity() {
  bloom_dirt_mask_intensity_ = 0;
}
inline double environment_light_template::bloom_dirt_mask_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_dirt_mask_intensity)
  return bloom_dirt_mask_intensity_;
}
inline void environment_light_template::set_bloom_dirt_mask_intensity(double value) {
  
  bloom_dirt_mask_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_dirt_mask_intensity)
}

// string bloom_dirt_mask_tint = 28;
inline void environment_light_template::clear_bloom_dirt_mask_tint() {
  bloom_dirt_mask_tint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::bloom_dirt_mask_tint() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.bloom_dirt_mask_tint)
  return bloom_dirt_mask_tint_.GetNoArena();
}
inline void environment_light_template::set_bloom_dirt_mask_tint(const ::std::string& value) {
  
  bloom_dirt_mask_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.bloom_dirt_mask_tint)
}
#if LANG_CXX11
inline void environment_light_template::set_bloom_dirt_mask_tint(::std::string&& value) {
  
  bloom_dirt_mask_tint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.bloom_dirt_mask_tint)
}
#endif
inline void environment_light_template::set_bloom_dirt_mask_tint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bloom_dirt_mask_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.bloom_dirt_mask_tint)
}
inline void environment_light_template::set_bloom_dirt_mask_tint(const char* value, size_t size) {
  
  bloom_dirt_mask_tint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.bloom_dirt_mask_tint)
}
inline ::std::string* environment_light_template::mutable_bloom_dirt_mask_tint() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.bloom_dirt_mask_tint)
  return bloom_dirt_mask_tint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_bloom_dirt_mask_tint() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.bloom_dirt_mask_tint)
  
  return bloom_dirt_mask_tint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_bloom_dirt_mask_tint(::std::string* bloom_dirt_mask_tint) {
  if (bloom_dirt_mask_tint != NULL) {
    
  } else {
    
  }
  bloom_dirt_mask_tint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bloom_dirt_mask_tint);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.bloom_dirt_mask_tint)
}

// double auto_exposure_exposure_bias = 29;
inline void environment_light_template::clear_auto_exposure_exposure_bias() {
  auto_exposure_exposure_bias_ = 0;
}
inline double environment_light_template::auto_exposure_exposure_bias() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.auto_exposure_exposure_bias)
  return auto_exposure_exposure_bias_;
}
inline void environment_light_template::set_auto_exposure_exposure_bias(double value) {
  
  auto_exposure_exposure_bias_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.auto_exposure_exposure_bias)
}

// string global_illumination_indirect_lighting_color = 30;
inline void environment_light_template::clear_global_illumination_indirect_lighting_color() {
  global_illumination_indirect_lighting_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& environment_light_template::global_illumination_indirect_lighting_color() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
  return global_illumination_indirect_lighting_color_.GetNoArena();
}
inline void environment_light_template::set_global_illumination_indirect_lighting_color(const ::std::string& value) {
  
  global_illumination_indirect_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
}
#if LANG_CXX11
inline void environment_light_template::set_global_illumination_indirect_lighting_color(::std::string&& value) {
  
  global_illumination_indirect_lighting_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
}
#endif
inline void environment_light_template::set_global_illumination_indirect_lighting_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  global_illumination_indirect_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
}
inline void environment_light_template::set_global_illumination_indirect_lighting_color(const char* value, size_t size) {
  
  global_illumination_indirect_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
}
inline ::std::string* environment_light_template::mutable_global_illumination_indirect_lighting_color() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
  return global_illumination_indirect_lighting_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* environment_light_template::release_global_illumination_indirect_lighting_color() {
  // @@protoc_insertion_point(field_release:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
  
  return global_illumination_indirect_lighting_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void environment_light_template::set_allocated_global_illumination_indirect_lighting_color(::std::string* global_illumination_indirect_lighting_color) {
  if (global_illumination_indirect_lighting_color != NULL) {
    
  } else {
    
  }
  global_illumination_indirect_lighting_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), global_illumination_indirect_lighting_color);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.environment_light_template.global_illumination_indirect_lighting_color)
}

// double global_illumination_indirect_lighting_intensity = 31;
inline void environment_light_template::clear_global_illumination_indirect_lighting_intensity() {
  global_illumination_indirect_lighting_intensity_ = 0;
}
inline double environment_light_template::global_illumination_indirect_lighting_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.global_illumination_indirect_lighting_intensity)
  return global_illumination_indirect_lighting_intensity_;
}
inline void environment_light_template::set_global_illumination_indirect_lighting_intensity(double value) {
  
  global_illumination_indirect_lighting_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.global_illumination_indirect_lighting_intensity)
}

// double ambient_occlusion_intensity = 32;
inline void environment_light_template::clear_ambient_occlusion_intensity() {
  ambient_occlusion_intensity_ = 0;
}
inline double environment_light_template::ambient_occlusion_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.ambient_occlusion_intensity)
  return ambient_occlusion_intensity_;
}
inline void environment_light_template::set_ambient_occlusion_intensity(double value) {
  
  ambient_occlusion_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.ambient_occlusion_intensity)
}

// double ambient_occlusion_static_fraction = 33;
inline void environment_light_template::clear_ambient_occlusion_static_fraction() {
  ambient_occlusion_static_fraction_ = 0;
}
inline double environment_light_template::ambient_occlusion_static_fraction() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.ambient_occlusion_static_fraction)
  return ambient_occlusion_static_fraction_;
}
inline void environment_light_template::set_ambient_occlusion_static_fraction(double value) {
  
  ambient_occlusion_static_fraction_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.ambient_occlusion_static_fraction)
}

// double ambient_occlusion_radius = 34;
inline void environment_light_template::clear_ambient_occlusion_radius() {
  ambient_occlusion_radius_ = 0;
}
inline double environment_light_template::ambient_occlusion_radius() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.ambient_occlusion_radius)
  return ambient_occlusion_radius_;
}
inline void environment_light_template::set_ambient_occlusion_radius(double value) {
  
  ambient_occlusion_radius_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.ambient_occlusion_radius)
}

// int32 is_show = 35;
inline void environment_light_template::clear_is_show() {
  is_show_ = 0;
}
inline ::google::protobuf::int32 environment_light_template::is_show() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.is_show)
  return is_show_;
}
inline void environment_light_template::set_is_show(::google::protobuf::int32 value) {
  
  is_show_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.is_show)
}

// double min_brightness = 36;
inline void environment_light_template::clear_min_brightness() {
  min_brightness_ = 0;
}
inline double environment_light_template::min_brightness() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.min_brightness)
  return min_brightness_;
}
inline void environment_light_template::set_min_brightness(double value) {
  
  min_brightness_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.min_brightness)
}

// double max_brightness = 37;
inline void environment_light_template::clear_max_brightness() {
  max_brightness_ = 0;
}
inline double environment_light_template::max_brightness() const {
  // @@protoc_insertion_point(field_get:d5.db1.environment_light_template.max_brightness)
  return max_brightness_;
}
inline void environment_light_template::set_max_brightness(double value) {
  
  max_brightness_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.environment_light_template.max_brightness)
}

// -------------------------------------------------------------------

// furniture_color

// int32 id = 1;
inline void furniture_color::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 furniture_color::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_color.id)
  return id_;
}
inline void furniture_color::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.furniture_color.id)
}

// string title = 2;
inline void furniture_color::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& furniture_color::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_color.title)
  return title_.GetNoArena();
}
inline void furniture_color::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.furniture_color.title)
}
#if LANG_CXX11
inline void furniture_color::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.furniture_color.title)
}
#endif
inline void furniture_color::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.furniture_color.title)
}
inline void furniture_color::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.furniture_color.title)
}
inline ::std::string* furniture_color::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.furniture_color.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* furniture_color::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.furniture_color.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void furniture_color::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.furniture_color.title)
}

// string hex = 3;
inline void furniture_color::clear_hex() {
  hex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& furniture_color::hex() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_color.hex)
  return hex_.GetNoArena();
}
inline void furniture_color::set_hex(const ::std::string& value) {
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.furniture_color.hex)
}
#if LANG_CXX11
inline void furniture_color::set_hex(::std::string&& value) {
  
  hex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.furniture_color.hex)
}
#endif
inline void furniture_color::set_hex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.furniture_color.hex)
}
inline void furniture_color::set_hex(const char* value, size_t size) {
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.furniture_color.hex)
}
inline ::std::string* furniture_color::mutable_hex() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.furniture_color.hex)
  return hex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* furniture_color::release_hex() {
  // @@protoc_insertion_point(field_release:d5.db1.furniture_color.hex)
  
  return hex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void furniture_color::set_allocated_hex(::std::string* hex) {
  if (hex != NULL) {
    
  } else {
    
  }
  hex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hex);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.furniture_color.hex)
}

// -------------------------------------------------------------------

// furniture_main_material

// int32 id = 1;
inline void furniture_main_material::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 furniture_main_material::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_main_material.id)
  return id_;
}
inline void furniture_main_material::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.furniture_main_material.id)
}

// string title = 2;
inline void furniture_main_material::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& furniture_main_material::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_main_material.title)
  return title_.GetNoArena();
}
inline void furniture_main_material::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.furniture_main_material.title)
}
#if LANG_CXX11
inline void furniture_main_material::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.furniture_main_material.title)
}
#endif
inline void furniture_main_material::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.furniture_main_material.title)
}
inline void furniture_main_material::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.furniture_main_material.title)
}
inline ::std::string* furniture_main_material::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.furniture_main_material.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* furniture_main_material::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.furniture_main_material.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void furniture_main_material::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.furniture_main_material.title)
}

// -------------------------------------------------------------------

// furniture_style

// int32 id = 1;
inline void furniture_style::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 furniture_style::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_style.id)
  return id_;
}
inline void furniture_style::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.furniture_style.id)
}

// string title = 2;
inline void furniture_style::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& furniture_style::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.furniture_style.title)
  return title_.GetNoArena();
}
inline void furniture_style::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.furniture_style.title)
}
#if LANG_CXX11
inline void furniture_style::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.furniture_style.title)
}
#endif
inline void furniture_style::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.furniture_style.title)
}
inline void furniture_style::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.furniture_style.title)
}
inline ::std::string* furniture_style::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.furniture_style.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* furniture_style::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.furniture_style.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void furniture_style::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.furniture_style.title)
}

// -------------------------------------------------------------------

// outdoor_light_style

// int32 id = 1;
inline void outdoor_light_style::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.id)
  return id_;
}
inline void outdoor_light_style::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.id)
}

// double directional_light_rotation = 2;
inline void outdoor_light_style::clear_directional_light_rotation() {
  directional_light_rotation_ = 0;
}
inline double outdoor_light_style::directional_light_rotation() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_rotation)
  return directional_light_rotation_;
}
inline void outdoor_light_style::set_directional_light_rotation(double value) {
  
  directional_light_rotation_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_rotation)
}

// double directional_light_intensity = 3;
inline void outdoor_light_style::clear_directional_light_intensity() {
  directional_light_intensity_ = 0;
}
inline double outdoor_light_style::directional_light_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_intensity)
  return directional_light_intensity_;
}
inline void outdoor_light_style::set_directional_light_intensity(double value) {
  
  directional_light_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_intensity)
}

// string directional_light_light_color = 4;
inline void outdoor_light_style::clear_directional_light_light_color() {
  directional_light_light_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::directional_light_light_color() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_light_color)
  return directional_light_light_color_.GetNoArena();
}
inline void outdoor_light_style::set_directional_light_light_color(const ::std::string& value) {
  
  directional_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_light_color)
}
#if LANG_CXX11
inline void outdoor_light_style::set_directional_light_light_color(::std::string&& value) {
  
  directional_light_light_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.directional_light_light_color)
}
#endif
inline void outdoor_light_style::set_directional_light_light_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directional_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.directional_light_light_color)
}
inline void outdoor_light_style::set_directional_light_light_color(const char* value, size_t size) {
  
  directional_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.directional_light_light_color)
}
inline ::std::string* outdoor_light_style::mutable_directional_light_light_color() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.directional_light_light_color)
  return directional_light_light_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_directional_light_light_color() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.directional_light_light_color)
  
  return directional_light_light_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_directional_light_light_color(::std::string* directional_light_light_color) {
  if (directional_light_light_color != NULL) {
    
  } else {
    
  }
  directional_light_light_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directional_light_light_color);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.directional_light_light_color)
}

// int32 directional_light_use_temperature = 5;
inline void outdoor_light_style::clear_directional_light_use_temperature() {
  directional_light_use_temperature_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::directional_light_use_temperature() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_use_temperature)
  return directional_light_use_temperature_;
}
inline void outdoor_light_style::set_directional_light_use_temperature(::google::protobuf::int32 value) {
  
  directional_light_use_temperature_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_use_temperature)
}

// double directional_light_temperature = 6;
inline void outdoor_light_style::clear_directional_light_temperature() {
  directional_light_temperature_ = 0;
}
inline double outdoor_light_style::directional_light_temperature() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_temperature)
  return directional_light_temperature_;
}
inline void outdoor_light_style::set_directional_light_temperature(double value) {
  
  directional_light_temperature_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_temperature)
}

// int32 directional_light_cast_shadows = 7;
inline void outdoor_light_style::clear_directional_light_cast_shadows() {
  directional_light_cast_shadows_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::directional_light_cast_shadows() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_cast_shadows)
  return directional_light_cast_shadows_;
}
inline void outdoor_light_style::set_directional_light_cast_shadows(::google::protobuf::int32 value) {
  
  directional_light_cast_shadows_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_cast_shadows)
}

// double directional_light_shadow_bias = 8;
inline void outdoor_light_style::clear_directional_light_shadow_bias() {
  directional_light_shadow_bias_ = 0;
}
inline double outdoor_light_style::directional_light_shadow_bias() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_shadow_bias)
  return directional_light_shadow_bias_;
}
inline void outdoor_light_style::set_directional_light_shadow_bias(double value) {
  
  directional_light_shadow_bias_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_shadow_bias)
}

// int32 directional_light_lighting_channels0 = 9;
inline void outdoor_light_style::clear_directional_light_lighting_channels0() {
  directional_light_lighting_channels0_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::directional_light_lighting_channels0() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_lighting_channels0)
  return directional_light_lighting_channels0_;
}
inline void outdoor_light_style::set_directional_light_lighting_channels0(::google::protobuf::int32 value) {
  
  directional_light_lighting_channels0_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_lighting_channels0)
}

// int32 directional_light_lighting_channels1 = 10;
inline void outdoor_light_style::clear_directional_light_lighting_channels1() {
  directional_light_lighting_channels1_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::directional_light_lighting_channels1() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_lighting_channels1)
  return directional_light_lighting_channels1_;
}
inline void outdoor_light_style::set_directional_light_lighting_channels1(::google::protobuf::int32 value) {
  
  directional_light_lighting_channels1_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_lighting_channels1)
}

// int32 directional_light_lighting_channels2 = 11;
inline void outdoor_light_style::clear_directional_light_lighting_channels2() {
  directional_light_lighting_channels2_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::directional_light_lighting_channels2() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.directional_light_lighting_channels2)
  return directional_light_lighting_channels2_;
}
inline void outdoor_light_style::set_directional_light_lighting_channels2(::google::protobuf::int32 value) {
  
  directional_light_lighting_channels2_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.directional_light_lighting_channels2)
}

// double sky_light_intensity = 12;
inline void outdoor_light_style::clear_sky_light_intensity() {
  sky_light_intensity_ = 0;
}
inline double outdoor_light_style::sky_light_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.sky_light_intensity)
  return sky_light_intensity_;
}
inline void outdoor_light_style::set_sky_light_intensity(double value) {
  
  sky_light_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.sky_light_intensity)
}

// string sky_light_light_color = 13;
inline void outdoor_light_style::clear_sky_light_light_color() {
  sky_light_light_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::sky_light_light_color() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.sky_light_light_color)
  return sky_light_light_color_.GetNoArena();
}
inline void outdoor_light_style::set_sky_light_light_color(const ::std::string& value) {
  
  sky_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.sky_light_light_color)
}
#if LANG_CXX11
inline void outdoor_light_style::set_sky_light_light_color(::std::string&& value) {
  
  sky_light_light_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.sky_light_light_color)
}
#endif
inline void outdoor_light_style::set_sky_light_light_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sky_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.sky_light_light_color)
}
inline void outdoor_light_style::set_sky_light_light_color(const char* value, size_t size) {
  
  sky_light_light_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.sky_light_light_color)
}
inline ::std::string* outdoor_light_style::mutable_sky_light_light_color() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.sky_light_light_color)
  return sky_light_light_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_sky_light_light_color() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.sky_light_light_color)
  
  return sky_light_light_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_sky_light_light_color(::std::string* sky_light_light_color) {
  if (sky_light_light_color != NULL) {
    
  } else {
    
  }
  sky_light_light_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sky_light_light_color);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.sky_light_light_color)
}

// string title = 14;
inline void outdoor_light_style::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.title)
  return title_.GetNoArena();
}
inline void outdoor_light_style::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.title)
}
#if LANG_CXX11
inline void outdoor_light_style::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.title)
}
#endif
inline void outdoor_light_style::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.title)
}
inline void outdoor_light_style::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.title)
}
inline ::std::string* outdoor_light_style::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.title)
}

// string thumbnail_url = 15;
inline void outdoor_light_style::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void outdoor_light_style::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.thumbnail_url)
}
#if LANG_CXX11
inline void outdoor_light_style::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.thumbnail_url)
}
#endif
inline void outdoor_light_style::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.thumbnail_url)
}
inline void outdoor_light_style::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.thumbnail_url)
}
inline ::std::string* outdoor_light_style::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.thumbnail_url)
}

// string ue_path = 16;
inline void outdoor_light_style::clear_ue_path() {
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.ue_path)
  return ue_path_.GetNoArena();
}
inline void outdoor_light_style::set_ue_path(const ::std::string& value) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.ue_path)
}
#if LANG_CXX11
inline void outdoor_light_style::set_ue_path(::std::string&& value) {
  
  ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.ue_path)
}
#endif
inline void outdoor_light_style::set_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.ue_path)
}
inline void outdoor_light_style::set_ue_path(const char* value, size_t size) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.ue_path)
}
inline ::std::string* outdoor_light_style::mutable_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.ue_path)
  return ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.ue_path)
  
  return ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_ue_path(::std::string* ue_path) {
  if (ue_path != NULL) {
    
  } else {
    
  }
  ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.ue_path)
}

// double natural_material_lighting_intensity = 17;
inline void outdoor_light_style::clear_natural_material_lighting_intensity() {
  natural_material_lighting_intensity_ = 0;
}
inline double outdoor_light_style::natural_material_lighting_intensity() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.natural_material_lighting_intensity)
  return natural_material_lighting_intensity_;
}
inline void outdoor_light_style::set_natural_material_lighting_intensity(double value) {
  
  natural_material_lighting_intensity_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.natural_material_lighting_intensity)
}

// string natural_material_lighting_color = 18;
inline void outdoor_light_style::clear_natural_material_lighting_color() {
  natural_material_lighting_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& outdoor_light_style::natural_material_lighting_color() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.natural_material_lighting_color)
  return natural_material_lighting_color_.GetNoArena();
}
inline void outdoor_light_style::set_natural_material_lighting_color(const ::std::string& value) {
  
  natural_material_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.natural_material_lighting_color)
}
#if LANG_CXX11
inline void outdoor_light_style::set_natural_material_lighting_color(::std::string&& value) {
  
  natural_material_lighting_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.outdoor_light_style.natural_material_lighting_color)
}
#endif
inline void outdoor_light_style::set_natural_material_lighting_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  natural_material_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.outdoor_light_style.natural_material_lighting_color)
}
inline void outdoor_light_style::set_natural_material_lighting_color(const char* value, size_t size) {
  
  natural_material_lighting_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.outdoor_light_style.natural_material_lighting_color)
}
inline ::std::string* outdoor_light_style::mutable_natural_material_lighting_color() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.outdoor_light_style.natural_material_lighting_color)
  return natural_material_lighting_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* outdoor_light_style::release_natural_material_lighting_color() {
  // @@protoc_insertion_point(field_release:d5.db1.outdoor_light_style.natural_material_lighting_color)
  
  return natural_material_lighting_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void outdoor_light_style::set_allocated_natural_material_lighting_color(::std::string* natural_material_lighting_color) {
  if (natural_material_lighting_color != NULL) {
    
  } else {
    
  }
  natural_material_lighting_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), natural_material_lighting_color);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.outdoor_light_style.natural_material_lighting_color)
}

// int32 environment_light_id = 19;
inline void outdoor_light_style::clear_environment_light_id() {
  environment_light_id_ = 0;
}
inline ::google::protobuf::int32 outdoor_light_style::environment_light_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.outdoor_light_style.environment_light_id)
  return environment_light_id_;
}
inline void outdoor_light_style::set_environment_light_id(::google::protobuf::int32 value) {
  
  environment_light_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.outdoor_light_style.environment_light_id)
}

// -------------------------------------------------------------------

// plan_design_template

// string id = 1;
inline void plan_design_template::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.id)
  return id_.GetNoArena();
}
inline void plan_design_template::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.id)
}
#if LANG_CXX11
inline void plan_design_template::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.id)
}
#endif
inline void plan_design_template::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.id)
}
inline void plan_design_template::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.id)
}
inline ::std::string* plan_design_template::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_id() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.id)
}

// string title = 2;
inline void plan_design_template::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.title)
  return title_.GetNoArena();
}
inline void plan_design_template::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.title)
}
#if LANG_CXX11
inline void plan_design_template::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.title)
}
#endif
inline void plan_design_template::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.title)
}
inline void plan_design_template::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.title)
}
inline ::std::string* plan_design_template::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.title)
}

// string design_file_url = 3;
inline void plan_design_template::clear_design_file_url() {
  design_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::design_file_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.design_file_url)
  return design_file_url_.GetNoArena();
}
inline void plan_design_template::set_design_file_url(const ::std::string& value) {
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.design_file_url)
}
#if LANG_CXX11
inline void plan_design_template::set_design_file_url(::std::string&& value) {
  
  design_file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.design_file_url)
}
#endif
inline void plan_design_template::set_design_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.design_file_url)
}
inline void plan_design_template::set_design_file_url(const char* value, size_t size) {
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.design_file_url)
}
inline ::std::string* plan_design_template::mutable_design_file_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.design_file_url)
  return design_file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_design_file_url() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.design_file_url)
  
  return design_file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_design_file_url(::std::string* design_file_url) {
  if (design_file_url != NULL) {
    
  } else {
    
  }
  design_file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), design_file_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.design_file_url)
}

// double size = 4;
inline void plan_design_template::clear_size() {
  size_ = 0;
}
inline double plan_design_template::size() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.size)
  return size_;
}
inline void plan_design_template::set_size(double value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.size)
}

// string pak_url = 6;
inline void plan_design_template::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.pak_url)
  return pak_url_.GetNoArena();
}
inline void plan_design_template::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.pak_url)
}
#if LANG_CXX11
inline void plan_design_template::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.pak_url)
}
#endif
inline void plan_design_template::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.pak_url)
}
inline void plan_design_template::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.pak_url)
}
inline ::std::string* plan_design_template::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.pak_url)
}

// string thumbnail_url = 7;
inline void plan_design_template::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void plan_design_template::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.thumbnail_url)
}
#if LANG_CXX11
inline void plan_design_template::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.thumbnail_url)
}
#endif
inline void plan_design_template::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.thumbnail_url)
}
inline void plan_design_template::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.thumbnail_url)
}
inline ::std::string* plan_design_template::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.thumbnail_url)
}

// string floor_edit_file_url = 8;
inline void plan_design_template::clear_floor_edit_file_url() {
  floor_edit_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::floor_edit_file_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.floor_edit_file_url)
  return floor_edit_file_url_.GetNoArena();
}
inline void plan_design_template::set_floor_edit_file_url(const ::std::string& value) {
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.floor_edit_file_url)
}
#if LANG_CXX11
inline void plan_design_template::set_floor_edit_file_url(::std::string&& value) {
  
  floor_edit_file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.floor_edit_file_url)
}
#endif
inline void plan_design_template::set_floor_edit_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.floor_edit_file_url)
}
inline void plan_design_template::set_floor_edit_file_url(const char* value, size_t size) {
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.floor_edit_file_url)
}
inline ::std::string* plan_design_template::mutable_floor_edit_file_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.floor_edit_file_url)
  return floor_edit_file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_floor_edit_file_url() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.floor_edit_file_url)
  
  return floor_edit_file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_floor_edit_file_url(::std::string* floor_edit_file_url) {
  if (floor_edit_file_url != NULL) {
    
  } else {
    
  }
  floor_edit_file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_edit_file_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.floor_edit_file_url)
}

// string detail_info = 9;
inline void plan_design_template::clear_detail_info() {
  detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.detail_info)
  return detail_info_.GetNoArena();
}
inline void plan_design_template::set_detail_info(const ::std::string& value) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.detail_info)
}
#if LANG_CXX11
inline void plan_design_template::set_detail_info(::std::string&& value) {
  
  detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.detail_info)
}
#endif
inline void plan_design_template::set_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.detail_info)
}
inline void plan_design_template::set_detail_info(const char* value, size_t size) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.detail_info)
}
inline ::std::string* plan_design_template::mutable_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.detail_info)
  return detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.detail_info)
  
  return detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_detail_info(::std::string* detail_info) {
  if (detail_info != NULL) {
    
  } else {
    
  }
  detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.detail_info)
}

// int32 district_id = 10;
inline void plan_design_template::clear_district_id() {
  district_id_ = 0;
}
inline ::google::protobuf::int32 plan_design_template::district_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.district_id)
  return district_id_;
}
inline void plan_design_template::set_district_id(::google::protobuf::int32 value) {
  
  district_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.district_id)
}

// int32 property_type_id = 11;
inline void plan_design_template::clear_property_type_id() {
  property_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design_template::property_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.property_type_id)
  return property_type_id_;
}
inline void plan_design_template::set_property_type_id(::google::protobuf::int32 value) {
  
  property_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.property_type_id)
}

// int32 room_type_id = 12;
inline void plan_design_template::clear_room_type_id() {
  room_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design_template::room_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.room_type_id)
  return room_type_id_;
}
inline void plan_design_template::set_room_type_id(::google::protobuf::int32 value) {
  
  room_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.room_type_id)
}

// int32 template_type_id = 13;
inline void plan_design_template::clear_template_type_id() {
  template_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design_template::template_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.template_type_id)
  return template_type_id_;
}
inline void plan_design_template::set_template_type_id(::google::protobuf::int32 value) {
  
  template_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.template_type_id)
}

// int64 create_time = 14;
inline void plan_design_template::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plan_design_template::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.create_time)
  return create_time_;
}
inline void plan_design_template::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.create_time)
}

// int64 update_time = 15;
inline void plan_design_template::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plan_design_template::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.update_time)
  return update_time_;
}
inline void plan_design_template::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.update_time)
}

// int32 is_published = 16;
inline void plan_design_template::clear_is_published() {
  is_published_ = 0;
}
inline ::google::protobuf::int32 plan_design_template::is_published() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.is_published)
  return is_published_;
}
inline void plan_design_template::set_is_published(::google::protobuf::int32 value) {
  
  is_published_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.is_published)
}

// string floor_ref_url = 17;
inline void plan_design_template::clear_floor_ref_url() {
  floor_ref_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design_template::floor_ref_url() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.floor_ref_url)
  return floor_ref_url_.GetNoArena();
}
inline void plan_design_template::set_floor_ref_url(const ::std::string& value) {
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.floor_ref_url)
}
#if LANG_CXX11
inline void plan_design_template::set_floor_ref_url(::std::string&& value) {
  
  floor_ref_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_design_template.floor_ref_url)
}
#endif
inline void plan_design_template::set_floor_ref_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_design_template.floor_ref_url)
}
inline void plan_design_template::set_floor_ref_url(const char* value, size_t size) {
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_design_template.floor_ref_url)
}
inline ::std::string* plan_design_template::mutable_floor_ref_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_design_template.floor_ref_url)
  return floor_ref_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design_template::release_floor_ref_url() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_design_template.floor_ref_url)
  
  return floor_ref_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design_template::set_allocated_floor_ref_url(::std::string* floor_ref_url) {
  if (floor_ref_url != NULL) {
    
  } else {
    
  }
  floor_ref_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_ref_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_design_template.floor_ref_url)
}

// double floor_ref_width = 18;
inline void plan_design_template::clear_floor_ref_width() {
  floor_ref_width_ = 0;
}
inline double plan_design_template::floor_ref_width() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.floor_ref_width)
  return floor_ref_width_;
}
inline void plan_design_template::set_floor_ref_width(double value) {
  
  floor_ref_width_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.floor_ref_width)
}

// double floor_ref_height = 19;
inline void plan_design_template::clear_floor_ref_height() {
  floor_ref_height_ = 0;
}
inline double plan_design_template::floor_ref_height() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_design_template.floor_ref_height)
  return floor_ref_height_;
}
inline void plan_design_template::set_floor_ref_height(double value) {
  
  floor_ref_height_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_design_template.floor_ref_height)
}

// -------------------------------------------------------------------

// plan_district

// int32 id = 1;
inline void plan_district::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 plan_district::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_district.id)
  return id_;
}
inline void plan_district::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_district.id)
}

// string name = 2;
inline void plan_district::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_district::name() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_district.name)
  return name_.GetNoArena();
}
inline void plan_district::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_district.name)
}
#if LANG_CXX11
inline void plan_district::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_district.name)
}
#endif
inline void plan_district::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_district.name)
}
inline void plan_district::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_district.name)
}
inline ::std::string* plan_district::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_district.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_district::release_name() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_district.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_district::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_district.name)
}

// int32 parent_id = 3;
inline void plan_district::clear_parent_id() {
  parent_id_ = 0;
}
inline ::google::protobuf::int32 plan_district::parent_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_district.parent_id)
  return parent_id_;
}
inline void plan_district::set_parent_id(::google::protobuf::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_district.parent_id)
}

// int32 level = 4;
inline void plan_district::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 plan_district::level() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_district.level)
  return level_;
}
inline void plan_district::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_district.level)
}

// -------------------------------------------------------------------

// plan_property_type

// int32 id = 1;
inline void plan_property_type::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 plan_property_type::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_property_type.id)
  return id_;
}
inline void plan_property_type::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_property_type.id)
}

// string title = 2;
inline void plan_property_type::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_property_type::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_property_type.title)
  return title_.GetNoArena();
}
inline void plan_property_type::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_property_type.title)
}
#if LANG_CXX11
inline void plan_property_type::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_property_type.title)
}
#endif
inline void plan_property_type::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_property_type.title)
}
inline void plan_property_type::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_property_type.title)
}
inline ::std::string* plan_property_type::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_property_type.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_property_type::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_property_type.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_property_type::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_property_type.title)
}

// -------------------------------------------------------------------

// plan_room_type

// int32 id = 1;
inline void plan_room_type::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 plan_room_type::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_room_type.id)
  return id_;
}
inline void plan_room_type::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_room_type.id)
}

// string title = 2;
inline void plan_room_type::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_room_type::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_room_type.title)
  return title_.GetNoArena();
}
inline void plan_room_type::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_room_type.title)
}
#if LANG_CXX11
inline void plan_room_type::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_room_type.title)
}
#endif
inline void plan_room_type::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_room_type.title)
}
inline void plan_room_type::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_room_type.title)
}
inline ::std::string* plan_room_type::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_room_type.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_room_type::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_room_type.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_room_type::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_room_type.title)
}

// -------------------------------------------------------------------

// plan_template_type

// int32 id = 1;
inline void plan_template_type::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 plan_template_type::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_template_type.id)
  return id_;
}
inline void plan_template_type::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.plan_template_type.id)
}

// string title = 2;
inline void plan_template_type::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_template_type::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.plan_template_type.title)
  return title_.GetNoArena();
}
inline void plan_template_type::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.plan_template_type.title)
}
#if LANG_CXX11
inline void plan_template_type::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.plan_template_type.title)
}
#endif
inline void plan_template_type::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.plan_template_type.title)
}
inline void plan_template_type::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.plan_template_type.title)
}
inline ::std::string* plan_template_type::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.plan_template_type.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_template_type::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.plan_template_type.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_template_type::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.plan_template_type.title)
}

// -------------------------------------------------------------------

// product_brand

// int32 id = 1;
inline void product_brand::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 product_brand::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_brand.id)
  return id_;
}
inline void product_brand::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_brand.id)
}

// string title = 2;
inline void product_brand::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_brand::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_brand.title)
  return title_.GetNoArena();
}
inline void product_brand::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.product_brand.title)
}
#if LANG_CXX11
inline void product_brand::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.product_brand.title)
}
#endif
inline void product_brand::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.product_brand.title)
}
inline void product_brand::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.product_brand.title)
}
inline ::std::string* product_brand::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.product_brand.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_brand::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.product_brand.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_brand::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.product_brand.title)
}

// -------------------------------------------------------------------

// product_category1

// int32 id = 1;
inline void product_category1::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 product_category1::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category1.id)
  return id_;
}
inline void product_category1::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category1.id)
}

// string title = 2;
inline void product_category1::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_category1::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category1.title)
  return title_.GetNoArena();
}
inline void product_category1::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.product_category1.title)
}
#if LANG_CXX11
inline void product_category1::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.product_category1.title)
}
#endif
inline void product_category1::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.product_category1.title)
}
inline void product_category1::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.product_category1.title)
}
inline ::std::string* product_category1::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.product_category1.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_category1::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.product_category1.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_category1::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.product_category1.title)
}

// -------------------------------------------------------------------

// product_category2

// int32 id = 1;
inline void product_category2::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 product_category2::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category2.id)
  return id_;
}
inline void product_category2::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category2.id)
}

// int32 category1_id = 2;
inline void product_category2::clear_category1_id() {
  category1_id_ = 0;
}
inline ::google::protobuf::int32 product_category2::category1_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category2.category1_id)
  return category1_id_;
}
inline void product_category2::set_category1_id(::google::protobuf::int32 value) {
  
  category1_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category2.category1_id)
}

// string title = 3;
inline void product_category2::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_category2::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category2.title)
  return title_.GetNoArena();
}
inline void product_category2::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.product_category2.title)
}
#if LANG_CXX11
inline void product_category2::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.product_category2.title)
}
#endif
inline void product_category2::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.product_category2.title)
}
inline void product_category2::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.product_category2.title)
}
inline ::std::string* product_category2::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.product_category2.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_category2::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.product_category2.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_category2::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.product_category2.title)
}

// -------------------------------------------------------------------

// product_category3

// int32 id = 1;
inline void product_category3::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 product_category3::id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category3.id)
  return id_;
}
inline void product_category3::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category3.id)
}

// int32 category1_id = 2;
inline void product_category3::clear_category1_id() {
  category1_id_ = 0;
}
inline ::google::protobuf::int32 product_category3::category1_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category3.category1_id)
  return category1_id_;
}
inline void product_category3::set_category1_id(::google::protobuf::int32 value) {
  
  category1_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category3.category1_id)
}

// int32 category2_id = 3;
inline void product_category3::clear_category2_id() {
  category2_id_ = 0;
}
inline ::google::protobuf::int32 product_category3::category2_id() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category3.category2_id)
  return category2_id_;
}
inline void product_category3::set_category2_id(::google::protobuf::int32 value) {
  
  category2_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db1.product_category3.category2_id)
}

// string title = 4;
inline void product_category3::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_category3::title() const {
  // @@protoc_insertion_point(field_get:d5.db1.product_category3.title)
  return title_.GetNoArena();
}
inline void product_category3::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.product_category3.title)
}
#if LANG_CXX11
inline void product_category3::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.product_category3.title)
}
#endif
inline void product_category3::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.product_category3.title)
}
inline void product_category3::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.product_category3.title)
}
inline ::std::string* product_category3::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.product_category3.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_category3::release_title() {
  // @@protoc_insertion_point(field_release:d5.db1.product_category3.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_category3::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.product_category3.title)
}

// -------------------------------------------------------------------

// sqlite_sequence

// string name = 1;
inline void sqlite_sequence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sqlite_sequence::name() const {
  // @@protoc_insertion_point(field_get:d5.db1.sqlite_sequence.name)
  return name_.GetNoArena();
}
inline void sqlite_sequence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.sqlite_sequence.name)
}
#if LANG_CXX11
inline void sqlite_sequence::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.sqlite_sequence.name)
}
#endif
inline void sqlite_sequence::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.sqlite_sequence.name)
}
inline void sqlite_sequence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.sqlite_sequence.name)
}
inline ::std::string* sqlite_sequence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.sqlite_sequence.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sqlite_sequence::release_name() {
  // @@protoc_insertion_point(field_release:d5.db1.sqlite_sequence.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sqlite_sequence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.sqlite_sequence.name)
}

// string seq = 2;
inline void sqlite_sequence::clear_seq() {
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sqlite_sequence::seq() const {
  // @@protoc_insertion_point(field_get:d5.db1.sqlite_sequence.seq)
  return seq_.GetNoArena();
}
inline void sqlite_sequence::set_seq(const ::std::string& value) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db1.sqlite_sequence.seq)
}
#if LANG_CXX11
inline void sqlite_sequence::set_seq(::std::string&& value) {
  
  seq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db1.sqlite_sequence.seq)
}
#endif
inline void sqlite_sequence::set_seq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db1.sqlite_sequence.seq)
}
inline void sqlite_sequence::set_seq(const char* value, size_t size) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db1.sqlite_sequence.seq)
}
inline ::std::string* sqlite_sequence::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:d5.db1.sqlite_sequence.seq)
  return seq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sqlite_sequence::release_seq() {
  // @@protoc_insertion_point(field_release:d5.db1.sqlite_sequence.seq)
  
  return seq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sqlite_sequence::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:d5.db1.sqlite_sequence.seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db1
}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db1_2eproto_INCLUDED
