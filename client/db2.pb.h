// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db2.proto

#ifndef PROTOBUF_db2_2eproto_INCLUDED
#define PROTOBUF_db2_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_db2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[35];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsasset_building_materialImpl();
void InitDefaultsasset_building_material();
void InitDefaultsasset_furnitureImpl();
void InitDefaultsasset_furniture();
void InitDefaultsasset_furniture_styleImpl();
void InitDefaultsasset_furniture_style();
void InitDefaultsasset_furniture_style_material_mapImpl();
void InitDefaultsasset_furniture_style_material_map();
void InitDefaultsasset_materialImpl();
void InitDefaultsasset_material();
void InitDefaultsasset_material_categoryImpl();
void InitDefaultsasset_material_category();
void InitDefaultsfurniture_color_mapImpl();
void InitDefaultsfurniture_color_map();
void InitDefaultsGAImpl();
void InitDefaultsGA();
void InitDefaultsplan_desgin_template_statuImpl();
void InitDefaultsplan_desgin_template_statu();
void InitDefaultsplan_designImpl();
void InitDefaultsplan_design();
void InitDefaultsproductImpl();
void InitDefaultsproduct();
void InitDefaultsproduct_detail_virtualImpl();
void InitDefaultsproduct_detail_virtual();
void InitDefaultsproduct_brand_tempImpl();
void InitDefaultsproduct_brand_temp();
void InitDefaultsproduct_category_mapImpl();
void InitDefaultsproduct_category_map();
void InitDefaultsproduct_imageImpl();
void InitDefaultsproduct_image();
void InitDefaultssetting_rememberImpl();
void InitDefaultssetting_remember();
void InitDefaultsuser_loginImpl();
void InitDefaultsuser_login();
void InitDefaultsfiles_mapImpl();
void InitDefaultsfiles_map();
void InitDefaultsheaderImpl();
void InitDefaultsheader();
void InitDefaultsasset_building_material_dbImpl();
void InitDefaultsasset_building_material_db();
void InitDefaultsasset_furniture_dbImpl();
void InitDefaultsasset_furniture_db();
void InitDefaultsasset_furniture_style_dbImpl();
void InitDefaultsasset_furniture_style_db();
void InitDefaultsasset_furniture_style_material_map_dbImpl();
void InitDefaultsasset_furniture_style_material_map_db();
void InitDefaultsasset_material_dbImpl();
void InitDefaultsasset_material_db();
void InitDefaultsasset_material_category_dbImpl();
void InitDefaultsasset_material_category_db();
void InitDefaultsfurniture_color_map_dbImpl();
void InitDefaultsfurniture_color_map_db();
void InitDefaultsGA_dbImpl();
void InitDefaultsGA_db();
void InitDefaultsplan_desgin_template_statu_dbImpl();
void InitDefaultsplan_desgin_template_statu_db();
void InitDefaultsplan_design_dbImpl();
void InitDefaultsplan_design_db();
void InitDefaultsproduct_dbImpl();
void InitDefaultsproduct_db();
void InitDefaultsproduct_brand_temp_dbImpl();
void InitDefaultsproduct_brand_temp_db();
void InitDefaultsproduct_category_map_dbImpl();
void InitDefaultsproduct_category_map_db();
void InitDefaultsproduct_image_dbImpl();
void InitDefaultsproduct_image_db();
void InitDefaultssetting_remember_dbImpl();
void InitDefaultssetting_remember_db();
void InitDefaultsuser_login_dbImpl();
void InitDefaultsuser_login_db();
inline void InitDefaults() {
  InitDefaultsasset_building_material();
  InitDefaultsasset_furniture();
  InitDefaultsasset_furniture_style();
  InitDefaultsasset_furniture_style_material_map();
  InitDefaultsasset_material();
  InitDefaultsasset_material_category();
  InitDefaultsfurniture_color_map();
  InitDefaultsGA();
  InitDefaultsplan_desgin_template_statu();
  InitDefaultsplan_design();
  InitDefaultsproduct();
  InitDefaultsproduct_detail_virtual();
  InitDefaultsproduct_brand_temp();
  InitDefaultsproduct_category_map();
  InitDefaultsproduct_image();
  InitDefaultssetting_remember();
  InitDefaultsuser_login();
  InitDefaultsfiles_map();
  InitDefaultsheader();
  InitDefaultsasset_building_material_db();
  InitDefaultsasset_furniture_db();
  InitDefaultsasset_furniture_style_db();
  InitDefaultsasset_furniture_style_material_map_db();
  InitDefaultsasset_material_db();
  InitDefaultsasset_material_category_db();
  InitDefaultsfurniture_color_map_db();
  InitDefaultsGA_db();
  InitDefaultsplan_desgin_template_statu_db();
  InitDefaultsplan_design_db();
  InitDefaultsproduct_db();
  InitDefaultsproduct_brand_temp_db();
  InitDefaultsproduct_category_map_db();
  InitDefaultsproduct_image_db();
  InitDefaultssetting_remember_db();
  InitDefaultsuser_login_db();
}
}  // namespace protobuf_db2_2eproto
namespace d5 {
namespace db2 {
class GA;
class GADefaultTypeInternal;
extern GADefaultTypeInternal _GA_default_instance_;
class GA_db;
class GA_dbDefaultTypeInternal;
extern GA_dbDefaultTypeInternal _GA_db_default_instance_;
class asset_building_material;
class asset_building_materialDefaultTypeInternal;
extern asset_building_materialDefaultTypeInternal _asset_building_material_default_instance_;
class asset_building_material_db;
class asset_building_material_dbDefaultTypeInternal;
extern asset_building_material_dbDefaultTypeInternal _asset_building_material_db_default_instance_;
class asset_furniture;
class asset_furnitureDefaultTypeInternal;
extern asset_furnitureDefaultTypeInternal _asset_furniture_default_instance_;
class asset_furniture_db;
class asset_furniture_dbDefaultTypeInternal;
extern asset_furniture_dbDefaultTypeInternal _asset_furniture_db_default_instance_;
class asset_furniture_style;
class asset_furniture_styleDefaultTypeInternal;
extern asset_furniture_styleDefaultTypeInternal _asset_furniture_style_default_instance_;
class asset_furniture_style_db;
class asset_furniture_style_dbDefaultTypeInternal;
extern asset_furniture_style_dbDefaultTypeInternal _asset_furniture_style_db_default_instance_;
class asset_furniture_style_material_map;
class asset_furniture_style_material_mapDefaultTypeInternal;
extern asset_furniture_style_material_mapDefaultTypeInternal _asset_furniture_style_material_map_default_instance_;
class asset_furniture_style_material_map_db;
class asset_furniture_style_material_map_dbDefaultTypeInternal;
extern asset_furniture_style_material_map_dbDefaultTypeInternal _asset_furniture_style_material_map_db_default_instance_;
class asset_material;
class asset_materialDefaultTypeInternal;
extern asset_materialDefaultTypeInternal _asset_material_default_instance_;
class asset_material_category;
class asset_material_categoryDefaultTypeInternal;
extern asset_material_categoryDefaultTypeInternal _asset_material_category_default_instance_;
class asset_material_category_db;
class asset_material_category_dbDefaultTypeInternal;
extern asset_material_category_dbDefaultTypeInternal _asset_material_category_db_default_instance_;
class asset_material_db;
class asset_material_dbDefaultTypeInternal;
extern asset_material_dbDefaultTypeInternal _asset_material_db_default_instance_;
class files_map;
class files_mapDefaultTypeInternal;
extern files_mapDefaultTypeInternal _files_map_default_instance_;
class furniture_color_map;
class furniture_color_mapDefaultTypeInternal;
extern furniture_color_mapDefaultTypeInternal _furniture_color_map_default_instance_;
class furniture_color_map_db;
class furniture_color_map_dbDefaultTypeInternal;
extern furniture_color_map_dbDefaultTypeInternal _furniture_color_map_db_default_instance_;
class header;
class headerDefaultTypeInternal;
extern headerDefaultTypeInternal _header_default_instance_;
class plan_desgin_template_statu;
class plan_desgin_template_statuDefaultTypeInternal;
extern plan_desgin_template_statuDefaultTypeInternal _plan_desgin_template_statu_default_instance_;
class plan_desgin_template_statu_db;
class plan_desgin_template_statu_dbDefaultTypeInternal;
extern plan_desgin_template_statu_dbDefaultTypeInternal _plan_desgin_template_statu_db_default_instance_;
class plan_design;
class plan_designDefaultTypeInternal;
extern plan_designDefaultTypeInternal _plan_design_default_instance_;
class plan_design_db;
class plan_design_dbDefaultTypeInternal;
extern plan_design_dbDefaultTypeInternal _plan_design_db_default_instance_;
class product;
class productDefaultTypeInternal;
extern productDefaultTypeInternal _product_default_instance_;
class product_brand_temp;
class product_brand_tempDefaultTypeInternal;
extern product_brand_tempDefaultTypeInternal _product_brand_temp_default_instance_;
class product_brand_temp_db;
class product_brand_temp_dbDefaultTypeInternal;
extern product_brand_temp_dbDefaultTypeInternal _product_brand_temp_db_default_instance_;
class product_category_map;
class product_category_mapDefaultTypeInternal;
extern product_category_mapDefaultTypeInternal _product_category_map_default_instance_;
class product_category_map_db;
class product_category_map_dbDefaultTypeInternal;
extern product_category_map_dbDefaultTypeInternal _product_category_map_db_default_instance_;
class product_db;
class product_dbDefaultTypeInternal;
extern product_dbDefaultTypeInternal _product_db_default_instance_;
class product_detail_virtual;
class product_detail_virtualDefaultTypeInternal;
extern product_detail_virtualDefaultTypeInternal _product_detail_virtual_default_instance_;
class product_image;
class product_imageDefaultTypeInternal;
extern product_imageDefaultTypeInternal _product_image_default_instance_;
class product_image_db;
class product_image_dbDefaultTypeInternal;
extern product_image_dbDefaultTypeInternal _product_image_db_default_instance_;
class setting_remember;
class setting_rememberDefaultTypeInternal;
extern setting_rememberDefaultTypeInternal _setting_remember_default_instance_;
class setting_remember_db;
class setting_remember_dbDefaultTypeInternal;
extern setting_remember_dbDefaultTypeInternal _setting_remember_db_default_instance_;
class user_login;
class user_loginDefaultTypeInternal;
extern user_loginDefaultTypeInternal _user_login_default_instance_;
class user_login_db;
class user_login_dbDefaultTypeInternal;
extern user_login_dbDefaultTypeInternal _user_login_db_default_instance_;
}  // namespace db2
}  // namespace d5
namespace google {
namespace protobuf {
template<> ::d5::db2::GA* Arena::Create< ::d5::db2::GA>(Arena*);
template<> ::d5::db2::GA_db* Arena::Create< ::d5::db2::GA_db>(Arena*);
template<> ::d5::db2::asset_building_material* Arena::Create< ::d5::db2::asset_building_material>(Arena*);
template<> ::d5::db2::asset_building_material_db* Arena::Create< ::d5::db2::asset_building_material_db>(Arena*);
template<> ::d5::db2::asset_furniture* Arena::Create< ::d5::db2::asset_furniture>(Arena*);
template<> ::d5::db2::asset_furniture_db* Arena::Create< ::d5::db2::asset_furniture_db>(Arena*);
template<> ::d5::db2::asset_furniture_style* Arena::Create< ::d5::db2::asset_furniture_style>(Arena*);
template<> ::d5::db2::asset_furniture_style_db* Arena::Create< ::d5::db2::asset_furniture_style_db>(Arena*);
template<> ::d5::db2::asset_furniture_style_material_map* Arena::Create< ::d5::db2::asset_furniture_style_material_map>(Arena*);
template<> ::d5::db2::asset_furniture_style_material_map_db* Arena::Create< ::d5::db2::asset_furniture_style_material_map_db>(Arena*);
template<> ::d5::db2::asset_material* Arena::Create< ::d5::db2::asset_material>(Arena*);
template<> ::d5::db2::asset_material_category* Arena::Create< ::d5::db2::asset_material_category>(Arena*);
template<> ::d5::db2::asset_material_category_db* Arena::Create< ::d5::db2::asset_material_category_db>(Arena*);
template<> ::d5::db2::asset_material_db* Arena::Create< ::d5::db2::asset_material_db>(Arena*);
template<> ::d5::db2::files_map* Arena::Create< ::d5::db2::files_map>(Arena*);
template<> ::d5::db2::furniture_color_map* Arena::Create< ::d5::db2::furniture_color_map>(Arena*);
template<> ::d5::db2::furniture_color_map_db* Arena::Create< ::d5::db2::furniture_color_map_db>(Arena*);
template<> ::d5::db2::header* Arena::Create< ::d5::db2::header>(Arena*);
template<> ::d5::db2::plan_desgin_template_statu* Arena::Create< ::d5::db2::plan_desgin_template_statu>(Arena*);
template<> ::d5::db2::plan_desgin_template_statu_db* Arena::Create< ::d5::db2::plan_desgin_template_statu_db>(Arena*);
template<> ::d5::db2::plan_design* Arena::Create< ::d5::db2::plan_design>(Arena*);
template<> ::d5::db2::plan_design_db* Arena::Create< ::d5::db2::plan_design_db>(Arena*);
template<> ::d5::db2::product* Arena::Create< ::d5::db2::product>(Arena*);
template<> ::d5::db2::product_brand_temp* Arena::Create< ::d5::db2::product_brand_temp>(Arena*);
template<> ::d5::db2::product_brand_temp_db* Arena::Create< ::d5::db2::product_brand_temp_db>(Arena*);
template<> ::d5::db2::product_category_map* Arena::Create< ::d5::db2::product_category_map>(Arena*);
template<> ::d5::db2::product_category_map_db* Arena::Create< ::d5::db2::product_category_map_db>(Arena*);
template<> ::d5::db2::product_db* Arena::Create< ::d5::db2::product_db>(Arena*);
template<> ::d5::db2::product_detail_virtual* Arena::Create< ::d5::db2::product_detail_virtual>(Arena*);
template<> ::d5::db2::product_image* Arena::Create< ::d5::db2::product_image>(Arena*);
template<> ::d5::db2::product_image_db* Arena::Create< ::d5::db2::product_image_db>(Arena*);
template<> ::d5::db2::setting_remember* Arena::Create< ::d5::db2::setting_remember>(Arena*);
template<> ::d5::db2::setting_remember_db* Arena::Create< ::d5::db2::setting_remember_db>(Arena*);
template<> ::d5::db2::user_login* Arena::Create< ::d5::db2::user_login>(Arena*);
template<> ::d5::db2::user_login_db* Arena::Create< ::d5::db2::user_login_db>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace d5 {
namespace db2 {

// ===================================================================

class asset_building_material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_building_material) */ {
 public:
  asset_building_material();
  virtual ~asset_building_material();

  asset_building_material(const asset_building_material& from);

  inline asset_building_material& operator=(const asset_building_material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_building_material(asset_building_material&& from) noexcept
    : asset_building_material() {
    *this = ::std::move(from);
  }

  inline asset_building_material& operator=(asset_building_material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_building_material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_building_material* internal_default_instance() {
    return reinterpret_cast<const asset_building_material*>(
               &_asset_building_material_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(asset_building_material* other);
  friend void swap(asset_building_material& a, asset_building_material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_building_material* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_building_material>(NULL);
  }

  asset_building_material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_building_material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_building_material& from);
  void MergeFrom(const asset_building_material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_building_material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string material_id = 5;
  void clear_material_id();
  static const int kMaterialIdFieldNumber = 5;
  const ::std::string& material_id() const;
  void set_material_id(const ::std::string& value);
  #if LANG_CXX11
  void set_material_id(::std::string&& value);
  #endif
  void set_material_id(const char* value);
  void set_material_id(const char* value, size_t size);
  ::std::string* mutable_material_id();
  ::std::string* release_material_id();
  void set_allocated_material_id(::std::string* material_id);

  // string detail_info = 6;
  void clear_detail_info();
  static const int kDetailInfoFieldNumber = 6;
  const ::std::string& detail_info() const;
  void set_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_detail_info(::std::string&& value);
  #endif
  void set_detail_info(const char* value);
  void set_detail_info(const char* value, size_t size);
  ::std::string* mutable_detail_info();
  ::std::string* release_detail_info();
  void set_allocated_detail_info(::std::string* detail_info);

  // int32 is_for_floor = 2;
  void clear_is_for_floor();
  static const int kIsForFloorFieldNumber = 2;
  ::google::protobuf::int32 is_for_floor() const;
  void set_is_for_floor(::google::protobuf::int32 value);

  // int32 is_for_wall = 3;
  void clear_is_for_wall();
  static const int kIsForWallFieldNumber = 3;
  ::google::protobuf::int32 is_for_wall() const;
  void set_is_for_wall(::google::protobuf::int32 value);

  // int32 is_for_ceiling = 4;
  void clear_is_for_ceiling();
  static const int kIsForCeilingFieldNumber = 4;
  ::google::protobuf::int32 is_for_ceiling() const;
  void set_is_for_ceiling(::google::protobuf::int32 value);

  // int32 length = 7;
  void clear_length();
  static const int kLengthFieldNumber = 7;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // int32 width = 8;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_building_material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr material_id_;
  ::google::protobuf::internal::ArenaStringPtr detail_info_;
  ::google::protobuf::int32 is_for_floor_;
  ::google::protobuf::int32 is_for_wall_;
  ::google::protobuf::int32 is_for_ceiling_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 width_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_building_materialImpl();
};
// -------------------------------------------------------------------

class asset_furniture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture) */ {
 public:
  asset_furniture();
  virtual ~asset_furniture();

  asset_furniture(const asset_furniture& from);

  inline asset_furniture& operator=(const asset_furniture& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture(asset_furniture&& from) noexcept
    : asset_furniture() {
    *this = ::std::move(from);
  }

  inline asset_furniture& operator=(asset_furniture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture* internal_default_instance() {
    return reinterpret_cast<const asset_furniture*>(
               &_asset_furniture_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(asset_furniture* other);
  friend void swap(asset_furniture& a, asset_furniture& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture>(NULL);
  }

  asset_furniture* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture& from);
  void MergeFrom(const asset_furniture& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string ue_path = 2;
  void clear_ue_path();
  static const int kUePathFieldNumber = 2;
  const ::std::string& ue_path() const;
  void set_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_ue_path(::std::string&& value);
  #endif
  void set_ue_path(const char* value);
  void set_ue_path(const char* value, size_t size);
  ::std::string* mutable_ue_path();
  ::std::string* release_ue_path();
  void set_allocated_ue_path(::std::string* ue_path);

  // string pak_url = 3;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 3;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string detail_info = 11;
  void clear_detail_info();
  static const int kDetailInfoFieldNumber = 11;
  const ::std::string& detail_info() const;
  void set_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_detail_info(::std::string&& value);
  #endif
  void set_detail_info(const char* value);
  void set_detail_info(const char* value, size_t size);
  ::std::string* mutable_detail_info();
  ::std::string* release_detail_info();
  void set_allocated_detail_info(::std::string* detail_info);

  // double length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  double length() const;
  void set_length(double value);

  // double depth = 5;
  void clear_depth();
  static const int kDepthFieldNumber = 5;
  double depth() const;
  void set_depth(double value);

  // double height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  double height() const;
  void set_height(double value);

  // int32 is_interactive = 7;
  void clear_is_interactive();
  static const int kIsInteractiveFieldNumber = 7;
  ::google::protobuf::int32 is_interactive() const;
  void set_is_interactive(::google::protobuf::int32 value);

  // int32 intelligent_type = 8;
  void clear_intelligent_type();
  static const int kIntelligentTypeFieldNumber = 8;
  ::google::protobuf::int32 intelligent_type() const;
  void set_intelligent_type(::google::protobuf::int32 value);

  // int32 furniture_style_id = 9;
  void clear_furniture_style_id();
  static const int kFurnitureStyleIdFieldNumber = 9;
  ::google::protobuf::int32 furniture_style_id() const;
  void set_furniture_style_id(::google::protobuf::int32 value);

  // int32 furniture_main_material_id = 10;
  void clear_furniture_main_material_id();
  static const int kFurnitureMainMaterialIdFieldNumber = 10;
  ::google::protobuf::int32 furniture_main_material_id() const;
  void set_furniture_main_material_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr ue_path_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr detail_info_;
  double length_;
  double depth_;
  double height_;
  ::google::protobuf::int32 is_interactive_;
  ::google::protobuf::int32 intelligent_type_;
  ::google::protobuf::int32 furniture_style_id_;
  ::google::protobuf::int32 furniture_main_material_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furnitureImpl();
};
// -------------------------------------------------------------------

class asset_furniture_style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture_style) */ {
 public:
  asset_furniture_style();
  virtual ~asset_furniture_style();

  asset_furniture_style(const asset_furniture_style& from);

  inline asset_furniture_style& operator=(const asset_furniture_style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture_style(asset_furniture_style&& from) noexcept
    : asset_furniture_style() {
    *this = ::std::move(from);
  }

  inline asset_furniture_style& operator=(asset_furniture_style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture_style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture_style* internal_default_instance() {
    return reinterpret_cast<const asset_furniture_style*>(
               &_asset_furniture_style_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(asset_furniture_style* other);
  friend void swap(asset_furniture_style& a, asset_furniture_style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture_style* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style>(NULL);
  }

  asset_furniture_style* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture_style& from);
  void MergeFrom(const asset_furniture_style& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture_style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string thumbnail_url = 3;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 3;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string product_id = 5;
  void clear_product_id();
  static const int kProductIdFieldNumber = 5;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // int64 create_time = 6;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int32 display_index = 4;
  void clear_display_index();
  static const int kDisplayIndexFieldNumber = 4;
  ::google::protobuf::int32 display_index() const;
  void set_display_index(::google::protobuf::int32 value);

  // int32 sync_status = 8;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 8;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // int64 update_time = 7;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture_style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int32 display_index_;
  ::google::protobuf::int32 sync_status_;
  ::google::protobuf::int64 update_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furniture_styleImpl();
};
// -------------------------------------------------------------------

class asset_furniture_style_material_map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture_style_material_map) */ {
 public:
  asset_furniture_style_material_map();
  virtual ~asset_furniture_style_material_map();

  asset_furniture_style_material_map(const asset_furniture_style_material_map& from);

  inline asset_furniture_style_material_map& operator=(const asset_furniture_style_material_map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture_style_material_map(asset_furniture_style_material_map&& from) noexcept
    : asset_furniture_style_material_map() {
    *this = ::std::move(from);
  }

  inline asset_furniture_style_material_map& operator=(asset_furniture_style_material_map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture_style_material_map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture_style_material_map* internal_default_instance() {
    return reinterpret_cast<const asset_furniture_style_material_map*>(
               &_asset_furniture_style_material_map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(asset_furniture_style_material_map* other);
  friend void swap(asset_furniture_style_material_map& a, asset_furniture_style_material_map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture_style_material_map* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_material_map>(NULL);
  }

  asset_furniture_style_material_map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_material_map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture_style_material_map& from);
  void MergeFrom(const asset_furniture_style_material_map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture_style_material_map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string material_id = 2;
  void clear_material_id();
  static const int kMaterialIdFieldNumber = 2;
  const ::std::string& material_id() const;
  void set_material_id(const ::std::string& value);
  #if LANG_CXX11
  void set_material_id(::std::string&& value);
  #endif
  void set_material_id(const char* value);
  void set_material_id(const char* value, size_t size);
  ::std::string* mutable_material_id();
  ::std::string* release_material_id();
  void set_allocated_material_id(::std::string* material_id);

  // string style_id = 3;
  void clear_style_id();
  static const int kStyleIdFieldNumber = 3;
  const ::std::string& style_id() const;
  void set_style_id(const ::std::string& value);
  #if LANG_CXX11
  void set_style_id(::std::string&& value);
  #endif
  void set_style_id(const char* value);
  void set_style_id(const char* value, size_t size);
  ::std::string* mutable_style_id();
  ::std::string* release_style_id();
  void set_allocated_style_id(::std::string* style_id);

  // string element_name = 5;
  void clear_element_name();
  static const int kElementNameFieldNumber = 5;
  const ::std::string& element_name() const;
  void set_element_name(const ::std::string& value);
  #if LANG_CXX11
  void set_element_name(::std::string&& value);
  #endif
  void set_element_name(const char* value);
  void set_element_name(const char* value, size_t size);
  ::std::string* mutable_element_name();
  ::std::string* release_element_name();
  void set_allocated_element_name(::std::string* element_name);

  // int32 material_index = 4;
  void clear_material_index();
  static const int kMaterialIndexFieldNumber = 4;
  ::google::protobuf::int32 material_index() const;
  void set_material_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture_style_material_map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr material_id_;
  ::google::protobuf::internal::ArenaStringPtr style_id_;
  ::google::protobuf::internal::ArenaStringPtr element_name_;
  ::google::protobuf::int32 material_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furniture_style_material_mapImpl();
};
// -------------------------------------------------------------------

class asset_material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_material) */ {
 public:
  asset_material();
  virtual ~asset_material();

  asset_material(const asset_material& from);

  inline asset_material& operator=(const asset_material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material(asset_material&& from) noexcept
    : asset_material() {
    *this = ::std::move(from);
  }

  inline asset_material& operator=(asset_material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material* internal_default_instance() {
    return reinterpret_cast<const asset_material*>(
               &_asset_material_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(asset_material* other);
  friend void swap(asset_material& a, asset_material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material>(NULL);
  }

  asset_material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material& from);
  void MergeFrom(const asset_material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string ue_path = 3;
  void clear_ue_path();
  static const int kUePathFieldNumber = 3;
  const ::std::string& ue_path() const;
  void set_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_ue_path(::std::string&& value);
  #endif
  void set_ue_path(const char* value);
  void set_ue_path(const char* value, size_t size);
  ::std::string* mutable_ue_path();
  ::std::string* release_ue_path();
  void set_allocated_ue_path(::std::string* ue_path);

  // string mat_info = 4;
  void clear_mat_info();
  static const int kMatInfoFieldNumber = 4;
  const ::std::string& mat_info() const;
  void set_mat_info(const ::std::string& value);
  #if LANG_CXX11
  void set_mat_info(::std::string&& value);
  #endif
  void set_mat_info(const char* value);
  void set_mat_info(const char* value, size_t size);
  ::std::string* mutable_mat_info();
  ::std::string* release_mat_info();
  void set_allocated_mat_info(::std::string* mat_info);

  // string thumbnail_url = 5;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 5;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string pak_url = 25;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 25;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string dependent_file_list = 26;
  void clear_dependent_file_list();
  static const int kDependentFileListFieldNumber = 26;
  const ::std::string& dependent_file_list() const;
  void set_dependent_file_list(const ::std::string& value);
  #if LANG_CXX11
  void set_dependent_file_list(::std::string&& value);
  #endif
  void set_dependent_file_list(const char* value);
  void set_dependent_file_list(const char* value, size_t size);
  ::std::string* mutable_dependent_file_list();
  ::std::string* release_dependent_file_list();
  void set_allocated_dependent_file_list(::std::string* dependent_file_list);

  // int32 is_del = 6;
  void clear_is_del();
  static const int kIsDelFieldNumber = 6;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int32 is_private = 7;
  void clear_is_private();
  static const int kIsPrivateFieldNumber = 7;
  ::google::protobuf::int32 is_private() const;
  void set_is_private(::google::protobuf::int32 value);

  // int32 user_id = 8;
  void clear_user_id();
  static const int kUserIdFieldNumber = 8;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 company_id = 9;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 9;
  ::google::protobuf::int32 company_id() const;
  void set_company_id(::google::protobuf::int32 value);

  // int64 create_time = 10;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 11;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 11;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 category_id = 12;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 12;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // int32 metallic = 17;
  void clear_metallic();
  static const int kMetallicFieldNumber = 17;
  ::google::protobuf::int32 metallic() const;
  void set_metallic(::google::protobuf::int32 value);

  // int32 roughness = 18;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 18;
  ::google::protobuf::int32 roughness() const;
  void set_roughness(::google::protobuf::int32 value);

  // int32 emissive_color = 19;
  void clear_emissive_color();
  static const int kEmissiveColorFieldNumber = 19;
  ::google::protobuf::int32 emissive_color() const;
  void set_emissive_color(::google::protobuf::int32 value);

  // int32 type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 is_repeat = 21;
  void clear_is_repeat();
  static const int kIsRepeatFieldNumber = 21;
  ::google::protobuf::int32 is_repeat() const;
  void set_is_repeat(::google::protobuf::int32 value);

  // int32 is_submit = 22;
  void clear_is_submit();
  static const int kIsSubmitFieldNumber = 22;
  ::google::protobuf::int32 is_submit() const;
  void set_is_submit(::google::protobuf::int32 value);

  // int32 source = 23;
  void clear_source();
  static const int kSourceFieldNumber = 23;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 sync_status = 24;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 24;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr ue_path_;
  ::google::protobuf::internal::ArenaStringPtr mat_info_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr dependent_file_list_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int32 is_private_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 company_id_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int32 metallic_;
  ::google::protobuf::int32 roughness_;
  ::google::protobuf::int32 emissive_color_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 is_repeat_;
  ::google::protobuf::int32 is_submit_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 sync_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_materialImpl();
};
// -------------------------------------------------------------------

class asset_material_category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_material_category) */ {
 public:
  asset_material_category();
  virtual ~asset_material_category();

  asset_material_category(const asset_material_category& from);

  inline asset_material_category& operator=(const asset_material_category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material_category(asset_material_category&& from) noexcept
    : asset_material_category() {
    *this = ::std::move(from);
  }

  inline asset_material_category& operator=(asset_material_category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material_category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material_category* internal_default_instance() {
    return reinterpret_cast<const asset_material_category*>(
               &_asset_material_category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(asset_material_category* other);
  friend void swap(asset_material_category& a, asset_material_category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material_category* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category>(NULL);
  }

  asset_material_category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material_category& from);
  void MergeFrom(const asset_material_category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material_category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 parent_id = 3;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_material_category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_material_categoryImpl();
};
// -------------------------------------------------------------------

class furniture_color_map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.furniture_color_map) */ {
 public:
  furniture_color_map();
  virtual ~furniture_color_map();

  furniture_color_map(const furniture_color_map& from);

  inline furniture_color_map& operator=(const furniture_color_map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  furniture_color_map(furniture_color_map&& from) noexcept
    : furniture_color_map() {
    *this = ::std::move(from);
  }

  inline furniture_color_map& operator=(furniture_color_map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const furniture_color_map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const furniture_color_map* internal_default_instance() {
    return reinterpret_cast<const furniture_color_map*>(
               &_furniture_color_map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(furniture_color_map* other);
  friend void swap(furniture_color_map& a, furniture_color_map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline furniture_color_map* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color_map>(NULL);
  }

  furniture_color_map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color_map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const furniture_color_map& from);
  void MergeFrom(const furniture_color_map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(furniture_color_map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 3;
  void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // int32 color_id = 2;
  void clear_color_id();
  static const int kColorIdFieldNumber = 2;
  ::google::protobuf::int32 color_id() const;
  void set_color_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.furniture_color_map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::int32 color_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsfurniture_color_mapImpl();
};
// -------------------------------------------------------------------

class GA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.GA) */ {
 public:
  GA();
  virtual ~GA();

  GA(const GA& from);

  inline GA& operator=(const GA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GA(GA&& from) noexcept
    : GA() {
    *this = ::std::move(from);
  }

  inline GA& operator=(GA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GA* internal_default_instance() {
    return reinterpret_cast<const GA*>(
               &_GA_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GA* other);
  friend void swap(GA& a, GA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GA* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GA>(NULL);
  }

  GA* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GA& from);
  void MergeFrom(const GA& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cid = 1;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.GA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cid_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsGAImpl();
};
// -------------------------------------------------------------------

class plan_desgin_template_statu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.plan_desgin_template_statu) */ {
 public:
  plan_desgin_template_statu();
  virtual ~plan_desgin_template_statu();

  plan_desgin_template_statu(const plan_desgin_template_statu& from);

  inline plan_desgin_template_statu& operator=(const plan_desgin_template_statu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_desgin_template_statu(plan_desgin_template_statu&& from) noexcept
    : plan_desgin_template_statu() {
    *this = ::std::move(from);
  }

  inline plan_desgin_template_statu& operator=(plan_desgin_template_statu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_desgin_template_statu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_desgin_template_statu* internal_default_instance() {
    return reinterpret_cast<const plan_desgin_template_statu*>(
               &_plan_desgin_template_statu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(plan_desgin_template_statu* other);
  friend void swap(plan_desgin_template_statu& a, plan_desgin_template_statu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_desgin_template_statu* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_desgin_template_statu>(NULL);
  }

  plan_desgin_template_statu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_desgin_template_statu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_desgin_template_statu& from);
  void MergeFrom(const plan_desgin_template_statu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_desgin_template_statu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string depend_files = 3;
  void clear_depend_files();
  static const int kDependFilesFieldNumber = 3;
  const ::std::string& depend_files() const;
  void set_depend_files(const ::std::string& value);
  #if LANG_CXX11
  void set_depend_files(::std::string&& value);
  #endif
  void set_depend_files(const char* value);
  void set_depend_files(const char* value, size_t size);
  ::std::string* mutable_depend_files();
  ::std::string* release_depend_files();
  void set_allocated_depend_files(::std::string* depend_files);

  // int64 updatetime = 2;
  void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 2;
  ::google::protobuf::int64 updatetime() const;
  void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:d5.db2.plan_desgin_template_statu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr depend_files_;
  ::google::protobuf::int64 updatetime_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsplan_desgin_template_statuImpl();
};
// -------------------------------------------------------------------

class plan_design : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.plan_design) */ {
 public:
  plan_design();
  virtual ~plan_design();

  plan_design(const plan_design& from);

  inline plan_design& operator=(const plan_design& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_design(plan_design&& from) noexcept
    : plan_design() {
    *this = ::std::move(from);
  }

  inline plan_design& operator=(plan_design&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_design& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_design* internal_default_instance() {
    return reinterpret_cast<const plan_design*>(
               &_plan_design_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(plan_design* other);
  friend void swap(plan_design& a, plan_design& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_design* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design>(NULL);
  }

  plan_design* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_design& from);
  void MergeFrom(const plan_design& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_design* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string pak_url = 5;
  void clear_pak_url();
  static const int kPakUrlFieldNumber = 5;
  const ::std::string& pak_url() const;
  void set_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pak_url(::std::string&& value);
  #endif
  void set_pak_url(const char* value);
  void set_pak_url(const char* value, size_t size);
  ::std::string* mutable_pak_url();
  ::std::string* release_pak_url();
  void set_allocated_pak_url(::std::string* pak_url);

  // string thumbnail_url = 6;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 6;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string floor_edit_file_url = 7;
  void clear_floor_edit_file_url();
  static const int kFloorEditFileUrlFieldNumber = 7;
  const ::std::string& floor_edit_file_url() const;
  void set_floor_edit_file_url(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_edit_file_url(::std::string&& value);
  #endif
  void set_floor_edit_file_url(const char* value);
  void set_floor_edit_file_url(const char* value, size_t size);
  ::std::string* mutable_floor_edit_file_url();
  ::std::string* release_floor_edit_file_url();
  void set_allocated_floor_edit_file_url(::std::string* floor_edit_file_url);

  // string detail_info = 8;
  void clear_detail_info();
  static const int kDetailInfoFieldNumber = 8;
  const ::std::string& detail_info() const;
  void set_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_detail_info(::std::string&& value);
  #endif
  void set_detail_info(const char* value);
  void set_detail_info(const char* value, size_t size);
  ::std::string* mutable_detail_info();
  ::std::string* release_detail_info();
  void set_allocated_detail_info(::std::string* detail_info);

  // string design_file_url = 9;
  void clear_design_file_url();
  static const int kDesignFileUrlFieldNumber = 9;
  const ::std::string& design_file_url() const;
  void set_design_file_url(const ::std::string& value);
  #if LANG_CXX11
  void set_design_file_url(::std::string&& value);
  #endif
  void set_design_file_url(const char* value);
  void set_design_file_url(const char* value, size_t size);
  ::std::string* mutable_design_file_url();
  ::std::string* release_design_file_url();
  void set_allocated_design_file_url(::std::string* design_file_url);

  // string cook_id = 23;
  void clear_cook_id();
  static const int kCookIdFieldNumber = 23;
  const ::std::string& cook_id() const;
  void set_cook_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cook_id(::std::string&& value);
  #endif
  void set_cook_id(const char* value);
  void set_cook_id(const char* value, size_t size);
  ::std::string* mutable_cook_id();
  ::std::string* release_cook_id();
  void set_allocated_cook_id(::std::string* cook_id);

  // string floor_ref_url = 24;
  void clear_floor_ref_url();
  static const int kFloorRefUrlFieldNumber = 24;
  const ::std::string& floor_ref_url() const;
  void set_floor_ref_url(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_ref_url(::std::string&& value);
  #endif
  void set_floor_ref_url(const char* value);
  void set_floor_ref_url(const char* value, size_t size);
  ::std::string* mutable_floor_ref_url();
  ::std::string* release_floor_ref_url();
  void set_allocated_floor_ref_url(::std::string* floor_ref_url);

  // string username = 30;
  void clear_username();
  static const int kUsernameFieldNumber = 30;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string dependent_file_list = 31;
  void clear_dependent_file_list();
  static const int kDependentFileListFieldNumber = 31;
  const ::std::string& dependent_file_list() const;
  void set_dependent_file_list(const ::std::string& value);
  #if LANG_CXX11
  void set_dependent_file_list(::std::string&& value);
  #endif
  void set_dependent_file_list(const char* value);
  void set_dependent_file_list(const char* value, size_t size);
  ::std::string* mutable_dependent_file_list();
  ::std::string* release_dependent_file_list();
  void set_allocated_dependent_file_list(::std::string* dependent_file_list);

  // string quotation_info = 33;
  void clear_quotation_info();
  static const int kQuotationInfoFieldNumber = 33;
  const ::std::string& quotation_info() const;
  void set_quotation_info(const ::std::string& value);
  #if LANG_CXX11
  void set_quotation_info(::std::string&& value);
  #endif
  void set_quotation_info(const char* value);
  void set_quotation_info(const char* value, size_t size);
  ::std::string* mutable_quotation_info();
  ::std::string* release_quotation_info();
  void set_allocated_quotation_info(::std::string* quotation_info);

  // double size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  double size() const;
  void set_size(double value);

  // int32 district_id = 10;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 10;
  ::google::protobuf::int32 district_id() const;
  void set_district_id(::google::protobuf::int32 value);

  // int32 property_type_id = 11;
  void clear_property_type_id();
  static const int kPropertyTypeIdFieldNumber = 11;
  ::google::protobuf::int32 property_type_id() const;
  void set_property_type_id(::google::protobuf::int32 value);

  // int32 room_type_id = 12;
  void clear_room_type_id();
  static const int kRoomTypeIdFieldNumber = 12;
  ::google::protobuf::int32 room_type_id() const;
  void set_room_type_id(::google::protobuf::int32 value);

  // int32 template_type_id = 13;
  void clear_template_type_id();
  static const int kTemplateTypeIdFieldNumber = 13;
  ::google::protobuf::int32 template_type_id() const;
  void set_template_type_id(::google::protobuf::int32 value);

  // int32 cook_stage = 14;
  void clear_cook_stage();
  static const int kCookStageFieldNumber = 14;
  ::google::protobuf::int32 cook_stage() const;
  void set_cook_stage(::google::protobuf::int32 value);

  // int32 is_del = 15;
  void clear_is_del();
  static const int kIsDelFieldNumber = 15;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int64 create_time = 16;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 16;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 17;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 17;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 user_id = 18;
  void clear_user_id();
  static const int kUserIdFieldNumber = 18;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 company_id = 19;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 19;
  ::google::protobuf::int32 company_id() const;
  void set_company_id(::google::protobuf::int32 value);

  // int32 sync_status = 20;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 20;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // int32 floor_edit_error_code = 21;
  void clear_floor_edit_error_code();
  static const int kFloorEditErrorCodeFieldNumber = 21;
  ::google::protobuf::int32 floor_edit_error_code() const;
  void set_floor_edit_error_code(::google::protobuf::int32 value);

  // double floor_ref_width = 25;
  void clear_floor_ref_width();
  static const int kFloorRefWidthFieldNumber = 25;
  double floor_ref_width() const;
  void set_floor_ref_width(double value);

  // double floor_ref_height = 26;
  void clear_floor_ref_height();
  static const int kFloorRefHeightFieldNumber = 26;
  double floor_ref_height() const;
  void set_floor_ref_height(double value);

  // double floor_ref_angle = 27;
  void clear_floor_ref_angle();
  static const int kFloorRefAngleFieldNumber = 27;
  double floor_ref_angle() const;
  void set_floor_ref_angle(double value);

  // int32 group_id = 28;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 28;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 condo_id = 29;
  void clear_condo_id();
  static const int kCondoIdFieldNumber = 29;
  ::google::protobuf::int32 condo_id() const;
  void set_condo_id(::google::protobuf::int32 value);

  // int32 source = 32;
  void clear_source();
  static const int kSourceFieldNumber = 32;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 is_private = 34;
  void clear_is_private();
  static const int kIsPrivateFieldNumber = 34;
  ::google::protobuf::int32 is_private() const;
  void set_is_private(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.plan_design)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr pak_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr floor_edit_file_url_;
  ::google::protobuf::internal::ArenaStringPtr detail_info_;
  ::google::protobuf::internal::ArenaStringPtr design_file_url_;
  ::google::protobuf::internal::ArenaStringPtr cook_id_;
  ::google::protobuf::internal::ArenaStringPtr floor_ref_url_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr dependent_file_list_;
  ::google::protobuf::internal::ArenaStringPtr quotation_info_;
  double size_;
  ::google::protobuf::int32 district_id_;
  ::google::protobuf::int32 property_type_id_;
  ::google::protobuf::int32 room_type_id_;
  ::google::protobuf::int32 template_type_id_;
  ::google::protobuf::int32 cook_stage_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 company_id_;
  ::google::protobuf::int32 sync_status_;
  ::google::protobuf::int32 floor_edit_error_code_;
  double floor_ref_width_;
  double floor_ref_height_;
  double floor_ref_angle_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 condo_id_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 is_private_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsplan_designImpl();
};
// -------------------------------------------------------------------

class product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product) */ {
 public:
  product();
  virtual ~product();

  product(const product& from);

  inline product& operator=(const product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product(product&& from) noexcept
    : product() {
    *this = ::std::move(from);
  }

  inline product& operator=(product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product* internal_default_instance() {
    return reinterpret_cast<const product*>(
               &_product_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(product* other);
  friend void swap(product& a, product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product>(NULL);
  }

  product* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product& from);
  void MergeFrom(const product& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string folder_name = 15;
  void clear_folder_name();
  static const int kFolderNameFieldNumber = 15;
  const ::std::string& folder_name() const;
  void set_folder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_folder_name(::std::string&& value);
  #endif
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  ::std::string* mutable_folder_name();
  ::std::string* release_folder_name();
  void set_allocated_folder_name(::std::string* folder_name);

  // string buy_url = 18;
  void clear_buy_url();
  static const int kBuyUrlFieldNumber = 18;
  const ::std::string& buy_url() const;
  void set_buy_url(const ::std::string& value);
  #if LANG_CXX11
  void set_buy_url(::std::string&& value);
  #endif
  void set_buy_url(const char* value);
  void set_buy_url(const char* value, size_t size);
  ::std::string* mutable_buy_url();
  ::std::string* release_buy_url();
  void set_allocated_buy_url(::std::string* buy_url);

  // string dependent_file_list = 19;
  void clear_dependent_file_list();
  static const int kDependentFileListFieldNumber = 19;
  const ::std::string& dependent_file_list() const;
  void set_dependent_file_list(const ::std::string& value);
  #if LANG_CXX11
  void set_dependent_file_list(::std::string&& value);
  #endif
  void set_dependent_file_list(const char* value);
  void set_dependent_file_list(const char* value, size_t size);
  ::std::string* mutable_dependent_file_list();
  ::std::string* release_dependent_file_list();
  void set_allocated_dependent_file_list(::std::string* dependent_file_list);

  // string product_code = 20;
  void clear_product_code();
  static const int kProductCodeFieldNumber = 20;
  const ::std::string& product_code() const;
  void set_product_code(const ::std::string& value);
  #if LANG_CXX11
  void set_product_code(::std::string&& value);
  #endif
  void set_product_code(const char* value);
  void set_product_code(const char* value, size_t size);
  ::std::string* mutable_product_code();
  ::std::string* release_product_code();
  void set_allocated_product_code(::std::string* product_code);

  // double price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // int64 create_time = 5;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 6;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 brand_id = 7;
  void clear_brand_id();
  static const int kBrandIdFieldNumber = 7;
  ::google::protobuf::int32 brand_id() const;
  void set_brand_id(::google::protobuf::int32 value);

  // int32 source = 8;
  void clear_source();
  static const int kSourceFieldNumber = 8;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 product_type = 9;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 9;
  ::google::protobuf::int32 product_type() const;
  void set_product_type(::google::protobuf::int32 value);

  // int32 is_published = 10;
  void clear_is_published();
  static const int kIsPublishedFieldNumber = 10;
  ::google::protobuf::int32 is_published() const;
  void set_is_published(::google::protobuf::int32 value);

  // int32 is_private = 11;
  void clear_is_private();
  static const int kIsPrivateFieldNumber = 11;
  ::google::protobuf::int32 is_private() const;
  void set_is_private(::google::protobuf::int32 value);

  // int32 is_del = 12;
  void clear_is_del();
  static const int kIsDelFieldNumber = 12;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int32 user_id = 13;
  void clear_user_id();
  static const int kUserIdFieldNumber = 13;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 company_id = 14;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 14;
  ::google::protobuf::int32 company_id() const;
  void set_company_id(::google::protobuf::int32 value);

  // int32 sync_status = 16;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 16;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // int32 category_id = 17;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 17;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr folder_name_;
  ::google::protobuf::internal::ArenaStringPtr buy_url_;
  ::google::protobuf::internal::ArenaStringPtr dependent_file_list_;
  ::google::protobuf::internal::ArenaStringPtr product_code_;
  double price_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 brand_id_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 product_type_;
  ::google::protobuf::int32 is_published_;
  ::google::protobuf::int32 is_private_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 company_id_;
  ::google::protobuf::int32 sync_status_;
  ::google::protobuf::int32 category_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproductImpl();
};
// -------------------------------------------------------------------

class product_detail_virtual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_detail_virtual) */ {
 public:
  product_detail_virtual();
  virtual ~product_detail_virtual();

  product_detail_virtual(const product_detail_virtual& from);

  inline product_detail_virtual& operator=(const product_detail_virtual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_detail_virtual(product_detail_virtual&& from) noexcept
    : product_detail_virtual() {
    *this = ::std::move(from);
  }

  inline product_detail_virtual& operator=(product_detail_virtual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_detail_virtual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_detail_virtual* internal_default_instance() {
    return reinterpret_cast<const product_detail_virtual*>(
               &_product_detail_virtual_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(product_detail_virtual* other);
  friend void swap(product_detail_virtual& a, product_detail_virtual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_detail_virtual* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_detail_virtual>(NULL);
  }

  product_detail_virtual* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_detail_virtual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_detail_virtual& from);
  void MergeFrom(const product_detail_virtual& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_detail_virtual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string folder_name = 15;
  void clear_folder_name();
  static const int kFolderNameFieldNumber = 15;
  const ::std::string& folder_name() const;
  void set_folder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_folder_name(::std::string&& value);
  #endif
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  ::std::string* mutable_folder_name();
  ::std::string* release_folder_name();
  void set_allocated_folder_name(::std::string* folder_name);

  // string buy_url = 18;
  void clear_buy_url();
  static const int kBuyUrlFieldNumber = 18;
  const ::std::string& buy_url() const;
  void set_buy_url(const ::std::string& value);
  #if LANG_CXX11
  void set_buy_url(::std::string&& value);
  #endif
  void set_buy_url(const char* value);
  void set_buy_url(const char* value, size_t size);
  ::std::string* mutable_buy_url();
  ::std::string* release_buy_url();
  void set_allocated_buy_url(::std::string* buy_url);

  // string furniture_product_id = 19;
  void clear_furniture_product_id();
  static const int kFurnitureProductIdFieldNumber = 19;
  const ::std::string& furniture_product_id() const;
  void set_furniture_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_furniture_product_id(::std::string&& value);
  #endif
  void set_furniture_product_id(const char* value);
  void set_furniture_product_id(const char* value, size_t size);
  ::std::string* mutable_furniture_product_id();
  ::std::string* release_furniture_product_id();
  void set_allocated_furniture_product_id(::std::string* furniture_product_id);

  // string furniture_ue_path = 20;
  void clear_furniture_ue_path();
  static const int kFurnitureUePathFieldNumber = 20;
  const ::std::string& furniture_ue_path() const;
  void set_furniture_ue_path(const ::std::string& value);
  #if LANG_CXX11
  void set_furniture_ue_path(::std::string&& value);
  #endif
  void set_furniture_ue_path(const char* value);
  void set_furniture_ue_path(const char* value, size_t size);
  ::std::string* mutable_furniture_ue_path();
  ::std::string* release_furniture_ue_path();
  void set_allocated_furniture_ue_path(::std::string* furniture_ue_path);

  // string furniture_pak_url = 21;
  void clear_furniture_pak_url();
  static const int kFurniturePakUrlFieldNumber = 21;
  const ::std::string& furniture_pak_url() const;
  void set_furniture_pak_url(const ::std::string& value);
  #if LANG_CXX11
  void set_furniture_pak_url(::std::string&& value);
  #endif
  void set_furniture_pak_url(const char* value);
  void set_furniture_pak_url(const char* value, size_t size);
  ::std::string* mutable_furniture_pak_url();
  ::std::string* release_furniture_pak_url();
  void set_allocated_furniture_pak_url(::std::string* furniture_pak_url);

  // string furniture_detail_info = 29;
  void clear_furniture_detail_info();
  static const int kFurnitureDetailInfoFieldNumber = 29;
  const ::std::string& furniture_detail_info() const;
  void set_furniture_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_furniture_detail_info(::std::string&& value);
  #endif
  void set_furniture_detail_info(const char* value);
  void set_furniture_detail_info(const char* value, size_t size);
  ::std::string* mutable_furniture_detail_info();
  ::std::string* release_furniture_detail_info();
  void set_allocated_furniture_detail_info(::std::string* furniture_detail_info);

  // string building_material_product_id = 30;
  void clear_building_material_product_id();
  static const int kBuildingMaterialProductIdFieldNumber = 30;
  const ::std::string& building_material_product_id() const;
  void set_building_material_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_building_material_product_id(::std::string&& value);
  #endif
  void set_building_material_product_id(const char* value);
  void set_building_material_product_id(const char* value, size_t size);
  ::std::string* mutable_building_material_product_id();
  ::std::string* release_building_material_product_id();
  void set_allocated_building_material_product_id(::std::string* building_material_product_id);

  // string building_material_material_id = 34;
  void clear_building_material_material_id();
  static const int kBuildingMaterialMaterialIdFieldNumber = 34;
  const ::std::string& building_material_material_id() const;
  void set_building_material_material_id(const ::std::string& value);
  #if LANG_CXX11
  void set_building_material_material_id(::std::string&& value);
  #endif
  void set_building_material_material_id(const char* value);
  void set_building_material_material_id(const char* value, size_t size);
  ::std::string* mutable_building_material_material_id();
  ::std::string* release_building_material_material_id();
  void set_allocated_building_material_material_id(::std::string* building_material_material_id);

  // string building_material_detail_info = 35;
  void clear_building_material_detail_info();
  static const int kBuildingMaterialDetailInfoFieldNumber = 35;
  const ::std::string& building_material_detail_info() const;
  void set_building_material_detail_info(const ::std::string& value);
  #if LANG_CXX11
  void set_building_material_detail_info(::std::string&& value);
  #endif
  void set_building_material_detail_info(const char* value);
  void set_building_material_detail_info(const char* value, size_t size);
  ::std::string* mutable_building_material_detail_info();
  ::std::string* release_building_material_detail_info();
  void set_allocated_building_material_detail_info(::std::string* building_material_detail_info);

  // string dependent_file_list = 38;
  void clear_dependent_file_list();
  static const int kDependentFileListFieldNumber = 38;
  const ::std::string& dependent_file_list() const;
  void set_dependent_file_list(const ::std::string& value);
  #if LANG_CXX11
  void set_dependent_file_list(::std::string&& value);
  #endif
  void set_dependent_file_list(const char* value);
  void set_dependent_file_list(const char* value, size_t size);
  ::std::string* mutable_dependent_file_list();
  ::std::string* release_dependent_file_list();
  void set_allocated_dependent_file_list(::std::string* dependent_file_list);

  // string product_code = 39;
  void clear_product_code();
  static const int kProductCodeFieldNumber = 39;
  const ::std::string& product_code() const;
  void set_product_code(const ::std::string& value);
  #if LANG_CXX11
  void set_product_code(::std::string&& value);
  #endif
  void set_product_code(const char* value);
  void set_product_code(const char* value, size_t size);
  ::std::string* mutable_product_code();
  ::std::string* release_product_code();
  void set_allocated_product_code(::std::string* product_code);

  // double price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // int64 create_time = 5;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 update_time = 6;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 brand_id = 7;
  void clear_brand_id();
  static const int kBrandIdFieldNumber = 7;
  ::google::protobuf::int32 brand_id() const;
  void set_brand_id(::google::protobuf::int32 value);

  // int32 source = 8;
  void clear_source();
  static const int kSourceFieldNumber = 8;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 product_type = 9;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 9;
  ::google::protobuf::int32 product_type() const;
  void set_product_type(::google::protobuf::int32 value);

  // int32 is_published = 10;
  void clear_is_published();
  static const int kIsPublishedFieldNumber = 10;
  ::google::protobuf::int32 is_published() const;
  void set_is_published(::google::protobuf::int32 value);

  // int32 is_private = 11;
  void clear_is_private();
  static const int kIsPrivateFieldNumber = 11;
  ::google::protobuf::int32 is_private() const;
  void set_is_private(::google::protobuf::int32 value);

  // int32 is_del = 12;
  void clear_is_del();
  static const int kIsDelFieldNumber = 12;
  ::google::protobuf::int32 is_del() const;
  void set_is_del(::google::protobuf::int32 value);

  // int32 user_id = 13;
  void clear_user_id();
  static const int kUserIdFieldNumber = 13;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 company_id = 14;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 14;
  ::google::protobuf::int32 company_id() const;
  void set_company_id(::google::protobuf::int32 value);

  // int32 sync_status = 16;
  void clear_sync_status();
  static const int kSyncStatusFieldNumber = 16;
  ::google::protobuf::int32 sync_status() const;
  void set_sync_status(::google::protobuf::int32 value);

  // int32 category_id = 17;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 17;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // double furniture_length = 22;
  void clear_furniture_length();
  static const int kFurnitureLengthFieldNumber = 22;
  double furniture_length() const;
  void set_furniture_length(double value);

  // double furniture_depth = 23;
  void clear_furniture_depth();
  static const int kFurnitureDepthFieldNumber = 23;
  double furniture_depth() const;
  void set_furniture_depth(double value);

  // double furniture_height = 24;
  void clear_furniture_height();
  static const int kFurnitureHeightFieldNumber = 24;
  double furniture_height() const;
  void set_furniture_height(double value);

  // int32 furniture_is_interactive = 25;
  void clear_furniture_is_interactive();
  static const int kFurnitureIsInteractiveFieldNumber = 25;
  ::google::protobuf::int32 furniture_is_interactive() const;
  void set_furniture_is_interactive(::google::protobuf::int32 value);

  // int32 furniture_intelligent_type = 26;
  void clear_furniture_intelligent_type();
  static const int kFurnitureIntelligentTypeFieldNumber = 26;
  ::google::protobuf::int32 furniture_intelligent_type() const;
  void set_furniture_intelligent_type(::google::protobuf::int32 value);

  // int32 furniture_furniture_style_id = 27;
  void clear_furniture_furniture_style_id();
  static const int kFurnitureFurnitureStyleIdFieldNumber = 27;
  ::google::protobuf::int32 furniture_furniture_style_id() const;
  void set_furniture_furniture_style_id(::google::protobuf::int32 value);

  // int32 furniture_furniture_main_material_id = 28;
  void clear_furniture_furniture_main_material_id();
  static const int kFurnitureFurnitureMainMaterialIdFieldNumber = 28;
  ::google::protobuf::int32 furniture_furniture_main_material_id() const;
  void set_furniture_furniture_main_material_id(::google::protobuf::int32 value);

  // int32 building_material_is_for_floor = 31;
  void clear_building_material_is_for_floor();
  static const int kBuildingMaterialIsForFloorFieldNumber = 31;
  ::google::protobuf::int32 building_material_is_for_floor() const;
  void set_building_material_is_for_floor(::google::protobuf::int32 value);

  // int32 building_material_is_for_wall = 32;
  void clear_building_material_is_for_wall();
  static const int kBuildingMaterialIsForWallFieldNumber = 32;
  ::google::protobuf::int32 building_material_is_for_wall() const;
  void set_building_material_is_for_wall(::google::protobuf::int32 value);

  // int32 building_material_is_for_ceiling = 33;
  void clear_building_material_is_for_ceiling();
  static const int kBuildingMaterialIsForCeilingFieldNumber = 33;
  ::google::protobuf::int32 building_material_is_for_ceiling() const;
  void set_building_material_is_for_ceiling(::google::protobuf::int32 value);

  // int32 building_material_length = 36;
  void clear_building_material_length();
  static const int kBuildingMaterialLengthFieldNumber = 36;
  ::google::protobuf::int32 building_material_length() const;
  void set_building_material_length(::google::protobuf::int32 value);

  // int32 building_material_width = 37;
  void clear_building_material_width();
  static const int kBuildingMaterialWidthFieldNumber = 37;
  ::google::protobuf::int32 building_material_width() const;
  void set_building_material_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.product_detail_virtual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr folder_name_;
  ::google::protobuf::internal::ArenaStringPtr buy_url_;
  ::google::protobuf::internal::ArenaStringPtr furniture_product_id_;
  ::google::protobuf::internal::ArenaStringPtr furniture_ue_path_;
  ::google::protobuf::internal::ArenaStringPtr furniture_pak_url_;
  ::google::protobuf::internal::ArenaStringPtr furniture_detail_info_;
  ::google::protobuf::internal::ArenaStringPtr building_material_product_id_;
  ::google::protobuf::internal::ArenaStringPtr building_material_material_id_;
  ::google::protobuf::internal::ArenaStringPtr building_material_detail_info_;
  ::google::protobuf::internal::ArenaStringPtr dependent_file_list_;
  ::google::protobuf::internal::ArenaStringPtr product_code_;
  double price_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 brand_id_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 product_type_;
  ::google::protobuf::int32 is_published_;
  ::google::protobuf::int32 is_private_;
  ::google::protobuf::int32 is_del_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 company_id_;
  ::google::protobuf::int32 sync_status_;
  ::google::protobuf::int32 category_id_;
  double furniture_length_;
  double furniture_depth_;
  double furniture_height_;
  ::google::protobuf::int32 furniture_is_interactive_;
  ::google::protobuf::int32 furniture_intelligent_type_;
  ::google::protobuf::int32 furniture_furniture_style_id_;
  ::google::protobuf::int32 furniture_furniture_main_material_id_;
  ::google::protobuf::int32 building_material_is_for_floor_;
  ::google::protobuf::int32 building_material_is_for_wall_;
  ::google::protobuf::int32 building_material_is_for_ceiling_;
  ::google::protobuf::int32 building_material_length_;
  ::google::protobuf::int32 building_material_width_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_detail_virtualImpl();
};
// -------------------------------------------------------------------

class product_brand_temp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_brand_temp) */ {
 public:
  product_brand_temp();
  virtual ~product_brand_temp();

  product_brand_temp(const product_brand_temp& from);

  inline product_brand_temp& operator=(const product_brand_temp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_brand_temp(product_brand_temp&& from) noexcept
    : product_brand_temp() {
    *this = ::std::move(from);
  }

  inline product_brand_temp& operator=(product_brand_temp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_brand_temp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_brand_temp* internal_default_instance() {
    return reinterpret_cast<const product_brand_temp*>(
               &_product_brand_temp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(product_brand_temp* other);
  friend void swap(product_brand_temp& a, product_brand_temp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_brand_temp* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand_temp>(NULL);
  }

  product_brand_temp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand_temp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_brand_temp& from);
  void MergeFrom(const product_brand_temp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_brand_temp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string brand = 2;
  void clear_brand();
  static const int kBrandFieldNumber = 2;
  const ::std::string& brand() const;
  void set_brand(const ::std::string& value);
  #if LANG_CXX11
  void set_brand(::std::string&& value);
  #endif
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  ::std::string* mutable_brand();
  ::std::string* release_brand();
  void set_allocated_brand(::std::string* brand);

  // @@protoc_insertion_point(class_scope:d5.db2.product_brand_temp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr brand_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_brand_tempImpl();
};
// -------------------------------------------------------------------

class product_category_map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_category_map) */ {
 public:
  product_category_map();
  virtual ~product_category_map();

  product_category_map(const product_category_map& from);

  inline product_category_map& operator=(const product_category_map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_category_map(product_category_map&& from) noexcept
    : product_category_map() {
    *this = ::std::move(from);
  }

  inline product_category_map& operator=(product_category_map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_category_map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_category_map* internal_default_instance() {
    return reinterpret_cast<const product_category_map*>(
               &_product_category_map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(product_category_map* other);
  friend void swap(product_category_map& a, product_category_map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_category_map* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category_map>(NULL);
  }

  product_category_map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category_map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_category_map& from);
  void MergeFrom(const product_category_map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_category_map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 3;
  void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 category_id = 2;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.product_category_map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 category_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_category_mapImpl();
};
// -------------------------------------------------------------------

class product_image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_image) */ {
 public:
  product_image();
  virtual ~product_image();

  product_image(const product_image& from);

  inline product_image& operator=(const product_image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_image(product_image&& from) noexcept
    : product_image() {
    *this = ::std::move(from);
  }

  inline product_image& operator=(product_image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_image* internal_default_instance() {
    return reinterpret_cast<const product_image*>(
               &_product_image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(product_image* other);
  friend void swap(product_image& a, product_image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_image* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_image>(NULL);
  }

  product_image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_image& from);
  void MergeFrom(const product_image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string file_url = 3;
  void clear_file_url();
  static const int kFileUrlFieldNumber = 3;
  const ::std::string& file_url() const;
  void set_file_url(const ::std::string& value);
  #if LANG_CXX11
  void set_file_url(::std::string&& value);
  #endif
  void set_file_url(const char* value);
  void set_file_url(const char* value, size_t size);
  ::std::string* mutable_file_url();
  ::std::string* release_file_url();
  void set_allocated_file_url(::std::string* file_url);

  // string product_id = 4;
  void clear_product_id();
  static const int kProductIdFieldNumber = 4;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // int32 display_index = 2;
  void clear_display_index();
  static const int kDisplayIndexFieldNumber = 2;
  ::google::protobuf::int32 display_index() const;
  void set_display_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.product_image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr file_url_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::int32 display_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_imageImpl();
};
// -------------------------------------------------------------------

class setting_remember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.setting_remember) */ {
 public:
  setting_remember();
  virtual ~setting_remember();

  setting_remember(const setting_remember& from);

  inline setting_remember& operator=(const setting_remember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  setting_remember(setting_remember&& from) noexcept
    : setting_remember() {
    *this = ::std::move(from);
  }

  inline setting_remember& operator=(setting_remember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const setting_remember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setting_remember* internal_default_instance() {
    return reinterpret_cast<const setting_remember*>(
               &_setting_remember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(setting_remember* other);
  friend void swap(setting_remember& a, setting_remember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline setting_remember* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<setting_remember>(NULL);
  }

  setting_remember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<setting_remember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const setting_remember& from);
  void MergeFrom(const setting_remember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(setting_remember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string scalability = 6;
  void clear_scalability();
  static const int kScalabilityFieldNumber = 6;
  const ::std::string& scalability() const;
  void set_scalability(const ::std::string& value);
  #if LANG_CXX11
  void set_scalability(::std::string&& value);
  #endif
  void set_scalability(const char* value);
  void set_scalability(const char* value, size_t size);
  ::std::string* mutable_scalability();
  ::std::string* release_scalability();
  void set_allocated_scalability(::std::string* scalability);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 layout_page_tip = 2;
  void clear_layout_page_tip();
  static const int kLayoutPageTipFieldNumber = 2;
  ::google::protobuf::int32 layout_page_tip() const;
  void set_layout_page_tip(::google::protobuf::int32 value);

  // int32 layout_do_not_show_again = 3;
  void clear_layout_do_not_show_again();
  static const int kLayoutDoNotShowAgainFieldNumber = 3;
  ::google::protobuf::int32 layout_do_not_show_again() const;
  void set_layout_do_not_show_again(::google::protobuf::int32 value);

  // int32 vr_capture_do_not_show_again = 4;
  void clear_vr_capture_do_not_show_again();
  static const int kVrCaptureDoNotShowAgainFieldNumber = 4;
  ::google::protobuf::int32 vr_capture_do_not_show_again() const;
  void set_vr_capture_do_not_show_again(::google::protobuf::int32 value);

  // int64 sync_data_timestamp = 5;
  void clear_sync_data_timestamp();
  static const int kSyncDataTimestampFieldNumber = 5;
  ::google::protobuf::int64 sync_data_timestamp() const;
  void set_sync_data_timestamp(::google::protobuf::int64 value);

  // int32 magic_confirm_do_not_show_again = 7;
  void clear_magic_confirm_do_not_show_again();
  static const int kMagicConfirmDoNotShowAgainFieldNumber = 7;
  ::google::protobuf::int32 magic_confirm_do_not_show_again() const;
  void set_magic_confirm_do_not_show_again(::google::protobuf::int32 value);

  // int32 decoration_page_tip = 8;
  void clear_decoration_page_tip();
  static const int kDecorationPageTipFieldNumber = 8;
  ::google::protobuf::int32 decoration_page_tip() const;
  void set_decoration_page_tip(::google::protobuf::int32 value);

  // int32 material_replace_tip = 9;
  void clear_material_replace_tip();
  static const int kMaterialReplaceTipFieldNumber = 9;
  ::google::protobuf::int32 material_replace_tip() const;
  void set_material_replace_tip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.setting_remember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr scalability_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 layout_page_tip_;
  ::google::protobuf::int32 layout_do_not_show_again_;
  ::google::protobuf::int32 vr_capture_do_not_show_again_;
  ::google::protobuf::int64 sync_data_timestamp_;
  ::google::protobuf::int32 magic_confirm_do_not_show_again_;
  ::google::protobuf::int32 decoration_page_tip_;
  ::google::protobuf::int32 material_replace_tip_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultssetting_rememberImpl();
};
// -------------------------------------------------------------------

class user_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.user_login) */ {
 public:
  user_login();
  virtual ~user_login();

  user_login(const user_login& from);

  inline user_login& operator=(const user_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_login(user_login&& from) noexcept
    : user_login() {
    *this = ::std::move(from);
  }

  inline user_login& operator=(user_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login* internal_default_instance() {
    return reinterpret_cast<const user_login*>(
               &_user_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(user_login* other);
  friend void swap(user_login& a, user_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_login* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<user_login>(NULL);
  }

  user_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<user_login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_login& from);
  void MergeFrom(const user_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // int32 lastStatus = 3;
  void clear_laststatus();
  static const int kLastStatusFieldNumber = 3;
  ::google::protobuf::int32 laststatus() const;
  void set_laststatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:d5.db2.user_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 laststatus_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsuser_loginImpl();
};
// -------------------------------------------------------------------

class files_map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.files_map) */ {
 public:
  files_map();
  virtual ~files_map();

  files_map(const files_map& from);

  inline files_map& operator=(const files_map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  files_map(files_map&& from) noexcept
    : files_map() {
    *this = ::std::move(from);
  }

  inline files_map& operator=(files_map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const files_map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const files_map* internal_default_instance() {
    return reinterpret_cast<const files_map*>(
               &_files_map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(files_map* other);
  friend void swap(files_map& a, files_map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline files_map* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<files_map>(NULL);
  }

  files_map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<files_map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const files_map& from);
  void MergeFrom(const files_map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(files_map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string md5 = 2;
  void clear_md5();
  static const int kMd5FieldNumber = 2;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // string type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int64 update_time = 3;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int64 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::int64 length() const;
  void set_length(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:d5.db2.files_map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int64 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsfiles_mapImpl();
};
// -------------------------------------------------------------------

class header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.header) */ {
 public:
  header();
  virtual ~header();

  header(const header& from);

  inline header& operator=(const header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  header(header&& from) noexcept
    : header() {
    *this = ::std::move(from);
  }

  inline header& operator=(header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const header* internal_default_instance() {
    return reinterpret_cast<const header*>(
               &_header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(header* other);
  friend void swap(header& a, header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline header* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<header>(NULL);
  }

  header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const header& from);
  void MergeFrom(const header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int64 create_time = 2;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:d5.db2.header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 create_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsheaderImpl();
};
// -------------------------------------------------------------------

class asset_building_material_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_building_material_db) */ {
 public:
  asset_building_material_db();
  virtual ~asset_building_material_db();

  asset_building_material_db(const asset_building_material_db& from);

  inline asset_building_material_db& operator=(const asset_building_material_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_building_material_db(asset_building_material_db&& from) noexcept
    : asset_building_material_db() {
    *this = ::std::move(from);
  }

  inline asset_building_material_db& operator=(asset_building_material_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_building_material_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_building_material_db* internal_default_instance() {
    return reinterpret_cast<const asset_building_material_db*>(
               &_asset_building_material_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(asset_building_material_db* other);
  friend void swap(asset_building_material_db& a, asset_building_material_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_building_material_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_building_material_db>(NULL);
  }

  asset_building_material_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_building_material_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_building_material_db& from);
  void MergeFrom(const asset_building_material_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_building_material_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_building_material content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_building_material* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_building_material >*
      mutable_content();
  const ::d5::db2::asset_building_material& content(int index) const;
  ::d5::db2::asset_building_material* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_building_material >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_building_material_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_building_material > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_building_material_dbImpl();
};
// -------------------------------------------------------------------

class asset_furniture_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture_db) */ {
 public:
  asset_furniture_db();
  virtual ~asset_furniture_db();

  asset_furniture_db(const asset_furniture_db& from);

  inline asset_furniture_db& operator=(const asset_furniture_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture_db(asset_furniture_db&& from) noexcept
    : asset_furniture_db() {
    *this = ::std::move(from);
  }

  inline asset_furniture_db& operator=(asset_furniture_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture_db* internal_default_instance() {
    return reinterpret_cast<const asset_furniture_db*>(
               &_asset_furniture_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(asset_furniture_db* other);
  friend void swap(asset_furniture_db& a, asset_furniture_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_db>(NULL);
  }

  asset_furniture_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture_db& from);
  void MergeFrom(const asset_furniture_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_furniture content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_furniture* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture >*
      mutable_content();
  const ::d5::db2::asset_furniture& content(int index) const;
  ::d5::db2::asset_furniture* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furniture_dbImpl();
};
// -------------------------------------------------------------------

class asset_furniture_style_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture_style_db) */ {
 public:
  asset_furniture_style_db();
  virtual ~asset_furniture_style_db();

  asset_furniture_style_db(const asset_furniture_style_db& from);

  inline asset_furniture_style_db& operator=(const asset_furniture_style_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture_style_db(asset_furniture_style_db&& from) noexcept
    : asset_furniture_style_db() {
    *this = ::std::move(from);
  }

  inline asset_furniture_style_db& operator=(asset_furniture_style_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture_style_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture_style_db* internal_default_instance() {
    return reinterpret_cast<const asset_furniture_style_db*>(
               &_asset_furniture_style_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(asset_furniture_style_db* other);
  friend void swap(asset_furniture_style_db& a, asset_furniture_style_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture_style_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_db>(NULL);
  }

  asset_furniture_style_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture_style_db& from);
  void MergeFrom(const asset_furniture_style_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture_style_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_furniture_style content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_furniture_style* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style >*
      mutable_content();
  const ::d5::db2::asset_furniture_style& content(int index) const;
  ::d5::db2::asset_furniture_style* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture_style_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furniture_style_dbImpl();
};
// -------------------------------------------------------------------

class asset_furniture_style_material_map_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_furniture_style_material_map_db) */ {
 public:
  asset_furniture_style_material_map_db();
  virtual ~asset_furniture_style_material_map_db();

  asset_furniture_style_material_map_db(const asset_furniture_style_material_map_db& from);

  inline asset_furniture_style_material_map_db& operator=(const asset_furniture_style_material_map_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_furniture_style_material_map_db(asset_furniture_style_material_map_db&& from) noexcept
    : asset_furniture_style_material_map_db() {
    *this = ::std::move(from);
  }

  inline asset_furniture_style_material_map_db& operator=(asset_furniture_style_material_map_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_furniture_style_material_map_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_furniture_style_material_map_db* internal_default_instance() {
    return reinterpret_cast<const asset_furniture_style_material_map_db*>(
               &_asset_furniture_style_material_map_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(asset_furniture_style_material_map_db* other);
  friend void swap(asset_furniture_style_material_map_db& a, asset_furniture_style_material_map_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_furniture_style_material_map_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_material_map_db>(NULL);
  }

  asset_furniture_style_material_map_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_furniture_style_material_map_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_furniture_style_material_map_db& from);
  void MergeFrom(const asset_furniture_style_material_map_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_furniture_style_material_map_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_furniture_style_material_map content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_furniture_style_material_map* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style_material_map >*
      mutable_content();
  const ::d5::db2::asset_furniture_style_material_map& content(int index) const;
  ::d5::db2::asset_furniture_style_material_map* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style_material_map >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_furniture_style_material_map_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style_material_map > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_furniture_style_material_map_dbImpl();
};
// -------------------------------------------------------------------

class asset_material_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_material_db) */ {
 public:
  asset_material_db();
  virtual ~asset_material_db();

  asset_material_db(const asset_material_db& from);

  inline asset_material_db& operator=(const asset_material_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material_db(asset_material_db&& from) noexcept
    : asset_material_db() {
    *this = ::std::move(from);
  }

  inline asset_material_db& operator=(asset_material_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material_db* internal_default_instance() {
    return reinterpret_cast<const asset_material_db*>(
               &_asset_material_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(asset_material_db* other);
  friend void swap(asset_material_db& a, asset_material_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_db>(NULL);
  }

  asset_material_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material_db& from);
  void MergeFrom(const asset_material_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_material content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_material* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material >*
      mutable_content();
  const ::d5::db2::asset_material& content(int index) const;
  ::d5::db2::asset_material* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_material_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_material_dbImpl();
};
// -------------------------------------------------------------------

class asset_material_category_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.asset_material_category_db) */ {
 public:
  asset_material_category_db();
  virtual ~asset_material_category_db();

  asset_material_category_db(const asset_material_category_db& from);

  inline asset_material_category_db& operator=(const asset_material_category_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  asset_material_category_db(asset_material_category_db&& from) noexcept
    : asset_material_category_db() {
    *this = ::std::move(from);
  }

  inline asset_material_category_db& operator=(asset_material_category_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const asset_material_category_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const asset_material_category_db* internal_default_instance() {
    return reinterpret_cast<const asset_material_category_db*>(
               &_asset_material_category_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(asset_material_category_db* other);
  friend void swap(asset_material_category_db& a, asset_material_category_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline asset_material_category_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category_db>(NULL);
  }

  asset_material_category_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<asset_material_category_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const asset_material_category_db& from);
  void MergeFrom(const asset_material_category_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(asset_material_category_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.asset_material_category content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::asset_material_category* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material_category >*
      mutable_content();
  const ::d5::db2::asset_material_category& content(int index) const;
  ::d5::db2::asset_material_category* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material_category >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.asset_material_category_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material_category > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsasset_material_category_dbImpl();
};
// -------------------------------------------------------------------

class furniture_color_map_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.furniture_color_map_db) */ {
 public:
  furniture_color_map_db();
  virtual ~furniture_color_map_db();

  furniture_color_map_db(const furniture_color_map_db& from);

  inline furniture_color_map_db& operator=(const furniture_color_map_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  furniture_color_map_db(furniture_color_map_db&& from) noexcept
    : furniture_color_map_db() {
    *this = ::std::move(from);
  }

  inline furniture_color_map_db& operator=(furniture_color_map_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const furniture_color_map_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const furniture_color_map_db* internal_default_instance() {
    return reinterpret_cast<const furniture_color_map_db*>(
               &_furniture_color_map_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(furniture_color_map_db* other);
  friend void swap(furniture_color_map_db& a, furniture_color_map_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline furniture_color_map_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color_map_db>(NULL);
  }

  furniture_color_map_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<furniture_color_map_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const furniture_color_map_db& from);
  void MergeFrom(const furniture_color_map_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(furniture_color_map_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.furniture_color_map content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::furniture_color_map* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >*
      mutable_content();
  const ::d5::db2::furniture_color_map& content(int index) const;
  ::d5::db2::furniture_color_map* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.furniture_color_map_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsfurniture_color_map_dbImpl();
};
// -------------------------------------------------------------------

class GA_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.GA_db) */ {
 public:
  GA_db();
  virtual ~GA_db();

  GA_db(const GA_db& from);

  inline GA_db& operator=(const GA_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GA_db(GA_db&& from) noexcept
    : GA_db() {
    *this = ::std::move(from);
  }

  inline GA_db& operator=(GA_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GA_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GA_db* internal_default_instance() {
    return reinterpret_cast<const GA_db*>(
               &_GA_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(GA_db* other);
  friend void swap(GA_db& a, GA_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GA_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GA_db>(NULL);
  }

  GA_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GA_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GA_db& from);
  void MergeFrom(const GA_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GA_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.GA content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::GA* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::GA >*
      mutable_content();
  const ::d5::db2::GA& content(int index) const;
  ::d5::db2::GA* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::GA >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.GA_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::GA > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsGA_dbImpl();
};
// -------------------------------------------------------------------

class plan_desgin_template_statu_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.plan_desgin_template_statu_db) */ {
 public:
  plan_desgin_template_statu_db();
  virtual ~plan_desgin_template_statu_db();

  plan_desgin_template_statu_db(const plan_desgin_template_statu_db& from);

  inline plan_desgin_template_statu_db& operator=(const plan_desgin_template_statu_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_desgin_template_statu_db(plan_desgin_template_statu_db&& from) noexcept
    : plan_desgin_template_statu_db() {
    *this = ::std::move(from);
  }

  inline plan_desgin_template_statu_db& operator=(plan_desgin_template_statu_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_desgin_template_statu_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_desgin_template_statu_db* internal_default_instance() {
    return reinterpret_cast<const plan_desgin_template_statu_db*>(
               &_plan_desgin_template_statu_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(plan_desgin_template_statu_db* other);
  friend void swap(plan_desgin_template_statu_db& a, plan_desgin_template_statu_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_desgin_template_statu_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_desgin_template_statu_db>(NULL);
  }

  plan_desgin_template_statu_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_desgin_template_statu_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_desgin_template_statu_db& from);
  void MergeFrom(const plan_desgin_template_statu_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_desgin_template_statu_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.plan_desgin_template_statu content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::plan_desgin_template_statu* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_desgin_template_statu >*
      mutable_content();
  const ::d5::db2::plan_desgin_template_statu& content(int index) const;
  ::d5::db2::plan_desgin_template_statu* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_desgin_template_statu >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.plan_desgin_template_statu_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_desgin_template_statu > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsplan_desgin_template_statu_dbImpl();
};
// -------------------------------------------------------------------

class plan_design_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.plan_design_db) */ {
 public:
  plan_design_db();
  virtual ~plan_design_db();

  plan_design_db(const plan_design_db& from);

  inline plan_design_db& operator=(const plan_design_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plan_design_db(plan_design_db&& from) noexcept
    : plan_design_db() {
    *this = ::std::move(from);
  }

  inline plan_design_db& operator=(plan_design_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_design_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plan_design_db* internal_default_instance() {
    return reinterpret_cast<const plan_design_db*>(
               &_plan_design_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(plan_design_db* other);
  friend void swap(plan_design_db& a, plan_design_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plan_design_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design_db>(NULL);
  }

  plan_design_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<plan_design_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plan_design_db& from);
  void MergeFrom(const plan_design_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plan_design_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.plan_design content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::plan_design* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_design >*
      mutable_content();
  const ::d5::db2::plan_design& content(int index) const;
  ::d5::db2::plan_design* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_design >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.plan_design_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_design > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsplan_design_dbImpl();
};
// -------------------------------------------------------------------

class product_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_db) */ {
 public:
  product_db();
  virtual ~product_db();

  product_db(const product_db& from);

  inline product_db& operator=(const product_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_db(product_db&& from) noexcept
    : product_db() {
    *this = ::std::move(from);
  }

  inline product_db& operator=(product_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_db* internal_default_instance() {
    return reinterpret_cast<const product_db*>(
               &_product_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(product_db* other);
  friend void swap(product_db& a, product_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_db>(NULL);
  }

  product_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_db& from);
  void MergeFrom(const product_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.product content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::product* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product >*
      mutable_content();
  const ::d5::db2::product& content(int index) const;
  ::d5::db2::product* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::product >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.product_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_dbImpl();
};
// -------------------------------------------------------------------

class product_brand_temp_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_brand_temp_db) */ {
 public:
  product_brand_temp_db();
  virtual ~product_brand_temp_db();

  product_brand_temp_db(const product_brand_temp_db& from);

  inline product_brand_temp_db& operator=(const product_brand_temp_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_brand_temp_db(product_brand_temp_db&& from) noexcept
    : product_brand_temp_db() {
    *this = ::std::move(from);
  }

  inline product_brand_temp_db& operator=(product_brand_temp_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_brand_temp_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_brand_temp_db* internal_default_instance() {
    return reinterpret_cast<const product_brand_temp_db*>(
               &_product_brand_temp_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(product_brand_temp_db* other);
  friend void swap(product_brand_temp_db& a, product_brand_temp_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_brand_temp_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand_temp_db>(NULL);
  }

  product_brand_temp_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_brand_temp_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_brand_temp_db& from);
  void MergeFrom(const product_brand_temp_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_brand_temp_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.product_brand_temp content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::product_brand_temp* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_brand_temp >*
      mutable_content();
  const ::d5::db2::product_brand_temp& content(int index) const;
  ::d5::db2::product_brand_temp* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_brand_temp >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.product_brand_temp_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_brand_temp > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_brand_temp_dbImpl();
};
// -------------------------------------------------------------------

class product_category_map_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_category_map_db) */ {
 public:
  product_category_map_db();
  virtual ~product_category_map_db();

  product_category_map_db(const product_category_map_db& from);

  inline product_category_map_db& operator=(const product_category_map_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_category_map_db(product_category_map_db&& from) noexcept
    : product_category_map_db() {
    *this = ::std::move(from);
  }

  inline product_category_map_db& operator=(product_category_map_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_category_map_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_category_map_db* internal_default_instance() {
    return reinterpret_cast<const product_category_map_db*>(
               &_product_category_map_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(product_category_map_db* other);
  friend void swap(product_category_map_db& a, product_category_map_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_category_map_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category_map_db>(NULL);
  }

  product_category_map_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_category_map_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_category_map_db& from);
  void MergeFrom(const product_category_map_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_category_map_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.product_category_map content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::product_category_map* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_category_map >*
      mutable_content();
  const ::d5::db2::product_category_map& content(int index) const;
  ::d5::db2::product_category_map* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_category_map >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.product_category_map_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_category_map > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_category_map_dbImpl();
};
// -------------------------------------------------------------------

class product_image_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.product_image_db) */ {
 public:
  product_image_db();
  virtual ~product_image_db();

  product_image_db(const product_image_db& from);

  inline product_image_db& operator=(const product_image_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  product_image_db(product_image_db&& from) noexcept
    : product_image_db() {
    *this = ::std::move(from);
  }

  inline product_image_db& operator=(product_image_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const product_image_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const product_image_db* internal_default_instance() {
    return reinterpret_cast<const product_image_db*>(
               &_product_image_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(product_image_db* other);
  friend void swap(product_image_db& a, product_image_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline product_image_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_image_db>(NULL);
  }

  product_image_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<product_image_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const product_image_db& from);
  void MergeFrom(const product_image_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(product_image_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.product_image content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::product_image* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_image >*
      mutable_content();
  const ::d5::db2::product_image& content(int index) const;
  ::d5::db2::product_image* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_image >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.product_image_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::product_image > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsproduct_image_dbImpl();
};
// -------------------------------------------------------------------

class setting_remember_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.setting_remember_db) */ {
 public:
  setting_remember_db();
  virtual ~setting_remember_db();

  setting_remember_db(const setting_remember_db& from);

  inline setting_remember_db& operator=(const setting_remember_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  setting_remember_db(setting_remember_db&& from) noexcept
    : setting_remember_db() {
    *this = ::std::move(from);
  }

  inline setting_remember_db& operator=(setting_remember_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const setting_remember_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setting_remember_db* internal_default_instance() {
    return reinterpret_cast<const setting_remember_db*>(
               &_setting_remember_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(setting_remember_db* other);
  friend void swap(setting_remember_db& a, setting_remember_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline setting_remember_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<setting_remember_db>(NULL);
  }

  setting_remember_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<setting_remember_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const setting_remember_db& from);
  void MergeFrom(const setting_remember_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(setting_remember_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.setting_remember content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::setting_remember* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::setting_remember >*
      mutable_content();
  const ::d5::db2::setting_remember& content(int index) const;
  ::d5::db2::setting_remember* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::setting_remember >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.setting_remember_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::setting_remember > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultssetting_remember_dbImpl();
};
// -------------------------------------------------------------------

class user_login_db : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:d5.db2.user_login_db) */ {
 public:
  user_login_db();
  virtual ~user_login_db();

  user_login_db(const user_login_db& from);

  inline user_login_db& operator=(const user_login_db& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_login_db(user_login_db&& from) noexcept
    : user_login_db() {
    *this = ::std::move(from);
  }

  inline user_login_db& operator=(user_login_db&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login_db& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login_db* internal_default_instance() {
    return reinterpret_cast<const user_login_db*>(
               &_user_login_db_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(user_login_db* other);
  friend void swap(user_login_db& a, user_login_db& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_login_db* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<user_login_db>(NULL);
  }

  user_login_db* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<user_login_db>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_login_db& from);
  void MergeFrom(const user_login_db& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_login_db* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .d5.db2.user_login content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  ::d5::db2::user_login* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::d5::db2::user_login >*
      mutable_content();
  const ::d5::db2::user_login& content(int index) const;
  ::d5::db2::user_login* add_content();
  const ::google::protobuf::RepeatedPtrField< ::d5::db2::user_login >&
      content() const;

  // .d5.db2.header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::d5::db2::header& head() const;
  ::d5::db2::header* release_head();
  ::d5::db2::header* mutable_head();
  void set_allocated_head(::d5::db2::header* head);

  // @@protoc_insertion_point(class_scope:d5.db2.user_login_db)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::d5::db2::user_login > content_;
  ::d5::db2::header* head_;
  mutable int _cached_size_;
  friend struct ::protobuf_db2_2eproto::TableStruct;
  friend void ::protobuf_db2_2eproto::InitDefaultsuser_login_dbImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// asset_building_material

// string product_id = 1;
inline void asset_building_material::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_building_material::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.product_id)
  return product_id_.GetNoArena();
}
inline void asset_building_material::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.product_id)
}
#if LANG_CXX11
inline void asset_building_material::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_building_material.product_id)
}
#endif
inline void asset_building_material::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_building_material.product_id)
}
inline void asset_building_material::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_building_material.product_id)
}
inline ::std::string* asset_building_material::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_building_material.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_building_material::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_building_material.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_building_material::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_building_material.product_id)
}

// int32 is_for_floor = 2;
inline void asset_building_material::clear_is_for_floor() {
  is_for_floor_ = 0;
}
inline ::google::protobuf::int32 asset_building_material::is_for_floor() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.is_for_floor)
  return is_for_floor_;
}
inline void asset_building_material::set_is_for_floor(::google::protobuf::int32 value) {
  
  is_for_floor_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.is_for_floor)
}

// int32 is_for_wall = 3;
inline void asset_building_material::clear_is_for_wall() {
  is_for_wall_ = 0;
}
inline ::google::protobuf::int32 asset_building_material::is_for_wall() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.is_for_wall)
  return is_for_wall_;
}
inline void asset_building_material::set_is_for_wall(::google::protobuf::int32 value) {
  
  is_for_wall_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.is_for_wall)
}

// int32 is_for_ceiling = 4;
inline void asset_building_material::clear_is_for_ceiling() {
  is_for_ceiling_ = 0;
}
inline ::google::protobuf::int32 asset_building_material::is_for_ceiling() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.is_for_ceiling)
  return is_for_ceiling_;
}
inline void asset_building_material::set_is_for_ceiling(::google::protobuf::int32 value) {
  
  is_for_ceiling_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.is_for_ceiling)
}

// string material_id = 5;
inline void asset_building_material::clear_material_id() {
  material_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_building_material::material_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.material_id)
  return material_id_.GetNoArena();
}
inline void asset_building_material::set_material_id(const ::std::string& value) {
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.material_id)
}
#if LANG_CXX11
inline void asset_building_material::set_material_id(::std::string&& value) {
  
  material_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_building_material.material_id)
}
#endif
inline void asset_building_material::set_material_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_building_material.material_id)
}
inline void asset_building_material::set_material_id(const char* value, size_t size) {
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_building_material.material_id)
}
inline ::std::string* asset_building_material::mutable_material_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_building_material.material_id)
  return material_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_building_material::release_material_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_building_material.material_id)
  
  return material_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_building_material::set_allocated_material_id(::std::string* material_id) {
  if (material_id != NULL) {
    
  } else {
    
  }
  material_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_building_material.material_id)
}

// string detail_info = 6;
inline void asset_building_material::clear_detail_info() {
  detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_building_material::detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.detail_info)
  return detail_info_.GetNoArena();
}
inline void asset_building_material::set_detail_info(const ::std::string& value) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.detail_info)
}
#if LANG_CXX11
inline void asset_building_material::set_detail_info(::std::string&& value) {
  
  detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_building_material.detail_info)
}
#endif
inline void asset_building_material::set_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_building_material.detail_info)
}
inline void asset_building_material::set_detail_info(const char* value, size_t size) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_building_material.detail_info)
}
inline ::std::string* asset_building_material::mutable_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_building_material.detail_info)
  return detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_building_material::release_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_building_material.detail_info)
  
  return detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_building_material::set_allocated_detail_info(::std::string* detail_info) {
  if (detail_info != NULL) {
    
  } else {
    
  }
  detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_building_material.detail_info)
}

// int32 length = 7;
inline void asset_building_material::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 asset_building_material::length() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.length)
  return length_;
}
inline void asset_building_material::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.length)
}

// int32 width = 8;
inline void asset_building_material::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 asset_building_material::width() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material.width)
  return width_;
}
inline void asset_building_material::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_building_material.width)
}

// -------------------------------------------------------------------

// asset_furniture

// string product_id = 1;
inline void asset_furniture::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.product_id)
  return product_id_.GetNoArena();
}
inline void asset_furniture::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.product_id)
}
#if LANG_CXX11
inline void asset_furniture::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture.product_id)
}
#endif
inline void asset_furniture::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture.product_id)
}
inline void asset_furniture::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture.product_id)
}
inline ::std::string* asset_furniture::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture.product_id)
}

// string ue_path = 2;
inline void asset_furniture::clear_ue_path() {
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture::ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.ue_path)
  return ue_path_.GetNoArena();
}
inline void asset_furniture::set_ue_path(const ::std::string& value) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.ue_path)
}
#if LANG_CXX11
inline void asset_furniture::set_ue_path(::std::string&& value) {
  
  ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture.ue_path)
}
#endif
inline void asset_furniture::set_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture.ue_path)
}
inline void asset_furniture::set_ue_path(const char* value, size_t size) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture.ue_path)
}
inline ::std::string* asset_furniture::mutable_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture.ue_path)
  return ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture::release_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture.ue_path)
  
  return ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture::set_allocated_ue_path(::std::string* ue_path) {
  if (ue_path != NULL) {
    
  } else {
    
  }
  ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture.ue_path)
}

// string pak_url = 3;
inline void asset_furniture::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.pak_url)
  return pak_url_.GetNoArena();
}
inline void asset_furniture::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.pak_url)
}
#if LANG_CXX11
inline void asset_furniture::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture.pak_url)
}
#endif
inline void asset_furniture::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture.pak_url)
}
inline void asset_furniture::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture.pak_url)
}
inline ::std::string* asset_furniture::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture.pak_url)
}

// double length = 4;
inline void asset_furniture::clear_length() {
  length_ = 0;
}
inline double asset_furniture::length() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.length)
  return length_;
}
inline void asset_furniture::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.length)
}

// double depth = 5;
inline void asset_furniture::clear_depth() {
  depth_ = 0;
}
inline double asset_furniture::depth() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.depth)
  return depth_;
}
inline void asset_furniture::set_depth(double value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.depth)
}

// double height = 6;
inline void asset_furniture::clear_height() {
  height_ = 0;
}
inline double asset_furniture::height() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.height)
  return height_;
}
inline void asset_furniture::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.height)
}

// int32 is_interactive = 7;
inline void asset_furniture::clear_is_interactive() {
  is_interactive_ = 0;
}
inline ::google::protobuf::int32 asset_furniture::is_interactive() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.is_interactive)
  return is_interactive_;
}
inline void asset_furniture::set_is_interactive(::google::protobuf::int32 value) {
  
  is_interactive_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.is_interactive)
}

// int32 intelligent_type = 8;
inline void asset_furniture::clear_intelligent_type() {
  intelligent_type_ = 0;
}
inline ::google::protobuf::int32 asset_furniture::intelligent_type() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.intelligent_type)
  return intelligent_type_;
}
inline void asset_furniture::set_intelligent_type(::google::protobuf::int32 value) {
  
  intelligent_type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.intelligent_type)
}

// int32 furniture_style_id = 9;
inline void asset_furniture::clear_furniture_style_id() {
  furniture_style_id_ = 0;
}
inline ::google::protobuf::int32 asset_furniture::furniture_style_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.furniture_style_id)
  return furniture_style_id_;
}
inline void asset_furniture::set_furniture_style_id(::google::protobuf::int32 value) {
  
  furniture_style_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.furniture_style_id)
}

// int32 furniture_main_material_id = 10;
inline void asset_furniture::clear_furniture_main_material_id() {
  furniture_main_material_id_ = 0;
}
inline ::google::protobuf::int32 asset_furniture::furniture_main_material_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.furniture_main_material_id)
  return furniture_main_material_id_;
}
inline void asset_furniture::set_furniture_main_material_id(::google::protobuf::int32 value) {
  
  furniture_main_material_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.furniture_main_material_id)
}

// string detail_info = 11;
inline void asset_furniture::clear_detail_info() {
  detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture::detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture.detail_info)
  return detail_info_.GetNoArena();
}
inline void asset_furniture::set_detail_info(const ::std::string& value) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture.detail_info)
}
#if LANG_CXX11
inline void asset_furniture::set_detail_info(::std::string&& value) {
  
  detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture.detail_info)
}
#endif
inline void asset_furniture::set_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture.detail_info)
}
inline void asset_furniture::set_detail_info(const char* value, size_t size) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture.detail_info)
}
inline ::std::string* asset_furniture::mutable_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture.detail_info)
  return detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture::release_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture.detail_info)
  
  return detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture::set_allocated_detail_info(::std::string* detail_info) {
  if (detail_info != NULL) {
    
  } else {
    
  }
  detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture.detail_info)
}

// -------------------------------------------------------------------

// asset_furniture_style

// string id = 1;
inline void asset_furniture_style::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.id)
  return id_.GetNoArena();
}
inline void asset_furniture_style::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.id)
}
#if LANG_CXX11
inline void asset_furniture_style::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style.id)
}
#endif
inline void asset_furniture_style::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style.id)
}
inline void asset_furniture_style::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style.id)
}
inline ::std::string* asset_furniture_style::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style.id)
}

// string title = 2;
inline void asset_furniture_style::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.title)
  return title_.GetNoArena();
}
inline void asset_furniture_style::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.title)
}
#if LANG_CXX11
inline void asset_furniture_style::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style.title)
}
#endif
inline void asset_furniture_style::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style.title)
}
inline void asset_furniture_style::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style.title)
}
inline ::std::string* asset_furniture_style::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style.title)
}

// string thumbnail_url = 3;
inline void asset_furniture_style::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void asset_furniture_style::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.thumbnail_url)
}
#if LANG_CXX11
inline void asset_furniture_style::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style.thumbnail_url)
}
#endif
inline void asset_furniture_style::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style.thumbnail_url)
}
inline void asset_furniture_style::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style.thumbnail_url)
}
inline ::std::string* asset_furniture_style::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style.thumbnail_url)
}

// int32 display_index = 4;
inline void asset_furniture_style::clear_display_index() {
  display_index_ = 0;
}
inline ::google::protobuf::int32 asset_furniture_style::display_index() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.display_index)
  return display_index_;
}
inline void asset_furniture_style::set_display_index(::google::protobuf::int32 value) {
  
  display_index_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.display_index)
}

// string product_id = 5;
inline void asset_furniture_style::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.product_id)
  return product_id_.GetNoArena();
}
inline void asset_furniture_style::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.product_id)
}
#if LANG_CXX11
inline void asset_furniture_style::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style.product_id)
}
#endif
inline void asset_furniture_style::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style.product_id)
}
inline void asset_furniture_style::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style.product_id)
}
inline ::std::string* asset_furniture_style::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style.product_id)
}

// int64 create_time = 6;
inline void asset_furniture_style::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_furniture_style::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.create_time)
  return create_time_;
}
inline void asset_furniture_style::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.create_time)
}

// int64 update_time = 7;
inline void asset_furniture_style::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_furniture_style::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.update_time)
  return update_time_;
}
inline void asset_furniture_style::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.update_time)
}

// int32 sync_status = 8;
inline void asset_furniture_style::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 asset_furniture_style::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style.sync_status)
  return sync_status_;
}
inline void asset_furniture_style::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style.sync_status)
}

// -------------------------------------------------------------------

// asset_furniture_style_material_map

// string id = 1;
inline void asset_furniture_style_material_map::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style_material_map::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map.id)
  return id_.GetNoArena();
}
inline void asset_furniture_style_material_map::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style_material_map.id)
}
#if LANG_CXX11
inline void asset_furniture_style_material_map::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style_material_map.id)
}
#endif
inline void asset_furniture_style_material_map::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style_material_map.id)
}
inline void asset_furniture_style_material_map::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style_material_map.id)
}
inline ::std::string* asset_furniture_style_material_map::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style_material_map::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_material_map.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style_material_map::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_material_map.id)
}

// string material_id = 2;
inline void asset_furniture_style_material_map::clear_material_id() {
  material_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style_material_map::material_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map.material_id)
  return material_id_.GetNoArena();
}
inline void asset_furniture_style_material_map::set_material_id(const ::std::string& value) {
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style_material_map.material_id)
}
#if LANG_CXX11
inline void asset_furniture_style_material_map::set_material_id(::std::string&& value) {
  
  material_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style_material_map.material_id)
}
#endif
inline void asset_furniture_style_material_map::set_material_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style_material_map.material_id)
}
inline void asset_furniture_style_material_map::set_material_id(const char* value, size_t size) {
  
  material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style_material_map.material_id)
}
inline ::std::string* asset_furniture_style_material_map::mutable_material_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map.material_id)
  return material_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style_material_map::release_material_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_material_map.material_id)
  
  return material_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style_material_map::set_allocated_material_id(::std::string* material_id) {
  if (material_id != NULL) {
    
  } else {
    
  }
  material_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_material_map.material_id)
}

// string style_id = 3;
inline void asset_furniture_style_material_map::clear_style_id() {
  style_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style_material_map::style_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map.style_id)
  return style_id_.GetNoArena();
}
inline void asset_furniture_style_material_map::set_style_id(const ::std::string& value) {
  
  style_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style_material_map.style_id)
}
#if LANG_CXX11
inline void asset_furniture_style_material_map::set_style_id(::std::string&& value) {
  
  style_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style_material_map.style_id)
}
#endif
inline void asset_furniture_style_material_map::set_style_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  style_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style_material_map.style_id)
}
inline void asset_furniture_style_material_map::set_style_id(const char* value, size_t size) {
  
  style_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style_material_map.style_id)
}
inline ::std::string* asset_furniture_style_material_map::mutable_style_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map.style_id)
  return style_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style_material_map::release_style_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_material_map.style_id)
  
  return style_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style_material_map::set_allocated_style_id(::std::string* style_id) {
  if (style_id != NULL) {
    
  } else {
    
  }
  style_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), style_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_material_map.style_id)
}

// int32 material_index = 4;
inline void asset_furniture_style_material_map::clear_material_index() {
  material_index_ = 0;
}
inline ::google::protobuf::int32 asset_furniture_style_material_map::material_index() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map.material_index)
  return material_index_;
}
inline void asset_furniture_style_material_map::set_material_index(::google::protobuf::int32 value) {
  
  material_index_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style_material_map.material_index)
}

// string element_name = 5;
inline void asset_furniture_style_material_map::clear_element_name() {
  element_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_furniture_style_material_map::element_name() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map.element_name)
  return element_name_.GetNoArena();
}
inline void asset_furniture_style_material_map::set_element_name(const ::std::string& value) {
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_furniture_style_material_map.element_name)
}
#if LANG_CXX11
inline void asset_furniture_style_material_map::set_element_name(::std::string&& value) {
  
  element_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_furniture_style_material_map.element_name)
}
#endif
inline void asset_furniture_style_material_map::set_element_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_furniture_style_material_map.element_name)
}
inline void asset_furniture_style_material_map::set_element_name(const char* value, size_t size) {
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_furniture_style_material_map.element_name)
}
inline ::std::string* asset_furniture_style_material_map::mutable_element_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map.element_name)
  return element_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_furniture_style_material_map::release_element_name() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_material_map.element_name)
  
  return element_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_furniture_style_material_map::set_allocated_element_name(::std::string* element_name) {
  if (element_name != NULL) {
    
  } else {
    
  }
  element_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_material_map.element_name)
}

// -------------------------------------------------------------------

// asset_material

// string id = 1;
inline void asset_material::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.id)
  return id_.GetNoArena();
}
inline void asset_material::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.id)
}
#if LANG_CXX11
inline void asset_material::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.id)
}
#endif
inline void asset_material::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.id)
}
inline void asset_material::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.id)
}
inline ::std::string* asset_material::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.id)
}

// string title = 2;
inline void asset_material::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.title)
  return title_.GetNoArena();
}
inline void asset_material::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.title)
}
#if LANG_CXX11
inline void asset_material::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.title)
}
#endif
inline void asset_material::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.title)
}
inline void asset_material::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.title)
}
inline ::std::string* asset_material::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.title)
}

// string ue_path = 3;
inline void asset_material::clear_ue_path() {
  ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.ue_path)
  return ue_path_.GetNoArena();
}
inline void asset_material::set_ue_path(const ::std::string& value) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.ue_path)
}
#if LANG_CXX11
inline void asset_material::set_ue_path(::std::string&& value) {
  
  ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.ue_path)
}
#endif
inline void asset_material::set_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.ue_path)
}
inline void asset_material::set_ue_path(const char* value, size_t size) {
  
  ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.ue_path)
}
inline ::std::string* asset_material::mutable_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.ue_path)
  return ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.ue_path)
  
  return ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_ue_path(::std::string* ue_path) {
  if (ue_path != NULL) {
    
  } else {
    
  }
  ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.ue_path)
}

// string mat_info = 4;
inline void asset_material::clear_mat_info() {
  mat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::mat_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.mat_info)
  return mat_info_.GetNoArena();
}
inline void asset_material::set_mat_info(const ::std::string& value) {
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.mat_info)
}
#if LANG_CXX11
inline void asset_material::set_mat_info(::std::string&& value) {
  
  mat_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.mat_info)
}
#endif
inline void asset_material::set_mat_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.mat_info)
}
inline void asset_material::set_mat_info(const char* value, size_t size) {
  
  mat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.mat_info)
}
inline ::std::string* asset_material::mutable_mat_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.mat_info)
  return mat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_mat_info() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.mat_info)
  
  return mat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_mat_info(::std::string* mat_info) {
  if (mat_info != NULL) {
    
  } else {
    
  }
  mat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mat_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.mat_info)
}

// string thumbnail_url = 5;
inline void asset_material::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void asset_material::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.thumbnail_url)
}
#if LANG_CXX11
inline void asset_material::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.thumbnail_url)
}
#endif
inline void asset_material::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.thumbnail_url)
}
inline void asset_material::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.thumbnail_url)
}
inline ::std::string* asset_material::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.thumbnail_url)
}

// int32 is_del = 6;
inline void asset_material::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.is_del)
  return is_del_;
}
inline void asset_material::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.is_del)
}

// int32 is_private = 7;
inline void asset_material::clear_is_private() {
  is_private_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_private() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.is_private)
  return is_private_;
}
inline void asset_material::set_is_private(::google::protobuf::int32 value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.is_private)
}

// int32 user_id = 8;
inline void asset_material::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.user_id)
  return user_id_;
}
inline void asset_material::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.user_id)
}

// int32 company_id = 9;
inline void asset_material::clear_company_id() {
  company_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::company_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.company_id)
  return company_id_;
}
inline void asset_material::set_company_id(::google::protobuf::int32 value) {
  
  company_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.company_id)
}

// int64 create_time = 10;
inline void asset_material::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_material::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.create_time)
  return create_time_;
}
inline void asset_material::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.create_time)
}

// int64 update_time = 11;
inline void asset_material::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 asset_material::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.update_time)
  return update_time_;
}
inline void asset_material::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.update_time)
}

// int32 category_id = 12;
inline void asset_material::clear_category_id() {
  category_id_ = 0;
}
inline ::google::protobuf::int32 asset_material::category_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.category_id)
  return category_id_;
}
inline void asset_material::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.category_id)
}

// int32 metallic = 17;
inline void asset_material::clear_metallic() {
  metallic_ = 0;
}
inline ::google::protobuf::int32 asset_material::metallic() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.metallic)
  return metallic_;
}
inline void asset_material::set_metallic(::google::protobuf::int32 value) {
  
  metallic_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.metallic)
}

// int32 roughness = 18;
inline void asset_material::clear_roughness() {
  roughness_ = 0;
}
inline ::google::protobuf::int32 asset_material::roughness() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.roughness)
  return roughness_;
}
inline void asset_material::set_roughness(::google::protobuf::int32 value) {
  
  roughness_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.roughness)
}

// int32 emissive_color = 19;
inline void asset_material::clear_emissive_color() {
  emissive_color_ = 0;
}
inline ::google::protobuf::int32 asset_material::emissive_color() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.emissive_color)
  return emissive_color_;
}
inline void asset_material::set_emissive_color(::google::protobuf::int32 value) {
  
  emissive_color_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.emissive_color)
}

// int32 type = 20;
inline void asset_material::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 asset_material::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.type)
  return type_;
}
inline void asset_material::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.type)
}

// int32 is_repeat = 21;
inline void asset_material::clear_is_repeat() {
  is_repeat_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_repeat() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.is_repeat)
  return is_repeat_;
}
inline void asset_material::set_is_repeat(::google::protobuf::int32 value) {
  
  is_repeat_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.is_repeat)
}

// int32 is_submit = 22;
inline void asset_material::clear_is_submit() {
  is_submit_ = 0;
}
inline ::google::protobuf::int32 asset_material::is_submit() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.is_submit)
  return is_submit_;
}
inline void asset_material::set_is_submit(::google::protobuf::int32 value) {
  
  is_submit_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.is_submit)
}

// int32 source = 23;
inline void asset_material::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 asset_material::source() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.source)
  return source_;
}
inline void asset_material::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.source)
}

// int32 sync_status = 24;
inline void asset_material::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 asset_material::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.sync_status)
  return sync_status_;
}
inline void asset_material::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.sync_status)
}

// string pak_url = 25;
inline void asset_material::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.pak_url)
  return pak_url_.GetNoArena();
}
inline void asset_material::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.pak_url)
}
#if LANG_CXX11
inline void asset_material::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.pak_url)
}
#endif
inline void asset_material::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.pak_url)
}
inline void asset_material::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.pak_url)
}
inline ::std::string* asset_material::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.pak_url)
}

// string dependent_file_list = 26;
inline void asset_material::clear_dependent_file_list() {
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material::dependent_file_list() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material.dependent_file_list)
  return dependent_file_list_.GetNoArena();
}
inline void asset_material::set_dependent_file_list(const ::std::string& value) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material.dependent_file_list)
}
#if LANG_CXX11
inline void asset_material::set_dependent_file_list(::std::string&& value) {
  
  dependent_file_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material.dependent_file_list)
}
#endif
inline void asset_material::set_dependent_file_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material.dependent_file_list)
}
inline void asset_material::set_dependent_file_list(const char* value, size_t size) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material.dependent_file_list)
}
inline ::std::string* asset_material::mutable_dependent_file_list() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material.dependent_file_list)
  return dependent_file_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material::release_dependent_file_list() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material.dependent_file_list)
  
  return dependent_file_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material::set_allocated_dependent_file_list(::std::string* dependent_file_list) {
  if (dependent_file_list != NULL) {
    
  } else {
    
  }
  dependent_file_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dependent_file_list);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material.dependent_file_list)
}

// -------------------------------------------------------------------

// asset_material_category

// int32 id = 1;
inline void asset_material_category::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category.id)
  return id_;
}
inline void asset_material_category::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material_category.id)
}

// string title = 2;
inline void asset_material_category::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& asset_material_category::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category.title)
  return title_.GetNoArena();
}
inline void asset_material_category::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.asset_material_category.title)
}
#if LANG_CXX11
inline void asset_material_category::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.asset_material_category.title)
}
#endif
inline void asset_material_category::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.asset_material_category.title)
}
inline void asset_material_category::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.asset_material_category.title)
}
inline ::std::string* asset_material_category::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material_category.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* asset_material_category::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material_category.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void asset_material_category::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material_category.title)
}

// int32 parent_id = 3;
inline void asset_material_category::clear_parent_id() {
  parent_id_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::parent_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category.parent_id)
  return parent_id_;
}
inline void asset_material_category::set_parent_id(::google::protobuf::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material_category.parent_id)
}

// int32 level = 4;
inline void asset_material_category::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 asset_material_category::level() const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category.level)
  return level_;
}
inline void asset_material_category::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.asset_material_category.level)
}

// -------------------------------------------------------------------

// furniture_color_map

// int32 color_id = 2;
inline void furniture_color_map::clear_color_id() {
  color_id_ = 0;
}
inline ::google::protobuf::int32 furniture_color_map::color_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.furniture_color_map.color_id)
  return color_id_;
}
inline void furniture_color_map::set_color_id(::google::protobuf::int32 value) {
  
  color_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.furniture_color_map.color_id)
}

// string product_id = 3;
inline void furniture_color_map::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& furniture_color_map::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.furniture_color_map.product_id)
  return product_id_.GetNoArena();
}
inline void furniture_color_map::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.furniture_color_map.product_id)
}
#if LANG_CXX11
inline void furniture_color_map::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.furniture_color_map.product_id)
}
#endif
inline void furniture_color_map::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.furniture_color_map.product_id)
}
inline void furniture_color_map::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.furniture_color_map.product_id)
}
inline ::std::string* furniture_color_map::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.furniture_color_map.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* furniture_color_map::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.furniture_color_map.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void furniture_color_map::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.furniture_color_map.product_id)
}

// -------------------------------------------------------------------

// GA

// int32 cid = 1;
inline void GA::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 GA::cid() const {
  // @@protoc_insertion_point(field_get:d5.db2.GA.cid)
  return cid_;
}
inline void GA::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.GA.cid)
}

// -------------------------------------------------------------------

// plan_desgin_template_statu

// string id = 1;
inline void plan_desgin_template_statu::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_desgin_template_statu::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_desgin_template_statu.id)
  return id_.GetNoArena();
}
inline void plan_desgin_template_statu::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_desgin_template_statu.id)
}
#if LANG_CXX11
inline void plan_desgin_template_statu::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_desgin_template_statu.id)
}
#endif
inline void plan_desgin_template_statu::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_desgin_template_statu.id)
}
inline void plan_desgin_template_statu::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_desgin_template_statu.id)
}
inline ::std::string* plan_desgin_template_statu::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_desgin_template_statu.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_desgin_template_statu::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_desgin_template_statu.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_desgin_template_statu::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_desgin_template_statu.id)
}

// int64 updatetime = 2;
inline void plan_desgin_template_statu::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plan_desgin_template_statu::updatetime() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_desgin_template_statu.updatetime)
  return updatetime_;
}
inline void plan_desgin_template_statu::set_updatetime(::google::protobuf::int64 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_desgin_template_statu.updatetime)
}

// string depend_files = 3;
inline void plan_desgin_template_statu::clear_depend_files() {
  depend_files_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_desgin_template_statu::depend_files() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_desgin_template_statu.depend_files)
  return depend_files_.GetNoArena();
}
inline void plan_desgin_template_statu::set_depend_files(const ::std::string& value) {
  
  depend_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_desgin_template_statu.depend_files)
}
#if LANG_CXX11
inline void plan_desgin_template_statu::set_depend_files(::std::string&& value) {
  
  depend_files_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_desgin_template_statu.depend_files)
}
#endif
inline void plan_desgin_template_statu::set_depend_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  depend_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_desgin_template_statu.depend_files)
}
inline void plan_desgin_template_statu::set_depend_files(const char* value, size_t size) {
  
  depend_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_desgin_template_statu.depend_files)
}
inline ::std::string* plan_desgin_template_statu::mutable_depend_files() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_desgin_template_statu.depend_files)
  return depend_files_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_desgin_template_statu::release_depend_files() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_desgin_template_statu.depend_files)
  
  return depend_files_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_desgin_template_statu::set_allocated_depend_files(::std::string* depend_files) {
  if (depend_files != NULL) {
    
  } else {
    
  }
  depend_files_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), depend_files);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_desgin_template_statu.depend_files)
}

// -------------------------------------------------------------------

// plan_design

// string id = 1;
inline void plan_design::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.id)
  return id_.GetNoArena();
}
inline void plan_design::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.id)
}
#if LANG_CXX11
inline void plan_design::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.id)
}
#endif
inline void plan_design::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.id)
}
inline void plan_design::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.id)
}
inline ::std::string* plan_design::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.id)
}

// string title = 2;
inline void plan_design::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.title)
  return title_.GetNoArena();
}
inline void plan_design::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.title)
}
#if LANG_CXX11
inline void plan_design::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.title)
}
#endif
inline void plan_design::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.title)
}
inline void plan_design::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.title)
}
inline ::std::string* plan_design::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.title)
}

// double size = 3;
inline void plan_design::clear_size() {
  size_ = 0;
}
inline double plan_design::size() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.size)
  return size_;
}
inline void plan_design::set_size(double value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.size)
}

// string pak_url = 5;
inline void plan_design::clear_pak_url() {
  pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.pak_url)
  return pak_url_.GetNoArena();
}
inline void plan_design::set_pak_url(const ::std::string& value) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.pak_url)
}
#if LANG_CXX11
inline void plan_design::set_pak_url(::std::string&& value) {
  
  pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.pak_url)
}
#endif
inline void plan_design::set_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.pak_url)
}
inline void plan_design::set_pak_url(const char* value, size_t size) {
  
  pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.pak_url)
}
inline ::std::string* plan_design::mutable_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.pak_url)
  return pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.pak_url)
  
  return pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_pak_url(::std::string* pak_url) {
  if (pak_url != NULL) {
    
  } else {
    
  }
  pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.pak_url)
}

// string thumbnail_url = 6;
inline void plan_design::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void plan_design::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.thumbnail_url)
}
#if LANG_CXX11
inline void plan_design::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.thumbnail_url)
}
#endif
inline void plan_design::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.thumbnail_url)
}
inline void plan_design::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.thumbnail_url)
}
inline ::std::string* plan_design::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.thumbnail_url)
}

// string floor_edit_file_url = 7;
inline void plan_design::clear_floor_edit_file_url() {
  floor_edit_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::floor_edit_file_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_edit_file_url)
  return floor_edit_file_url_.GetNoArena();
}
inline void plan_design::set_floor_edit_file_url(const ::std::string& value) {
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_edit_file_url)
}
#if LANG_CXX11
inline void plan_design::set_floor_edit_file_url(::std::string&& value) {
  
  floor_edit_file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.floor_edit_file_url)
}
#endif
inline void plan_design::set_floor_edit_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.floor_edit_file_url)
}
inline void plan_design::set_floor_edit_file_url(const char* value, size_t size) {
  
  floor_edit_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.floor_edit_file_url)
}
inline ::std::string* plan_design::mutable_floor_edit_file_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.floor_edit_file_url)
  return floor_edit_file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_floor_edit_file_url() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.floor_edit_file_url)
  
  return floor_edit_file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_floor_edit_file_url(::std::string* floor_edit_file_url) {
  if (floor_edit_file_url != NULL) {
    
  } else {
    
  }
  floor_edit_file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_edit_file_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.floor_edit_file_url)
}

// string detail_info = 8;
inline void plan_design::clear_detail_info() {
  detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.detail_info)
  return detail_info_.GetNoArena();
}
inline void plan_design::set_detail_info(const ::std::string& value) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.detail_info)
}
#if LANG_CXX11
inline void plan_design::set_detail_info(::std::string&& value) {
  
  detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.detail_info)
}
#endif
inline void plan_design::set_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.detail_info)
}
inline void plan_design::set_detail_info(const char* value, size_t size) {
  
  detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.detail_info)
}
inline ::std::string* plan_design::mutable_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.detail_info)
  return detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.detail_info)
  
  return detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_detail_info(::std::string* detail_info) {
  if (detail_info != NULL) {
    
  } else {
    
  }
  detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.detail_info)
}

// string design_file_url = 9;
inline void plan_design::clear_design_file_url() {
  design_file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::design_file_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.design_file_url)
  return design_file_url_.GetNoArena();
}
inline void plan_design::set_design_file_url(const ::std::string& value) {
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.design_file_url)
}
#if LANG_CXX11
inline void plan_design::set_design_file_url(::std::string&& value) {
  
  design_file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.design_file_url)
}
#endif
inline void plan_design::set_design_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.design_file_url)
}
inline void plan_design::set_design_file_url(const char* value, size_t size) {
  
  design_file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.design_file_url)
}
inline ::std::string* plan_design::mutable_design_file_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.design_file_url)
  return design_file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_design_file_url() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.design_file_url)
  
  return design_file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_design_file_url(::std::string* design_file_url) {
  if (design_file_url != NULL) {
    
  } else {
    
  }
  design_file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), design_file_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.design_file_url)
}

// int32 district_id = 10;
inline void plan_design::clear_district_id() {
  district_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::district_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.district_id)
  return district_id_;
}
inline void plan_design::set_district_id(::google::protobuf::int32 value) {
  
  district_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.district_id)
}

// int32 property_type_id = 11;
inline void plan_design::clear_property_type_id() {
  property_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::property_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.property_type_id)
  return property_type_id_;
}
inline void plan_design::set_property_type_id(::google::protobuf::int32 value) {
  
  property_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.property_type_id)
}

// int32 room_type_id = 12;
inline void plan_design::clear_room_type_id() {
  room_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::room_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.room_type_id)
  return room_type_id_;
}
inline void plan_design::set_room_type_id(::google::protobuf::int32 value) {
  
  room_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.room_type_id)
}

// int32 template_type_id = 13;
inline void plan_design::clear_template_type_id() {
  template_type_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::template_type_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.template_type_id)
  return template_type_id_;
}
inline void plan_design::set_template_type_id(::google::protobuf::int32 value) {
  
  template_type_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.template_type_id)
}

// int32 cook_stage = 14;
inline void plan_design::clear_cook_stage() {
  cook_stage_ = 0;
}
inline ::google::protobuf::int32 plan_design::cook_stage() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.cook_stage)
  return cook_stage_;
}
inline void plan_design::set_cook_stage(::google::protobuf::int32 value) {
  
  cook_stage_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.cook_stage)
}

// int32 is_del = 15;
inline void plan_design::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 plan_design::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.is_del)
  return is_del_;
}
inline void plan_design::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.is_del)
}

// int64 create_time = 16;
inline void plan_design::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plan_design::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.create_time)
  return create_time_;
}
inline void plan_design::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.create_time)
}

// int64 update_time = 17;
inline void plan_design::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 plan_design::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.update_time)
  return update_time_;
}
inline void plan_design::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.update_time)
}

// int32 user_id = 18;
inline void plan_design::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.user_id)
  return user_id_;
}
inline void plan_design::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.user_id)
}

// int32 company_id = 19;
inline void plan_design::clear_company_id() {
  company_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::company_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.company_id)
  return company_id_;
}
inline void plan_design::set_company_id(::google::protobuf::int32 value) {
  
  company_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.company_id)
}

// int32 sync_status = 20;
inline void plan_design::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 plan_design::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.sync_status)
  return sync_status_;
}
inline void plan_design::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.sync_status)
}

// int32 floor_edit_error_code = 21;
inline void plan_design::clear_floor_edit_error_code() {
  floor_edit_error_code_ = 0;
}
inline ::google::protobuf::int32 plan_design::floor_edit_error_code() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_edit_error_code)
  return floor_edit_error_code_;
}
inline void plan_design::set_floor_edit_error_code(::google::protobuf::int32 value) {
  
  floor_edit_error_code_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_edit_error_code)
}

// string cook_id = 23;
inline void plan_design::clear_cook_id() {
  cook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::cook_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.cook_id)
  return cook_id_.GetNoArena();
}
inline void plan_design::set_cook_id(const ::std::string& value) {
  
  cook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.cook_id)
}
#if LANG_CXX11
inline void plan_design::set_cook_id(::std::string&& value) {
  
  cook_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.cook_id)
}
#endif
inline void plan_design::set_cook_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.cook_id)
}
inline void plan_design::set_cook_id(const char* value, size_t size) {
  
  cook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.cook_id)
}
inline ::std::string* plan_design::mutable_cook_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.cook_id)
  return cook_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_cook_id() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.cook_id)
  
  return cook_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_cook_id(::std::string* cook_id) {
  if (cook_id != NULL) {
    
  } else {
    
  }
  cook_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cook_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.cook_id)
}

// string floor_ref_url = 24;
inline void plan_design::clear_floor_ref_url() {
  floor_ref_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::floor_ref_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_ref_url)
  return floor_ref_url_.GetNoArena();
}
inline void plan_design::set_floor_ref_url(const ::std::string& value) {
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_ref_url)
}
#if LANG_CXX11
inline void plan_design::set_floor_ref_url(::std::string&& value) {
  
  floor_ref_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.floor_ref_url)
}
#endif
inline void plan_design::set_floor_ref_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.floor_ref_url)
}
inline void plan_design::set_floor_ref_url(const char* value, size_t size) {
  
  floor_ref_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.floor_ref_url)
}
inline ::std::string* plan_design::mutable_floor_ref_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.floor_ref_url)
  return floor_ref_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_floor_ref_url() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.floor_ref_url)
  
  return floor_ref_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_floor_ref_url(::std::string* floor_ref_url) {
  if (floor_ref_url != NULL) {
    
  } else {
    
  }
  floor_ref_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_ref_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.floor_ref_url)
}

// double floor_ref_width = 25;
inline void plan_design::clear_floor_ref_width() {
  floor_ref_width_ = 0;
}
inline double plan_design::floor_ref_width() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_ref_width)
  return floor_ref_width_;
}
inline void plan_design::set_floor_ref_width(double value) {
  
  floor_ref_width_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_ref_width)
}

// double floor_ref_height = 26;
inline void plan_design::clear_floor_ref_height() {
  floor_ref_height_ = 0;
}
inline double plan_design::floor_ref_height() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_ref_height)
  return floor_ref_height_;
}
inline void plan_design::set_floor_ref_height(double value) {
  
  floor_ref_height_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_ref_height)
}

// double floor_ref_angle = 27;
inline void plan_design::clear_floor_ref_angle() {
  floor_ref_angle_ = 0;
}
inline double plan_design::floor_ref_angle() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.floor_ref_angle)
  return floor_ref_angle_;
}
inline void plan_design::set_floor_ref_angle(double value) {
  
  floor_ref_angle_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.floor_ref_angle)
}

// int32 group_id = 28;
inline void plan_design::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::group_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.group_id)
  return group_id_;
}
inline void plan_design::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.group_id)
}

// int32 condo_id = 29;
inline void plan_design::clear_condo_id() {
  condo_id_ = 0;
}
inline ::google::protobuf::int32 plan_design::condo_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.condo_id)
  return condo_id_;
}
inline void plan_design::set_condo_id(::google::protobuf::int32 value) {
  
  condo_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.condo_id)
}

// string username = 30;
inline void plan_design::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::username() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.username)
  return username_.GetNoArena();
}
inline void plan_design::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.username)
}
#if LANG_CXX11
inline void plan_design::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.username)
}
#endif
inline void plan_design::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.username)
}
inline void plan_design::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.username)
}
inline ::std::string* plan_design::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_username() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.username)
}

// string dependent_file_list = 31;
inline void plan_design::clear_dependent_file_list() {
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::dependent_file_list() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.dependent_file_list)
  return dependent_file_list_.GetNoArena();
}
inline void plan_design::set_dependent_file_list(const ::std::string& value) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.dependent_file_list)
}
#if LANG_CXX11
inline void plan_design::set_dependent_file_list(::std::string&& value) {
  
  dependent_file_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.dependent_file_list)
}
#endif
inline void plan_design::set_dependent_file_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.dependent_file_list)
}
inline void plan_design::set_dependent_file_list(const char* value, size_t size) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.dependent_file_list)
}
inline ::std::string* plan_design::mutable_dependent_file_list() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.dependent_file_list)
  return dependent_file_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_dependent_file_list() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.dependent_file_list)
  
  return dependent_file_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_dependent_file_list(::std::string* dependent_file_list) {
  if (dependent_file_list != NULL) {
    
  } else {
    
  }
  dependent_file_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dependent_file_list);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.dependent_file_list)
}

// int32 source = 32;
inline void plan_design::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 plan_design::source() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.source)
  return source_;
}
inline void plan_design::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.source)
}

// string quotation_info = 33;
inline void plan_design::clear_quotation_info() {
  quotation_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plan_design::quotation_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.quotation_info)
  return quotation_info_.GetNoArena();
}
inline void plan_design::set_quotation_info(const ::std::string& value) {
  
  quotation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.quotation_info)
}
#if LANG_CXX11
inline void plan_design::set_quotation_info(::std::string&& value) {
  
  quotation_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.plan_design.quotation_info)
}
#endif
inline void plan_design::set_quotation_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quotation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.plan_design.quotation_info)
}
inline void plan_design::set_quotation_info(const char* value, size_t size) {
  
  quotation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.plan_design.quotation_info)
}
inline ::std::string* plan_design::mutable_quotation_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design.quotation_info)
  return quotation_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plan_design::release_quotation_info() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design.quotation_info)
  
  return quotation_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plan_design::set_allocated_quotation_info(::std::string* quotation_info) {
  if (quotation_info != NULL) {
    
  } else {
    
  }
  quotation_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quotation_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design.quotation_info)
}

// int32 is_private = 34;
inline void plan_design::clear_is_private() {
  is_private_ = 0;
}
inline ::google::protobuf::int32 plan_design::is_private() const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design.is_private)
  return is_private_;
}
inline void plan_design::set_is_private(::google::protobuf::int32 value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.plan_design.is_private)
}

// -------------------------------------------------------------------

// product

// string id = 1;
inline void product::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.id)
  return id_.GetNoArena();
}
inline void product::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.id)
}
#if LANG_CXX11
inline void product::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.id)
}
#endif
inline void product::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.id)
}
inline void product::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.id)
}
inline ::std::string* product::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.id)
}

// string title = 2;
inline void product::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.title)
  return title_.GetNoArena();
}
inline void product::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.title)
}
#if LANG_CXX11
inline void product::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.title)
}
#endif
inline void product::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.title)
}
inline void product::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.title)
}
inline ::std::string* product::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.product.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.title)
}

// string description = 3;
inline void product::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::description() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.description)
  return description_.GetNoArena();
}
inline void product::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.description)
}
#if LANG_CXX11
inline void product::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.description)
}
#endif
inline void product::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.description)
}
inline void product::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.description)
}
inline ::std::string* product::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_description() {
  // @@protoc_insertion_point(field_release:d5.db2.product.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.description)
}

// double price = 4;
inline void product::clear_price() {
  price_ = 0;
}
inline double product::price() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.price)
  return price_;
}
inline void product::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.price)
}

// int64 create_time = 5;
inline void product::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 product::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.create_time)
  return create_time_;
}
inline void product::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.create_time)
}

// int64 update_time = 6;
inline void product::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 product::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.update_time)
  return update_time_;
}
inline void product::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.update_time)
}

// int32 brand_id = 7;
inline void product::clear_brand_id() {
  brand_id_ = 0;
}
inline ::google::protobuf::int32 product::brand_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.brand_id)
  return brand_id_;
}
inline void product::set_brand_id(::google::protobuf::int32 value) {
  
  brand_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.brand_id)
}

// int32 source = 8;
inline void product::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 product::source() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.source)
  return source_;
}
inline void product::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.source)
}

// int32 product_type = 9;
inline void product::clear_product_type() {
  product_type_ = 0;
}
inline ::google::protobuf::int32 product::product_type() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.product_type)
  return product_type_;
}
inline void product::set_product_type(::google::protobuf::int32 value) {
  
  product_type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.product_type)
}

// int32 is_published = 10;
inline void product::clear_is_published() {
  is_published_ = 0;
}
inline ::google::protobuf::int32 product::is_published() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.is_published)
  return is_published_;
}
inline void product::set_is_published(::google::protobuf::int32 value) {
  
  is_published_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.is_published)
}

// int32 is_private = 11;
inline void product::clear_is_private() {
  is_private_ = 0;
}
inline ::google::protobuf::int32 product::is_private() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.is_private)
  return is_private_;
}
inline void product::set_is_private(::google::protobuf::int32 value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.is_private)
}

// int32 is_del = 12;
inline void product::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 product::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.is_del)
  return is_del_;
}
inline void product::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.is_del)
}

// int32 user_id = 13;
inline void product::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 product::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.user_id)
  return user_id_;
}
inline void product::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.user_id)
}

// int32 company_id = 14;
inline void product::clear_company_id() {
  company_id_ = 0;
}
inline ::google::protobuf::int32 product::company_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.company_id)
  return company_id_;
}
inline void product::set_company_id(::google::protobuf::int32 value) {
  
  company_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.company_id)
}

// string folder_name = 15;
inline void product::clear_folder_name() {
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::folder_name() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.folder_name)
  return folder_name_.GetNoArena();
}
inline void product::set_folder_name(const ::std::string& value) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.folder_name)
}
#if LANG_CXX11
inline void product::set_folder_name(::std::string&& value) {
  
  folder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.folder_name)
}
#endif
inline void product::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.folder_name)
}
inline void product::set_folder_name(const char* value, size_t size) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.folder_name)
}
inline ::std::string* product::mutable_folder_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.folder_name)
  return folder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_folder_name() {
  // @@protoc_insertion_point(field_release:d5.db2.product.folder_name)
  
  return folder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_folder_name(::std::string* folder_name) {
  if (folder_name != NULL) {
    
  } else {
    
  }
  folder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.folder_name)
}

// int32 sync_status = 16;
inline void product::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 product::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.sync_status)
  return sync_status_;
}
inline void product::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.sync_status)
}

// int32 category_id = 17;
inline void product::clear_category_id() {
  category_id_ = 0;
}
inline ::google::protobuf::int32 product::category_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.category_id)
  return category_id_;
}
inline void product::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product.category_id)
}

// string buy_url = 18;
inline void product::clear_buy_url() {
  buy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::buy_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.buy_url)
  return buy_url_.GetNoArena();
}
inline void product::set_buy_url(const ::std::string& value) {
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.buy_url)
}
#if LANG_CXX11
inline void product::set_buy_url(::std::string&& value) {
  
  buy_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.buy_url)
}
#endif
inline void product::set_buy_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.buy_url)
}
inline void product::set_buy_url(const char* value, size_t size) {
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.buy_url)
}
inline ::std::string* product::mutable_buy_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.buy_url)
  return buy_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_buy_url() {
  // @@protoc_insertion_point(field_release:d5.db2.product.buy_url)
  
  return buy_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_buy_url(::std::string* buy_url) {
  if (buy_url != NULL) {
    
  } else {
    
  }
  buy_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buy_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.buy_url)
}

// string dependent_file_list = 19;
inline void product::clear_dependent_file_list() {
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::dependent_file_list() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.dependent_file_list)
  return dependent_file_list_.GetNoArena();
}
inline void product::set_dependent_file_list(const ::std::string& value) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.dependent_file_list)
}
#if LANG_CXX11
inline void product::set_dependent_file_list(::std::string&& value) {
  
  dependent_file_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.dependent_file_list)
}
#endif
inline void product::set_dependent_file_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.dependent_file_list)
}
inline void product::set_dependent_file_list(const char* value, size_t size) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.dependent_file_list)
}
inline ::std::string* product::mutable_dependent_file_list() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.dependent_file_list)
  return dependent_file_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_dependent_file_list() {
  // @@protoc_insertion_point(field_release:d5.db2.product.dependent_file_list)
  
  return dependent_file_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_dependent_file_list(::std::string* dependent_file_list) {
  if (dependent_file_list != NULL) {
    
  } else {
    
  }
  dependent_file_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dependent_file_list);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.dependent_file_list)
}

// string product_code = 20;
inline void product::clear_product_code() {
  product_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product::product_code() const {
  // @@protoc_insertion_point(field_get:d5.db2.product.product_code)
  return product_code_.GetNoArena();
}
inline void product::set_product_code(const ::std::string& value) {
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product.product_code)
}
#if LANG_CXX11
inline void product::set_product_code(::std::string&& value) {
  
  product_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product.product_code)
}
#endif
inline void product::set_product_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product.product_code)
}
inline void product::set_product_code(const char* value, size_t size) {
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product.product_code)
}
inline ::std::string* product::mutable_product_code() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product.product_code)
  return product_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product::release_product_code() {
  // @@protoc_insertion_point(field_release:d5.db2.product.product_code)
  
  return product_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product::set_allocated_product_code(::std::string* product_code) {
  if (product_code != NULL) {
    
  } else {
    
  }
  product_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_code);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product.product_code)
}

// -------------------------------------------------------------------

// product_detail_virtual

// string id = 1;
inline void product_detail_virtual::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.id)
  return id_.GetNoArena();
}
inline void product_detail_virtual::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.id)
}
#if LANG_CXX11
inline void product_detail_virtual::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.id)
}
#endif
inline void product_detail_virtual::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.id)
}
inline void product_detail_virtual::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.id)
}
inline ::std::string* product_detail_virtual::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.id)
}

// string title = 2;
inline void product_detail_virtual::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::title() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.title)
  return title_.GetNoArena();
}
inline void product_detail_virtual::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.title)
}
#if LANG_CXX11
inline void product_detail_virtual::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.title)
}
#endif
inline void product_detail_virtual::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.title)
}
inline void product_detail_virtual::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.title)
}
inline ::std::string* product_detail_virtual::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_title() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.title)
}

// string description = 3;
inline void product_detail_virtual::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::description() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.description)
  return description_.GetNoArena();
}
inline void product_detail_virtual::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.description)
}
#if LANG_CXX11
inline void product_detail_virtual::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.description)
}
#endif
inline void product_detail_virtual::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.description)
}
inline void product_detail_virtual::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.description)
}
inline ::std::string* product_detail_virtual::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_description() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.description)
}

// double price = 4;
inline void product_detail_virtual::clear_price() {
  price_ = 0;
}
inline double product_detail_virtual::price() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.price)
  return price_;
}
inline void product_detail_virtual::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.price)
}

// int64 create_time = 5;
inline void product_detail_virtual::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 product_detail_virtual::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.create_time)
  return create_time_;
}
inline void product_detail_virtual::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.create_time)
}

// int64 update_time = 6;
inline void product_detail_virtual::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 product_detail_virtual::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.update_time)
  return update_time_;
}
inline void product_detail_virtual::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.update_time)
}

// int32 brand_id = 7;
inline void product_detail_virtual::clear_brand_id() {
  brand_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::brand_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.brand_id)
  return brand_id_;
}
inline void product_detail_virtual::set_brand_id(::google::protobuf::int32 value) {
  
  brand_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.brand_id)
}

// int32 source = 8;
inline void product_detail_virtual::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::source() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.source)
  return source_;
}
inline void product_detail_virtual::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.source)
}

// int32 product_type = 9;
inline void product_detail_virtual::clear_product_type() {
  product_type_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::product_type() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.product_type)
  return product_type_;
}
inline void product_detail_virtual::set_product_type(::google::protobuf::int32 value) {
  
  product_type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.product_type)
}

// int32 is_published = 10;
inline void product_detail_virtual::clear_is_published() {
  is_published_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::is_published() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.is_published)
  return is_published_;
}
inline void product_detail_virtual::set_is_published(::google::protobuf::int32 value) {
  
  is_published_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.is_published)
}

// int32 is_private = 11;
inline void product_detail_virtual::clear_is_private() {
  is_private_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::is_private() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.is_private)
  return is_private_;
}
inline void product_detail_virtual::set_is_private(::google::protobuf::int32 value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.is_private)
}

// int32 is_del = 12;
inline void product_detail_virtual::clear_is_del() {
  is_del_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::is_del() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.is_del)
  return is_del_;
}
inline void product_detail_virtual::set_is_del(::google::protobuf::int32 value) {
  
  is_del_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.is_del)
}

// int32 user_id = 13;
inline void product_detail_virtual::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.user_id)
  return user_id_;
}
inline void product_detail_virtual::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.user_id)
}

// int32 company_id = 14;
inline void product_detail_virtual::clear_company_id() {
  company_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::company_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.company_id)
  return company_id_;
}
inline void product_detail_virtual::set_company_id(::google::protobuf::int32 value) {
  
  company_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.company_id)
}

// string folder_name = 15;
inline void product_detail_virtual::clear_folder_name() {
  folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::folder_name() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.folder_name)
  return folder_name_.GetNoArena();
}
inline void product_detail_virtual::set_folder_name(const ::std::string& value) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.folder_name)
}
#if LANG_CXX11
inline void product_detail_virtual::set_folder_name(::std::string&& value) {
  
  folder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.folder_name)
}
#endif
inline void product_detail_virtual::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.folder_name)
}
inline void product_detail_virtual::set_folder_name(const char* value, size_t size) {
  
  folder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.folder_name)
}
inline ::std::string* product_detail_virtual::mutable_folder_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.folder_name)
  return folder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_folder_name() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.folder_name)
  
  return folder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_folder_name(::std::string* folder_name) {
  if (folder_name != NULL) {
    
  } else {
    
  }
  folder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_name);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.folder_name)
}

// int32 sync_status = 16;
inline void product_detail_virtual::clear_sync_status() {
  sync_status_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::sync_status() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.sync_status)
  return sync_status_;
}
inline void product_detail_virtual::set_sync_status(::google::protobuf::int32 value) {
  
  sync_status_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.sync_status)
}

// int32 category_id = 17;
inline void product_detail_virtual::clear_category_id() {
  category_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::category_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.category_id)
  return category_id_;
}
inline void product_detail_virtual::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.category_id)
}

// string buy_url = 18;
inline void product_detail_virtual::clear_buy_url() {
  buy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::buy_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.buy_url)
  return buy_url_.GetNoArena();
}
inline void product_detail_virtual::set_buy_url(const ::std::string& value) {
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.buy_url)
}
#if LANG_CXX11
inline void product_detail_virtual::set_buy_url(::std::string&& value) {
  
  buy_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.buy_url)
}
#endif
inline void product_detail_virtual::set_buy_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.buy_url)
}
inline void product_detail_virtual::set_buy_url(const char* value, size_t size) {
  
  buy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.buy_url)
}
inline ::std::string* product_detail_virtual::mutable_buy_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.buy_url)
  return buy_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_buy_url() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.buy_url)
  
  return buy_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_buy_url(::std::string* buy_url) {
  if (buy_url != NULL) {
    
  } else {
    
  }
  buy_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buy_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.buy_url)
}

// string furniture_product_id = 19;
inline void product_detail_virtual::clear_furniture_product_id() {
  furniture_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::furniture_product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_product_id)
  return furniture_product_id_.GetNoArena();
}
inline void product_detail_virtual::set_furniture_product_id(const ::std::string& value) {
  
  furniture_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_product_id)
}
#if LANG_CXX11
inline void product_detail_virtual::set_furniture_product_id(::std::string&& value) {
  
  furniture_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.furniture_product_id)
}
#endif
inline void product_detail_virtual::set_furniture_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  furniture_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.furniture_product_id)
}
inline void product_detail_virtual::set_furniture_product_id(const char* value, size_t size) {
  
  furniture_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.furniture_product_id)
}
inline ::std::string* product_detail_virtual::mutable_furniture_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.furniture_product_id)
  return furniture_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_furniture_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.furniture_product_id)
  
  return furniture_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_furniture_product_id(::std::string* furniture_product_id) {
  if (furniture_product_id != NULL) {
    
  } else {
    
  }
  furniture_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), furniture_product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.furniture_product_id)
}

// string furniture_ue_path = 20;
inline void product_detail_virtual::clear_furniture_ue_path() {
  furniture_ue_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::furniture_ue_path() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_ue_path)
  return furniture_ue_path_.GetNoArena();
}
inline void product_detail_virtual::set_furniture_ue_path(const ::std::string& value) {
  
  furniture_ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_ue_path)
}
#if LANG_CXX11
inline void product_detail_virtual::set_furniture_ue_path(::std::string&& value) {
  
  furniture_ue_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.furniture_ue_path)
}
#endif
inline void product_detail_virtual::set_furniture_ue_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  furniture_ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.furniture_ue_path)
}
inline void product_detail_virtual::set_furniture_ue_path(const char* value, size_t size) {
  
  furniture_ue_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.furniture_ue_path)
}
inline ::std::string* product_detail_virtual::mutable_furniture_ue_path() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.furniture_ue_path)
  return furniture_ue_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_furniture_ue_path() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.furniture_ue_path)
  
  return furniture_ue_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_furniture_ue_path(::std::string* furniture_ue_path) {
  if (furniture_ue_path != NULL) {
    
  } else {
    
  }
  furniture_ue_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), furniture_ue_path);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.furniture_ue_path)
}

// string furniture_pak_url = 21;
inline void product_detail_virtual::clear_furniture_pak_url() {
  furniture_pak_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::furniture_pak_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_pak_url)
  return furniture_pak_url_.GetNoArena();
}
inline void product_detail_virtual::set_furniture_pak_url(const ::std::string& value) {
  
  furniture_pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_pak_url)
}
#if LANG_CXX11
inline void product_detail_virtual::set_furniture_pak_url(::std::string&& value) {
  
  furniture_pak_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.furniture_pak_url)
}
#endif
inline void product_detail_virtual::set_furniture_pak_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  furniture_pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.furniture_pak_url)
}
inline void product_detail_virtual::set_furniture_pak_url(const char* value, size_t size) {
  
  furniture_pak_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.furniture_pak_url)
}
inline ::std::string* product_detail_virtual::mutable_furniture_pak_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.furniture_pak_url)
  return furniture_pak_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_furniture_pak_url() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.furniture_pak_url)
  
  return furniture_pak_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_furniture_pak_url(::std::string* furniture_pak_url) {
  if (furniture_pak_url != NULL) {
    
  } else {
    
  }
  furniture_pak_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), furniture_pak_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.furniture_pak_url)
}

// double furniture_length = 22;
inline void product_detail_virtual::clear_furniture_length() {
  furniture_length_ = 0;
}
inline double product_detail_virtual::furniture_length() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_length)
  return furniture_length_;
}
inline void product_detail_virtual::set_furniture_length(double value) {
  
  furniture_length_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_length)
}

// double furniture_depth = 23;
inline void product_detail_virtual::clear_furniture_depth() {
  furniture_depth_ = 0;
}
inline double product_detail_virtual::furniture_depth() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_depth)
  return furniture_depth_;
}
inline void product_detail_virtual::set_furniture_depth(double value) {
  
  furniture_depth_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_depth)
}

// double furniture_height = 24;
inline void product_detail_virtual::clear_furniture_height() {
  furniture_height_ = 0;
}
inline double product_detail_virtual::furniture_height() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_height)
  return furniture_height_;
}
inline void product_detail_virtual::set_furniture_height(double value) {
  
  furniture_height_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_height)
}

// int32 furniture_is_interactive = 25;
inline void product_detail_virtual::clear_furniture_is_interactive() {
  furniture_is_interactive_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::furniture_is_interactive() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_is_interactive)
  return furniture_is_interactive_;
}
inline void product_detail_virtual::set_furniture_is_interactive(::google::protobuf::int32 value) {
  
  furniture_is_interactive_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_is_interactive)
}

// int32 furniture_intelligent_type = 26;
inline void product_detail_virtual::clear_furniture_intelligent_type() {
  furniture_intelligent_type_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::furniture_intelligent_type() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_intelligent_type)
  return furniture_intelligent_type_;
}
inline void product_detail_virtual::set_furniture_intelligent_type(::google::protobuf::int32 value) {
  
  furniture_intelligent_type_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_intelligent_type)
}

// int32 furniture_furniture_style_id = 27;
inline void product_detail_virtual::clear_furniture_furniture_style_id() {
  furniture_furniture_style_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::furniture_furniture_style_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_furniture_style_id)
  return furniture_furniture_style_id_;
}
inline void product_detail_virtual::set_furniture_furniture_style_id(::google::protobuf::int32 value) {
  
  furniture_furniture_style_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_furniture_style_id)
}

// int32 furniture_furniture_main_material_id = 28;
inline void product_detail_virtual::clear_furniture_furniture_main_material_id() {
  furniture_furniture_main_material_id_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::furniture_furniture_main_material_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_furniture_main_material_id)
  return furniture_furniture_main_material_id_;
}
inline void product_detail_virtual::set_furniture_furniture_main_material_id(::google::protobuf::int32 value) {
  
  furniture_furniture_main_material_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_furniture_main_material_id)
}

// string furniture_detail_info = 29;
inline void product_detail_virtual::clear_furniture_detail_info() {
  furniture_detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::furniture_detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.furniture_detail_info)
  return furniture_detail_info_.GetNoArena();
}
inline void product_detail_virtual::set_furniture_detail_info(const ::std::string& value) {
  
  furniture_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.furniture_detail_info)
}
#if LANG_CXX11
inline void product_detail_virtual::set_furniture_detail_info(::std::string&& value) {
  
  furniture_detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.furniture_detail_info)
}
#endif
inline void product_detail_virtual::set_furniture_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  furniture_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.furniture_detail_info)
}
inline void product_detail_virtual::set_furniture_detail_info(const char* value, size_t size) {
  
  furniture_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.furniture_detail_info)
}
inline ::std::string* product_detail_virtual::mutable_furniture_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.furniture_detail_info)
  return furniture_detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_furniture_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.furniture_detail_info)
  
  return furniture_detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_furniture_detail_info(::std::string* furniture_detail_info) {
  if (furniture_detail_info != NULL) {
    
  } else {
    
  }
  furniture_detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), furniture_detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.furniture_detail_info)
}

// string building_material_product_id = 30;
inline void product_detail_virtual::clear_building_material_product_id() {
  building_material_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::building_material_product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_product_id)
  return building_material_product_id_.GetNoArena();
}
inline void product_detail_virtual::set_building_material_product_id(const ::std::string& value) {
  
  building_material_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_product_id)
}
#if LANG_CXX11
inline void product_detail_virtual::set_building_material_product_id(::std::string&& value) {
  
  building_material_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.building_material_product_id)
}
#endif
inline void product_detail_virtual::set_building_material_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  building_material_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.building_material_product_id)
}
inline void product_detail_virtual::set_building_material_product_id(const char* value, size_t size) {
  
  building_material_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.building_material_product_id)
}
inline ::std::string* product_detail_virtual::mutable_building_material_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.building_material_product_id)
  return building_material_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_building_material_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.building_material_product_id)
  
  return building_material_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_building_material_product_id(::std::string* building_material_product_id) {
  if (building_material_product_id != NULL) {
    
  } else {
    
  }
  building_material_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), building_material_product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.building_material_product_id)
}

// int32 building_material_is_for_floor = 31;
inline void product_detail_virtual::clear_building_material_is_for_floor() {
  building_material_is_for_floor_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::building_material_is_for_floor() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_is_for_floor)
  return building_material_is_for_floor_;
}
inline void product_detail_virtual::set_building_material_is_for_floor(::google::protobuf::int32 value) {
  
  building_material_is_for_floor_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_is_for_floor)
}

// int32 building_material_is_for_wall = 32;
inline void product_detail_virtual::clear_building_material_is_for_wall() {
  building_material_is_for_wall_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::building_material_is_for_wall() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_is_for_wall)
  return building_material_is_for_wall_;
}
inline void product_detail_virtual::set_building_material_is_for_wall(::google::protobuf::int32 value) {
  
  building_material_is_for_wall_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_is_for_wall)
}

// int32 building_material_is_for_ceiling = 33;
inline void product_detail_virtual::clear_building_material_is_for_ceiling() {
  building_material_is_for_ceiling_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::building_material_is_for_ceiling() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_is_for_ceiling)
  return building_material_is_for_ceiling_;
}
inline void product_detail_virtual::set_building_material_is_for_ceiling(::google::protobuf::int32 value) {
  
  building_material_is_for_ceiling_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_is_for_ceiling)
}

// string building_material_material_id = 34;
inline void product_detail_virtual::clear_building_material_material_id() {
  building_material_material_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::building_material_material_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_material_id)
  return building_material_material_id_.GetNoArena();
}
inline void product_detail_virtual::set_building_material_material_id(const ::std::string& value) {
  
  building_material_material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_material_id)
}
#if LANG_CXX11
inline void product_detail_virtual::set_building_material_material_id(::std::string&& value) {
  
  building_material_material_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.building_material_material_id)
}
#endif
inline void product_detail_virtual::set_building_material_material_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  building_material_material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.building_material_material_id)
}
inline void product_detail_virtual::set_building_material_material_id(const char* value, size_t size) {
  
  building_material_material_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.building_material_material_id)
}
inline ::std::string* product_detail_virtual::mutable_building_material_material_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.building_material_material_id)
  return building_material_material_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_building_material_material_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.building_material_material_id)
  
  return building_material_material_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_building_material_material_id(::std::string* building_material_material_id) {
  if (building_material_material_id != NULL) {
    
  } else {
    
  }
  building_material_material_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), building_material_material_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.building_material_material_id)
}

// string building_material_detail_info = 35;
inline void product_detail_virtual::clear_building_material_detail_info() {
  building_material_detail_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::building_material_detail_info() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_detail_info)
  return building_material_detail_info_.GetNoArena();
}
inline void product_detail_virtual::set_building_material_detail_info(const ::std::string& value) {
  
  building_material_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_detail_info)
}
#if LANG_CXX11
inline void product_detail_virtual::set_building_material_detail_info(::std::string&& value) {
  
  building_material_detail_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.building_material_detail_info)
}
#endif
inline void product_detail_virtual::set_building_material_detail_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  building_material_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.building_material_detail_info)
}
inline void product_detail_virtual::set_building_material_detail_info(const char* value, size_t size) {
  
  building_material_detail_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.building_material_detail_info)
}
inline ::std::string* product_detail_virtual::mutable_building_material_detail_info() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.building_material_detail_info)
  return building_material_detail_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_building_material_detail_info() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.building_material_detail_info)
  
  return building_material_detail_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_building_material_detail_info(::std::string* building_material_detail_info) {
  if (building_material_detail_info != NULL) {
    
  } else {
    
  }
  building_material_detail_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), building_material_detail_info);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.building_material_detail_info)
}

// int32 building_material_length = 36;
inline void product_detail_virtual::clear_building_material_length() {
  building_material_length_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::building_material_length() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_length)
  return building_material_length_;
}
inline void product_detail_virtual::set_building_material_length(::google::protobuf::int32 value) {
  
  building_material_length_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_length)
}

// int32 building_material_width = 37;
inline void product_detail_virtual::clear_building_material_width() {
  building_material_width_ = 0;
}
inline ::google::protobuf::int32 product_detail_virtual::building_material_width() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.building_material_width)
  return building_material_width_;
}
inline void product_detail_virtual::set_building_material_width(::google::protobuf::int32 value) {
  
  building_material_width_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.building_material_width)
}

// string dependent_file_list = 38;
inline void product_detail_virtual::clear_dependent_file_list() {
  dependent_file_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::dependent_file_list() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.dependent_file_list)
  return dependent_file_list_.GetNoArena();
}
inline void product_detail_virtual::set_dependent_file_list(const ::std::string& value) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.dependent_file_list)
}
#if LANG_CXX11
inline void product_detail_virtual::set_dependent_file_list(::std::string&& value) {
  
  dependent_file_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.dependent_file_list)
}
#endif
inline void product_detail_virtual::set_dependent_file_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.dependent_file_list)
}
inline void product_detail_virtual::set_dependent_file_list(const char* value, size_t size) {
  
  dependent_file_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.dependent_file_list)
}
inline ::std::string* product_detail_virtual::mutable_dependent_file_list() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.dependent_file_list)
  return dependent_file_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_dependent_file_list() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.dependent_file_list)
  
  return dependent_file_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_dependent_file_list(::std::string* dependent_file_list) {
  if (dependent_file_list != NULL) {
    
  } else {
    
  }
  dependent_file_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dependent_file_list);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.dependent_file_list)
}

// string product_code = 39;
inline void product_detail_virtual::clear_product_code() {
  product_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_detail_virtual::product_code() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_detail_virtual.product_code)
  return product_code_.GetNoArena();
}
inline void product_detail_virtual::set_product_code(const ::std::string& value) {
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_detail_virtual.product_code)
}
#if LANG_CXX11
inline void product_detail_virtual::set_product_code(::std::string&& value) {
  
  product_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_detail_virtual.product_code)
}
#endif
inline void product_detail_virtual::set_product_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_detail_virtual.product_code)
}
inline void product_detail_virtual::set_product_code(const char* value, size_t size) {
  
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_detail_virtual.product_code)
}
inline ::std::string* product_detail_virtual::mutable_product_code() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_detail_virtual.product_code)
  return product_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_detail_virtual::release_product_code() {
  // @@protoc_insertion_point(field_release:d5.db2.product_detail_virtual.product_code)
  
  return product_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_detail_virtual::set_allocated_product_code(::std::string* product_code) {
  if (product_code != NULL) {
    
  } else {
    
  }
  product_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_code);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_detail_virtual.product_code)
}

// -------------------------------------------------------------------

// product_brand_temp

// string product_id = 1;
inline void product_brand_temp::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_brand_temp::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_brand_temp.product_id)
  return product_id_.GetNoArena();
}
inline void product_brand_temp::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_brand_temp.product_id)
}
#if LANG_CXX11
inline void product_brand_temp::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_brand_temp.product_id)
}
#endif
inline void product_brand_temp::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_brand_temp.product_id)
}
inline void product_brand_temp::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_brand_temp.product_id)
}
inline ::std::string* product_brand_temp::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_brand_temp.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_brand_temp::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_brand_temp.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_brand_temp::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_brand_temp.product_id)
}

// string brand = 2;
inline void product_brand_temp::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_brand_temp::brand() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_brand_temp.brand)
  return brand_.GetNoArena();
}
inline void product_brand_temp::set_brand(const ::std::string& value) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_brand_temp.brand)
}
#if LANG_CXX11
inline void product_brand_temp::set_brand(::std::string&& value) {
  
  brand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_brand_temp.brand)
}
#endif
inline void product_brand_temp::set_brand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_brand_temp.brand)
}
inline void product_brand_temp::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_brand_temp.brand)
}
inline ::std::string* product_brand_temp::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_brand_temp.brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_brand_temp::release_brand() {
  // @@protoc_insertion_point(field_release:d5.db2.product_brand_temp.brand)
  
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_brand_temp::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_brand_temp.brand)
}

// -------------------------------------------------------------------

// product_category_map

// int32 id = 1;
inline void product_category_map::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 product_category_map::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_category_map.id)
  return id_;
}
inline void product_category_map::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_category_map.id)
}

// int32 category_id = 2;
inline void product_category_map::clear_category_id() {
  category_id_ = 0;
}
inline ::google::protobuf::int32 product_category_map::category_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_category_map.category_id)
  return category_id_;
}
inline void product_category_map::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_category_map.category_id)
}

// string product_id = 3;
inline void product_category_map::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_category_map::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_category_map.product_id)
  return product_id_.GetNoArena();
}
inline void product_category_map::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_category_map.product_id)
}
#if LANG_CXX11
inline void product_category_map::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_category_map.product_id)
}
#endif
inline void product_category_map::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_category_map.product_id)
}
inline void product_category_map::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_category_map.product_id)
}
inline ::std::string* product_category_map::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_category_map.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_category_map::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_category_map.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_category_map::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_category_map.product_id)
}

// -------------------------------------------------------------------

// product_image

// string id = 1;
inline void product_image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_image::id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_image.id)
  return id_.GetNoArena();
}
inline void product_image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_image.id)
}
#if LANG_CXX11
inline void product_image::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_image.id)
}
#endif
inline void product_image::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_image.id)
}
inline void product_image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_image.id)
}
inline ::std::string* product_image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_image.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_image::release_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_image.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_image.id)
}

// int32 display_index = 2;
inline void product_image::clear_display_index() {
  display_index_ = 0;
}
inline ::google::protobuf::int32 product_image::display_index() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_image.display_index)
  return display_index_;
}
inline void product_image::set_display_index(::google::protobuf::int32 value) {
  
  display_index_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.product_image.display_index)
}

// string file_url = 3;
inline void product_image::clear_file_url() {
  file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_image::file_url() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_image.file_url)
  return file_url_.GetNoArena();
}
inline void product_image::set_file_url(const ::std::string& value) {
  
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_image.file_url)
}
#if LANG_CXX11
inline void product_image::set_file_url(::std::string&& value) {
  
  file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_image.file_url)
}
#endif
inline void product_image::set_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_image.file_url)
}
inline void product_image::set_file_url(const char* value, size_t size) {
  
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_image.file_url)
}
inline ::std::string* product_image::mutable_file_url() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_image.file_url)
  return file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_image::release_file_url() {
  // @@protoc_insertion_point(field_release:d5.db2.product_image.file_url)
  
  return file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_image::set_allocated_file_url(::std::string* file_url) {
  if (file_url != NULL) {
    
  } else {
    
  }
  file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_url);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_image.file_url)
}

// string product_id = 4;
inline void product_image::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& product_image::product_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.product_image.product_id)
  return product_id_.GetNoArena();
}
inline void product_image::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.product_image.product_id)
}
#if LANG_CXX11
inline void product_image::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.product_image.product_id)
}
#endif
inline void product_image::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.product_image.product_id)
}
inline void product_image::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.product_image.product_id)
}
inline ::std::string* product_image::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.product_image.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* product_image::release_product_id() {
  // @@protoc_insertion_point(field_release:d5.db2.product_image.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void product_image::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_image.product_id)
}

// -------------------------------------------------------------------

// setting_remember

// int32 user_id = 1;
inline void setting_remember::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 setting_remember::user_id() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.user_id)
  return user_id_;
}
inline void setting_remember::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.user_id)
}

// int32 layout_page_tip = 2;
inline void setting_remember::clear_layout_page_tip() {
  layout_page_tip_ = 0;
}
inline ::google::protobuf::int32 setting_remember::layout_page_tip() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.layout_page_tip)
  return layout_page_tip_;
}
inline void setting_remember::set_layout_page_tip(::google::protobuf::int32 value) {
  
  layout_page_tip_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.layout_page_tip)
}

// int32 layout_do_not_show_again = 3;
inline void setting_remember::clear_layout_do_not_show_again() {
  layout_do_not_show_again_ = 0;
}
inline ::google::protobuf::int32 setting_remember::layout_do_not_show_again() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.layout_do_not_show_again)
  return layout_do_not_show_again_;
}
inline void setting_remember::set_layout_do_not_show_again(::google::protobuf::int32 value) {
  
  layout_do_not_show_again_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.layout_do_not_show_again)
}

// int32 vr_capture_do_not_show_again = 4;
inline void setting_remember::clear_vr_capture_do_not_show_again() {
  vr_capture_do_not_show_again_ = 0;
}
inline ::google::protobuf::int32 setting_remember::vr_capture_do_not_show_again() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.vr_capture_do_not_show_again)
  return vr_capture_do_not_show_again_;
}
inline void setting_remember::set_vr_capture_do_not_show_again(::google::protobuf::int32 value) {
  
  vr_capture_do_not_show_again_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.vr_capture_do_not_show_again)
}

// int64 sync_data_timestamp = 5;
inline void setting_remember::clear_sync_data_timestamp() {
  sync_data_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 setting_remember::sync_data_timestamp() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.sync_data_timestamp)
  return sync_data_timestamp_;
}
inline void setting_remember::set_sync_data_timestamp(::google::protobuf::int64 value) {
  
  sync_data_timestamp_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.sync_data_timestamp)
}

// string scalability = 6;
inline void setting_remember::clear_scalability() {
  scalability_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setting_remember::scalability() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.scalability)
  return scalability_.GetNoArena();
}
inline void setting_remember::set_scalability(const ::std::string& value) {
  
  scalability_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.scalability)
}
#if LANG_CXX11
inline void setting_remember::set_scalability(::std::string&& value) {
  
  scalability_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.setting_remember.scalability)
}
#endif
inline void setting_remember::set_scalability(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scalability_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.setting_remember.scalability)
}
inline void setting_remember::set_scalability(const char* value, size_t size) {
  
  scalability_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.setting_remember.scalability)
}
inline ::std::string* setting_remember::mutable_scalability() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.setting_remember.scalability)
  return scalability_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setting_remember::release_scalability() {
  // @@protoc_insertion_point(field_release:d5.db2.setting_remember.scalability)
  
  return scalability_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setting_remember::set_allocated_scalability(::std::string* scalability) {
  if (scalability != NULL) {
    
  } else {
    
  }
  scalability_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scalability);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.setting_remember.scalability)
}

// int32 magic_confirm_do_not_show_again = 7;
inline void setting_remember::clear_magic_confirm_do_not_show_again() {
  magic_confirm_do_not_show_again_ = 0;
}
inline ::google::protobuf::int32 setting_remember::magic_confirm_do_not_show_again() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.magic_confirm_do_not_show_again)
  return magic_confirm_do_not_show_again_;
}
inline void setting_remember::set_magic_confirm_do_not_show_again(::google::protobuf::int32 value) {
  
  magic_confirm_do_not_show_again_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.magic_confirm_do_not_show_again)
}

// int32 decoration_page_tip = 8;
inline void setting_remember::clear_decoration_page_tip() {
  decoration_page_tip_ = 0;
}
inline ::google::protobuf::int32 setting_remember::decoration_page_tip() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.decoration_page_tip)
  return decoration_page_tip_;
}
inline void setting_remember::set_decoration_page_tip(::google::protobuf::int32 value) {
  
  decoration_page_tip_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.decoration_page_tip)
}

// int32 material_replace_tip = 9;
inline void setting_remember::clear_material_replace_tip() {
  material_replace_tip_ = 0;
}
inline ::google::protobuf::int32 setting_remember::material_replace_tip() const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember.material_replace_tip)
  return material_replace_tip_;
}
inline void setting_remember::set_material_replace_tip(::google::protobuf::int32 value) {
  
  material_replace_tip_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.setting_remember.material_replace_tip)
}

// -------------------------------------------------------------------

// user_login

// string name = 1;
inline void user_login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_login::name() const {
  // @@protoc_insertion_point(field_get:d5.db2.user_login.name)
  return name_.GetNoArena();
}
inline void user_login::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.user_login.name)
}
#if LANG_CXX11
inline void user_login::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.user_login.name)
}
#endif
inline void user_login::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.user_login.name)
}
inline void user_login::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.user_login.name)
}
inline ::std::string* user_login::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.user_login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_login::release_name() {
  // @@protoc_insertion_point(field_release:d5.db2.user_login.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.user_login.name)
}

// string password = 2;
inline void user_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_login::password() const {
  // @@protoc_insertion_point(field_get:d5.db2.user_login.password)
  return password_.GetNoArena();
}
inline void user_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.user_login.password)
}
#if LANG_CXX11
inline void user_login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.user_login.password)
}
#endif
inline void user_login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.user_login.password)
}
inline void user_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.user_login.password)
}
inline ::std::string* user_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.user_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_login::release_password() {
  // @@protoc_insertion_point(field_release:d5.db2.user_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.user_login.password)
}

// int32 lastStatus = 3;
inline void user_login::clear_laststatus() {
  laststatus_ = 0;
}
inline ::google::protobuf::int32 user_login::laststatus() const {
  // @@protoc_insertion_point(field_get:d5.db2.user_login.lastStatus)
  return laststatus_;
}
inline void user_login::set_laststatus(::google::protobuf::int32 value) {
  
  laststatus_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.user_login.lastStatus)
}

// -------------------------------------------------------------------

// files_map

// string file = 1;
inline void files_map::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& files_map::file() const {
  // @@protoc_insertion_point(field_get:d5.db2.files_map.file)
  return file_.GetNoArena();
}
inline void files_map::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.files_map.file)
}
#if LANG_CXX11
inline void files_map::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.files_map.file)
}
#endif
inline void files_map::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.files_map.file)
}
inline void files_map::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.files_map.file)
}
inline ::std::string* files_map::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.files_map.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* files_map::release_file() {
  // @@protoc_insertion_point(field_release:d5.db2.files_map.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void files_map::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.files_map.file)
}

// string md5 = 2;
inline void files_map::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& files_map::md5() const {
  // @@protoc_insertion_point(field_get:d5.db2.files_map.md5)
  return md5_.GetNoArena();
}
inline void files_map::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.files_map.md5)
}
#if LANG_CXX11
inline void files_map::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.files_map.md5)
}
#endif
inline void files_map::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.files_map.md5)
}
inline void files_map::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.files_map.md5)
}
inline ::std::string* files_map::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.files_map.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* files_map::release_md5() {
  // @@protoc_insertion_point(field_release:d5.db2.files_map.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void files_map::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.files_map.md5)
}

// int64 update_time = 3;
inline void files_map::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 files_map::update_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.files_map.update_time)
  return update_time_;
}
inline void files_map::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.files_map.update_time)
}

// int64 length = 4;
inline void files_map::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 files_map::length() const {
  // @@protoc_insertion_point(field_get:d5.db2.files_map.length)
  return length_;
}
inline void files_map::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.files_map.length)
}

// string type = 5;
inline void files_map::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& files_map::type() const {
  // @@protoc_insertion_point(field_get:d5.db2.files_map.type)
  return type_.GetNoArena();
}
inline void files_map::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.files_map.type)
}
#if LANG_CXX11
inline void files_map::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.files_map.type)
}
#endif
inline void files_map::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.files_map.type)
}
inline void files_map::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.files_map.type)
}
inline ::std::string* files_map::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.files_map.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* files_map::release_type() {
  // @@protoc_insertion_point(field_release:d5.db2.files_map.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void files_map::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.files_map.type)
}

// -------------------------------------------------------------------

// header

// string key = 1;
inline void header::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& header::key() const {
  // @@protoc_insertion_point(field_get:d5.db2.header.key)
  return key_.GetNoArena();
}
inline void header::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:d5.db2.header.key)
}
#if LANG_CXX11
inline void header::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:d5.db2.header.key)
}
#endif
inline void header::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:d5.db2.header.key)
}
inline void header::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:d5.db2.header.key)
}
inline ::std::string* header::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:d5.db2.header.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* header::release_key() {
  // @@protoc_insertion_point(field_release:d5.db2.header.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void header::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:d5.db2.header.key)
}

// int64 create_time = 2;
inline void header::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 header::create_time() const {
  // @@protoc_insertion_point(field_get:d5.db2.header.create_time)
  return create_time_;
}
inline void header::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:d5.db2.header.create_time)
}

// -------------------------------------------------------------------

// asset_building_material_db

// .d5.db2.header head = 1;
inline bool asset_building_material_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_building_material_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_building_material_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_building_material_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_building_material_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_building_material_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_building_material_db.head)
  return head_;
}
inline void asset_building_material_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_building_material_db.head)
}

// repeated .d5.db2.asset_building_material content = 2;
inline int asset_building_material_db::content_size() const {
  return content_.size();
}
inline void asset_building_material_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_building_material* asset_building_material_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_building_material_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_building_material >*
asset_building_material_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_building_material_db.content)
  return &content_;
}
inline const ::d5::db2::asset_building_material& asset_building_material_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_building_material_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_building_material* asset_building_material_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_building_material_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_building_material >&
asset_building_material_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_building_material_db.content)
  return content_;
}

// -------------------------------------------------------------------

// asset_furniture_db

// .d5.db2.header head = 1;
inline bool asset_furniture_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_furniture_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_furniture_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_furniture_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_furniture_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_db.head)
  return head_;
}
inline void asset_furniture_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_db.head)
}

// repeated .d5.db2.asset_furniture content = 2;
inline int asset_furniture_db::content_size() const {
  return content_.size();
}
inline void asset_furniture_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_furniture* asset_furniture_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture >*
asset_furniture_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_furniture_db.content)
  return &content_;
}
inline const ::d5::db2::asset_furniture& asset_furniture_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_furniture* asset_furniture_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_furniture_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture >&
asset_furniture_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_furniture_db.content)
  return content_;
}

// -------------------------------------------------------------------

// asset_furniture_style_db

// .d5.db2.header head = 1;
inline bool asset_furniture_style_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_furniture_style_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_furniture_style_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_furniture_style_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_furniture_style_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_db.head)
  return head_;
}
inline void asset_furniture_style_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_db.head)
}

// repeated .d5.db2.asset_furniture_style content = 2;
inline int asset_furniture_style_db::content_size() const {
  return content_.size();
}
inline void asset_furniture_style_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_furniture_style* asset_furniture_style_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style >*
asset_furniture_style_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_furniture_style_db.content)
  return &content_;
}
inline const ::d5::db2::asset_furniture_style& asset_furniture_style_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_furniture_style* asset_furniture_style_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_furniture_style_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style >&
asset_furniture_style_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_furniture_style_db.content)
  return content_;
}

// -------------------------------------------------------------------

// asset_furniture_style_material_map_db

// .d5.db2.header head = 1;
inline bool asset_furniture_style_material_map_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_furniture_style_material_map_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_furniture_style_material_map_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_furniture_style_material_map_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_furniture_style_material_map_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_furniture_style_material_map_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map_db.head)
  return head_;
}
inline void asset_furniture_style_material_map_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_furniture_style_material_map_db.head)
}

// repeated .d5.db2.asset_furniture_style_material_map content = 2;
inline int asset_furniture_style_material_map_db::content_size() const {
  return content_.size();
}
inline void asset_furniture_style_material_map_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_furniture_style_material_map* asset_furniture_style_material_map_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_furniture_style_material_map_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style_material_map >*
asset_furniture_style_material_map_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_furniture_style_material_map_db.content)
  return &content_;
}
inline const ::d5::db2::asset_furniture_style_material_map& asset_furniture_style_material_map_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_furniture_style_material_map_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_furniture_style_material_map* asset_furniture_style_material_map_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_furniture_style_material_map_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_furniture_style_material_map >&
asset_furniture_style_material_map_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_furniture_style_material_map_db.content)
  return content_;
}

// -------------------------------------------------------------------

// asset_material_db

// .d5.db2.header head = 1;
inline bool asset_material_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_material_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_material_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_material_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_material_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material_db.head)
  return head_;
}
inline void asset_material_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material_db.head)
}

// repeated .d5.db2.asset_material content = 2;
inline int asset_material_db::content_size() const {
  return content_.size();
}
inline void asset_material_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_material* asset_material_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material >*
asset_material_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_material_db.content)
  return &content_;
}
inline const ::d5::db2::asset_material& asset_material_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_material* asset_material_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_material_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material >&
asset_material_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_material_db.content)
  return content_;
}

// -------------------------------------------------------------------

// asset_material_category_db

// .d5.db2.header head = 1;
inline bool asset_material_category_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void asset_material_category_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& asset_material_category_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* asset_material_category_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.asset_material_category_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* asset_material_category_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material_category_db.head)
  return head_;
}
inline void asset_material_category_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.asset_material_category_db.head)
}

// repeated .d5.db2.asset_material_category content = 2;
inline int asset_material_category_db::content_size() const {
  return content_.size();
}
inline void asset_material_category_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::asset_material_category* asset_material_category_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.asset_material_category_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material_category >*
asset_material_category_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.asset_material_category_db.content)
  return &content_;
}
inline const ::d5::db2::asset_material_category& asset_material_category_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.asset_material_category_db.content)
  return content_.Get(index);
}
inline ::d5::db2::asset_material_category* asset_material_category_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.asset_material_category_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::asset_material_category >&
asset_material_category_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.asset_material_category_db.content)
  return content_;
}

// -------------------------------------------------------------------

// furniture_color_map_db

// .d5.db2.header head = 1;
inline bool furniture_color_map_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void furniture_color_map_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& furniture_color_map_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.furniture_color_map_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* furniture_color_map_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.furniture_color_map_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* furniture_color_map_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.furniture_color_map_db.head)
  return head_;
}
inline void furniture_color_map_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.furniture_color_map_db.head)
}

// repeated .d5.db2.furniture_color_map content = 2;
inline int furniture_color_map_db::content_size() const {
  return content_.size();
}
inline void furniture_color_map_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::furniture_color_map* furniture_color_map_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.furniture_color_map_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >*
furniture_color_map_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.furniture_color_map_db.content)
  return &content_;
}
inline const ::d5::db2::furniture_color_map& furniture_color_map_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.furniture_color_map_db.content)
  return content_.Get(index);
}
inline ::d5::db2::furniture_color_map* furniture_color_map_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.furniture_color_map_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::furniture_color_map >&
furniture_color_map_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.furniture_color_map_db.content)
  return content_;
}

// -------------------------------------------------------------------

// GA_db

// .d5.db2.header head = 1;
inline bool GA_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void GA_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& GA_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.GA_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* GA_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.GA_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* GA_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.GA_db.head)
  return head_;
}
inline void GA_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.GA_db.head)
}

// repeated .d5.db2.GA content = 2;
inline int GA_db::content_size() const {
  return content_.size();
}
inline void GA_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::GA* GA_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.GA_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::GA >*
GA_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.GA_db.content)
  return &content_;
}
inline const ::d5::db2::GA& GA_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.GA_db.content)
  return content_.Get(index);
}
inline ::d5::db2::GA* GA_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.GA_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::GA >&
GA_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.GA_db.content)
  return content_;
}

// -------------------------------------------------------------------

// plan_desgin_template_statu_db

// .d5.db2.header head = 1;
inline bool plan_desgin_template_statu_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void plan_desgin_template_statu_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& plan_desgin_template_statu_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.plan_desgin_template_statu_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* plan_desgin_template_statu_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_desgin_template_statu_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* plan_desgin_template_statu_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_desgin_template_statu_db.head)
  return head_;
}
inline void plan_desgin_template_statu_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_desgin_template_statu_db.head)
}

// repeated .d5.db2.plan_desgin_template_statu content = 2;
inline int plan_desgin_template_statu_db::content_size() const {
  return content_.size();
}
inline void plan_desgin_template_statu_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::plan_desgin_template_statu* plan_desgin_template_statu_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_desgin_template_statu_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_desgin_template_statu >*
plan_desgin_template_statu_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.plan_desgin_template_statu_db.content)
  return &content_;
}
inline const ::d5::db2::plan_desgin_template_statu& plan_desgin_template_statu_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_desgin_template_statu_db.content)
  return content_.Get(index);
}
inline ::d5::db2::plan_desgin_template_statu* plan_desgin_template_statu_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.plan_desgin_template_statu_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_desgin_template_statu >&
plan_desgin_template_statu_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.plan_desgin_template_statu_db.content)
  return content_;
}

// -------------------------------------------------------------------

// plan_design_db

// .d5.db2.header head = 1;
inline bool plan_design_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void plan_design_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& plan_design_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.plan_design_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* plan_design_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.plan_design_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* plan_design_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design_db.head)
  return head_;
}
inline void plan_design_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.plan_design_db.head)
}

// repeated .d5.db2.plan_design content = 2;
inline int plan_design_db::content_size() const {
  return content_.size();
}
inline void plan_design_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::plan_design* plan_design_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.plan_design_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_design >*
plan_design_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.plan_design_db.content)
  return &content_;
}
inline const ::d5::db2::plan_design& plan_design_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.plan_design_db.content)
  return content_.Get(index);
}
inline ::d5::db2::plan_design* plan_design_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.plan_design_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::plan_design >&
plan_design_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.plan_design_db.content)
  return content_;
}

// -------------------------------------------------------------------

// product_db

// .d5.db2.header head = 1;
inline bool product_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void product_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& product_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.product_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* product_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.product_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* product_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.product_db.head)
  return head_;
}
inline void product_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_db.head)
}

// repeated .d5.db2.product content = 2;
inline int product_db::content_size() const {
  return content_.size();
}
inline void product_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::product* product_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.product_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::product >*
product_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.product_db.content)
  return &content_;
}
inline const ::d5::db2::product& product_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.product_db.content)
  return content_.Get(index);
}
inline ::d5::db2::product* product_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.product_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::product >&
product_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.product_db.content)
  return content_;
}

// -------------------------------------------------------------------

// product_brand_temp_db

// .d5.db2.header head = 1;
inline bool product_brand_temp_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void product_brand_temp_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& product_brand_temp_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.product_brand_temp_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* product_brand_temp_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.product_brand_temp_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* product_brand_temp_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.product_brand_temp_db.head)
  return head_;
}
inline void product_brand_temp_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_brand_temp_db.head)
}

// repeated .d5.db2.product_brand_temp content = 2;
inline int product_brand_temp_db::content_size() const {
  return content_.size();
}
inline void product_brand_temp_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::product_brand_temp* product_brand_temp_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.product_brand_temp_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::product_brand_temp >*
product_brand_temp_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.product_brand_temp_db.content)
  return &content_;
}
inline const ::d5::db2::product_brand_temp& product_brand_temp_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.product_brand_temp_db.content)
  return content_.Get(index);
}
inline ::d5::db2::product_brand_temp* product_brand_temp_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.product_brand_temp_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_brand_temp >&
product_brand_temp_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.product_brand_temp_db.content)
  return content_;
}

// -------------------------------------------------------------------

// product_category_map_db

// .d5.db2.header head = 1;
inline bool product_category_map_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void product_category_map_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& product_category_map_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.product_category_map_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* product_category_map_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.product_category_map_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* product_category_map_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.product_category_map_db.head)
  return head_;
}
inline void product_category_map_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_category_map_db.head)
}

// repeated .d5.db2.product_category_map content = 2;
inline int product_category_map_db::content_size() const {
  return content_.size();
}
inline void product_category_map_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::product_category_map* product_category_map_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.product_category_map_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::product_category_map >*
product_category_map_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.product_category_map_db.content)
  return &content_;
}
inline const ::d5::db2::product_category_map& product_category_map_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.product_category_map_db.content)
  return content_.Get(index);
}
inline ::d5::db2::product_category_map* product_category_map_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.product_category_map_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_category_map >&
product_category_map_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.product_category_map_db.content)
  return content_;
}

// -------------------------------------------------------------------

// product_image_db

// .d5.db2.header head = 1;
inline bool product_image_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void product_image_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& product_image_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.product_image_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* product_image_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.product_image_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* product_image_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.product_image_db.head)
  return head_;
}
inline void product_image_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.product_image_db.head)
}

// repeated .d5.db2.product_image content = 2;
inline int product_image_db::content_size() const {
  return content_.size();
}
inline void product_image_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::product_image* product_image_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.product_image_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::product_image >*
product_image_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.product_image_db.content)
  return &content_;
}
inline const ::d5::db2::product_image& product_image_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.product_image_db.content)
  return content_.Get(index);
}
inline ::d5::db2::product_image* product_image_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.product_image_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::product_image >&
product_image_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.product_image_db.content)
  return content_;
}

// -------------------------------------------------------------------

// setting_remember_db

// .d5.db2.header head = 1;
inline bool setting_remember_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void setting_remember_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& setting_remember_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* setting_remember_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.setting_remember_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* setting_remember_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.setting_remember_db.head)
  return head_;
}
inline void setting_remember_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.setting_remember_db.head)
}

// repeated .d5.db2.setting_remember content = 2;
inline int setting_remember_db::content_size() const {
  return content_.size();
}
inline void setting_remember_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::setting_remember* setting_remember_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.setting_remember_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::setting_remember >*
setting_remember_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.setting_remember_db.content)
  return &content_;
}
inline const ::d5::db2::setting_remember& setting_remember_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.setting_remember_db.content)
  return content_.Get(index);
}
inline ::d5::db2::setting_remember* setting_remember_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.setting_remember_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::setting_remember >&
setting_remember_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.setting_remember_db.content)
  return content_;
}

// -------------------------------------------------------------------

// user_login_db

// .d5.db2.header head = 1;
inline bool user_login_db::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void user_login_db::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::d5::db2::header& user_login_db::head() const {
  const ::d5::db2::header* p = head_;
  // @@protoc_insertion_point(field_get:d5.db2.user_login_db.head)
  return p != NULL ? *p : *reinterpret_cast<const ::d5::db2::header*>(
      &::d5::db2::_header_default_instance_);
}
inline ::d5::db2::header* user_login_db::release_head() {
  // @@protoc_insertion_point(field_release:d5.db2.user_login_db.head)
  
  ::d5::db2::header* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::d5::db2::header* user_login_db::mutable_head() {
  
  if (head_ == NULL) {
    head_ = ::google::protobuf::Arena::Create< ::d5::db2::header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:d5.db2.user_login_db.head)
  return head_;
}
inline void user_login_db::set_allocated_head(::d5::db2::header* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:d5.db2.user_login_db.head)
}

// repeated .d5.db2.user_login content = 2;
inline int user_login_db::content_size() const {
  return content_.size();
}
inline void user_login_db::clear_content() {
  content_.Clear();
}
inline ::d5::db2::user_login* user_login_db::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:d5.db2.user_login_db.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::d5::db2::user_login >*
user_login_db::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:d5.db2.user_login_db.content)
  return &content_;
}
inline const ::d5::db2::user_login& user_login_db::content(int index) const {
  // @@protoc_insertion_point(field_get:d5.db2.user_login_db.content)
  return content_.Get(index);
}
inline ::d5::db2::user_login* user_login_db::add_content() {
  // @@protoc_insertion_point(field_add:d5.db2.user_login_db.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::d5::db2::user_login >&
user_login_db::content() const {
  // @@protoc_insertion_point(field_list:d5.db2.user_login_db.content)
  return content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db2
}  // namespace d5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db2_2eproto_INCLUDED
